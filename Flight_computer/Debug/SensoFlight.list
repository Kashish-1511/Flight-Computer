
SensoFlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9b4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800cbb8  0800cbb8  0000dbb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d204  0800d204  0000f318  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d204  0800d204  0000e204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d20c  0800d20c  0000f318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d20c  0800d20c  0000e20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d210  0800d210  0000e210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d214  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d8  0800d3ec  0000f1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000278  0800d48c  0000f278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004c0c  20000318  0800d52c  0000f318  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20004f24  0800d52c  0000ff24  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000f318  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027606  00000000  00000000  0000f346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005066  00000000  00000000  0003694c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f50  00000000  00000000  0003b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000186b  00000000  00000000  0003d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007229  00000000  00000000  0003f173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026f89  00000000  00000000  0004639c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00112483  00000000  00000000  0006d325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017f7a8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009480  00000000  00000000  0017f7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000048  00000000  00000000  00188c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000318 	.word	0x20000318
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cb9c 	.word	0x0800cb9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000031c 	.word	0x2000031c
 800023c:	0800cb9c 	.word	0x0800cb9c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <GY63_ReadADC>:


#include "gy63.h"
#include "string.h"

static uint32_t GY63_ReadADC(I2C_HandleTypeDef *hi2c) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];
    HAL_I2C_Mem_Read(hi2c, MS5611_ADDR, CMD_ADC_READ, I2C_MEMADD_SIZE_8BIT, buf, 3, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	2303      	movs	r3, #3
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	2200      	movs	r2, #0
 8000638:	21ee      	movs	r1, #238	@ 0xee
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f002 fff0 	bl	8003620 <HAL_I2C_Mem_Read>
    return ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) | buf[2];
 8000640:	7b3b      	ldrb	r3, [r7, #12]
 8000642:	041a      	lsls	r2, r3, #16
 8000644:	7b7b      	ldrb	r3, [r7, #13]
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	4313      	orrs	r3, r2
 800064a:	7bba      	ldrb	r2, [r7, #14]
 800064c:	4313      	orrs	r3, r2
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <GY63_Init>:

HAL_StatusTypeDef GY63_Init(GY63_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c) {
 8000656:	b580      	push	{r7, lr}
 8000658:	b086      	sub	sp, #24
 800065a:	af02      	add	r7, sp, #8
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	6039      	str	r1, [r7, #0]
    uint8_t cmd;
    HAL_StatusTypeDef status;

    // Reset
    cmd = CMD_RESET;
 8000660:	231e      	movs	r3, #30
 8000662:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(hi2c, MS5611_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8000664:	f107 020d 	add.w	r2, r7, #13
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	21ee      	movs	r1, #238	@ 0xee
 8000672:	6838      	ldr	r0, [r7, #0]
 8000674:	f002 fcb2 	bl	8002fdc <HAL_I2C_Master_Transmit>
 8000678:	4603      	mov	r3, r0
 800067a:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) return status;
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <GY63_Init+0x30>
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	e043      	b.n	800070e <GY63_Init+0xb8>
    HAL_Delay(3); // Reset time
 8000686:	2003      	movs	r0, #3
 8000688:	f001 fdd8 	bl	800223c <HAL_Delay>

    // Read PROM coefficients
    for (uint8_t i = 0; i < 7; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e039      	b.n	8000706 <GY63_Init+0xb0>
        uint8_t prom_cmd = 0xA0 + (i * 2);
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	3350      	adds	r3, #80	@ 0x50
 8000696:	b2db      	uxtb	r3, r3
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	733b      	strb	r3, [r7, #12]
        uint8_t buf[2];
        status = HAL_I2C_Master_Transmit(hi2c, MS5611_ADDR, &prom_cmd, 1, HAL_MAX_DELAY);
 800069e:	f107 020c 	add.w	r2, r7, #12
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	21ee      	movs	r1, #238	@ 0xee
 80006ac:	6838      	ldr	r0, [r7, #0]
 80006ae:	f002 fc95 	bl	8002fdc <HAL_I2C_Master_Transmit>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73bb      	strb	r3, [r7, #14]
        if (status != HAL_OK) return status;
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <GY63_Init+0x6a>
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	e026      	b.n	800070e <GY63_Init+0xb8>
        status = HAL_I2C_Master_Receive(hi2c, MS5611_ADDR, buf, 2, HAL_MAX_DELAY);
 80006c0:	f107 0208 	add.w	r2, r7, #8
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2302      	movs	r3, #2
 80006cc:	21ee      	movs	r1, #238	@ 0xee
 80006ce:	6838      	ldr	r0, [r7, #0]
 80006d0:	f002 fd9c 	bl	800320c <HAL_I2C_Master_Receive>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73bb      	strb	r3, [r7, #14]
        if (status != HAL_OK) return status;
 80006d8:	7bbb      	ldrb	r3, [r7, #14]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <GY63_Init+0x8c>
 80006de:	7bbb      	ldrb	r3, [r7, #14]
 80006e0:	e015      	b.n	800070e <GY63_Init+0xb8>
        dev->C[i] = (buf[0] << 8) | buf[1];
 80006e2:	7a3b      	ldrb	r3, [r7, #8]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	7a7b      	ldrb	r3, [r7, #9]
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b291      	uxth	r1, r2
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	460a      	mov	r2, r1
 80006fe:	809a      	strh	r2, [r3, #4]
    for (uint8_t i = 0; i < 7; i++) {
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	3301      	adds	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b06      	cmp	r3, #6
 800070a:	d9c2      	bls.n	8000692 <GY63_Init+0x3c>
    }
    return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <GY63_Read>:

HAL_StatusTypeDef GY63_Read(I2C_HandleTypeDef *hi2c, uint32_t *raw_pressure, uint32_t *raw_temperature) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b088      	sub	sp, #32
 800071a:	af02      	add	r7, sp, #8
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
    uint8_t cmd;
    HAL_StatusTypeDef status;

    // Start D1 (pressure) conversion
    cmd = CMD_CONV_D1_BASE | OSR_256; // OSR can be changed
 8000722:	2340      	movs	r3, #64	@ 0x40
 8000724:	75bb      	strb	r3, [r7, #22]
    status = HAL_I2C_Master_Transmit(hi2c, MS5611_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8000726:	f107 0216 	add.w	r2, r7, #22
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	21ee      	movs	r1, #238	@ 0xee
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f002 fc51 	bl	8002fdc <HAL_I2C_Master_Transmit>
 800073a:	4603      	mov	r3, r0
 800073c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <GY63_Read+0x32>
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	e025      	b.n	8000794 <GY63_Read+0x7e>
    HAL_Delay(3); // wait for conversion
 8000748:	2003      	movs	r0, #3
 800074a:	f001 fd77 	bl	800223c <HAL_Delay>
    *raw_pressure = GY63_ReadADC(hi2c);
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f7ff ff64 	bl	800061c <GY63_ReadADC>
 8000754:	4602      	mov	r2, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	601a      	str	r2, [r3, #0]

    // Start D2 (temperature) conversion
    cmd = CMD_CONV_D2_BASE | OSR_256;
 800075a:	2350      	movs	r3, #80	@ 0x50
 800075c:	75bb      	strb	r3, [r7, #22]
    status = HAL_I2C_Master_Transmit(hi2c, MS5611_ADDR, &cmd, 1, HAL_MAX_DELAY);
 800075e:	f107 0216 	add.w	r2, r7, #22
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	21ee      	movs	r1, #238	@ 0xee
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f002 fc35 	bl	8002fdc <HAL_I2C_Master_Transmit>
 8000772:	4603      	mov	r3, r0
 8000774:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <GY63_Read+0x6a>
 800077c:	7dfb      	ldrb	r3, [r7, #23]
 800077e:	e009      	b.n	8000794 <GY63_Read+0x7e>
    HAL_Delay(5);
 8000780:	2005      	movs	r0, #5
 8000782:	f001 fd5b 	bl	800223c <HAL_Delay>
    *raw_temperature = GY63_ReadADC(hi2c);
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f7ff ff48 	bl	800061c <GY63_ReadADC>
 800078c:	4602      	mov	r2, r0
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <ADXL375_Init>:
#define ADXL375_REG_DEVID        0x00
#define ADXL375_REG_POWER_CTL    0x2D
#define ADXL375_REG_DATAX0       0x32
#define ADXL375_REG_DATA_FORMAT  0x31

HAL_StatusTypeDef ADXL375_Init(I2C_HandleTypeDef *hi2c) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af04      	add	r7, sp, #16
 80007a2:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // Set data format: full resolution, ±200g (0x0B)
    data = 0x0B;
 80007a4:	230b      	movs	r3, #11
 80007a6:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, ADXL375_I2C_ADDR, ADXL375_REG_DATA_FORMAT, 1, &data, 1, HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	f107 030f 	add.w	r3, r7, #15
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	2231      	movs	r2, #49	@ 0x31
 80007bc:	21a6      	movs	r1, #166	@ 0xa6
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f002 fe1a 	bl	80033f8 <HAL_I2C_Mem_Write>

    // Enable measurement mode
    data = 0x08;
 80007c4:	2308      	movs	r3, #8
 80007c6:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, ADXL375_I2C_ADDR, ADXL375_REG_POWER_CTL, 1, &data, 1, HAL_MAX_DELAY);
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	2301      	movs	r3, #1
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	f107 030f 	add.w	r3, r7, #15
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	222d      	movs	r2, #45	@ 0x2d
 80007dc:	21a6      	movs	r1, #166	@ 0xa6
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f002 fe0a 	bl	80033f8 <HAL_I2C_Mem_Write>

    return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <ADXL375_ReadAccel>:

void ADXL375_ReadAccel(I2C_HandleTypeDef *hi2c, int16_t *accel) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b088      	sub	sp, #32
 80007f2:	af04      	add	r7, sp, #16
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
    uint8_t buffer[6];

    HAL_I2C_Mem_Read(hi2c, ADXL375_I2C_ADDR, ADXL375_REG_DATAX0, 1, buffer, 6, HAL_MAX_DELAY);
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	2306      	movs	r3, #6
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2301      	movs	r3, #1
 800080a:	2232      	movs	r2, #50	@ 0x32
 800080c:	21a6      	movs	r1, #166	@ 0xa6
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f002 ff06 	bl	8003620 <HAL_I2C_Mem_Read>

    accel[0] = (int16_t)((buffer[1] << 8) | buffer[0]);
 8000814:	7a7b      	ldrb	r3, [r7, #9]
 8000816:	b21b      	sxth	r3, r3
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	7a3b      	ldrb	r3, [r7, #8]
 800081e:	b21b      	sxth	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b21a      	sxth	r2, r3
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	801a      	strh	r2, [r3, #0]
    accel[1] = (int16_t)((buffer[3] << 8) | buffer[2]);
 8000828:	7afb      	ldrb	r3, [r7, #11]
 800082a:	b21b      	sxth	r3, r3
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	b219      	sxth	r1, r3
 8000830:	7abb      	ldrb	r3, [r7, #10]
 8000832:	b21a      	sxth	r2, r3
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	3302      	adds	r3, #2
 8000838:	430a      	orrs	r2, r1
 800083a:	b212      	sxth	r2, r2
 800083c:	801a      	strh	r2, [r3, #0]
    accel[2] = (int16_t)((buffer[5] << 8) | buffer[4]);
 800083e:	7b7b      	ldrb	r3, [r7, #13]
 8000840:	b21b      	sxth	r3, r3
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b219      	sxth	r1, r3
 8000846:	7b3b      	ldrb	r3, [r7, #12]
 8000848:	b21a      	sxth	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3304      	adds	r3, #4
 800084e:	430a      	orrs	r2, r1
 8000850:	b212      	sxth	r2, r2
 8000852:	801a      	strh	r2, [r3, #0]

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <vApplicationGetIdleTaskMemory+0x2c>)
 800086c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <vApplicationGetIdleTaskMemory+0x30>)
 8000872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	20000334 	.word	0x20000334
 800088c:	200003d4 	.word	0x200003d4

08000890 <LSM6DSO32_ReadAccelGyro>:


#include "lsm6dso32.h"
#include <stdio.h>
void LSM6DSO32_ReadAccelGyro(I2C_HandleTypeDef *hi2c, int16_t *accel, int16_t *gyro)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af04      	add	r7, sp, #16
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
    uint8_t data[12];  // 6 bytes for gyro + 6 for accel

    // Read gyro: OUTX_L_G (0x22) to OUTZ_H_G (0x27)
    HAL_I2C_Mem_Read(hi2c, LSM6DSO32_ADDR, OUTX_L_G, 1, &data[0], 6, HAL_MAX_DELAY);
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	9302      	str	r3, [sp, #8]
 80008a2:	2306      	movs	r3, #6
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	2222      	movs	r2, #34	@ 0x22
 80008b0:	21d4      	movs	r1, #212	@ 0xd4
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f002 feb4 	bl	8003620 <HAL_I2C_Mem_Read>

    // Read accel: OUTX_L_XL (0x28) to OUTZ_H_XL (0x2D)
    HAL_I2C_Mem_Read(hi2c, LSM6DSO32_ADDR, OUTX_L_XL, 1, &data[6], 6, HAL_MAX_DELAY);
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	9302      	str	r3, [sp, #8]
 80008be:	2306      	movs	r3, #6
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	3306      	adds	r3, #6
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	2228      	movs	r2, #40	@ 0x28
 80008ce:	21d4      	movs	r1, #212	@ 0xd4
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f002 fea5 	bl	8003620 <HAL_I2C_Mem_Read>

    // Gyro
    gyro[0] = (int16_t)(data[1] << 8 | data[0]);  // X
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7d3b      	ldrb	r3, [r7, #20]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	801a      	strh	r2, [r3, #0]
    gyro[1] = (int16_t)(data[3] << 8 | data[2]);  // Y
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b219      	sxth	r1, r3
 80008f2:	7dbb      	ldrb	r3, [r7, #22]
 80008f4:	b21a      	sxth	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3302      	adds	r3, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	b212      	sxth	r2, r2
 80008fe:	801a      	strh	r2, [r3, #0]
    gyro[2] = (int16_t)(data[5] << 8 | data[4]);  // Z
 8000900:	7e7b      	ldrb	r3, [r7, #25]
 8000902:	b21b      	sxth	r3, r3
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b219      	sxth	r1, r3
 8000908:	7e3b      	ldrb	r3, [r7, #24]
 800090a:	b21a      	sxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3304      	adds	r3, #4
 8000910:	430a      	orrs	r2, r1
 8000912:	b212      	sxth	r2, r2
 8000914:	801a      	strh	r2, [r3, #0]

    // Accel
    accel[0] = (int16_t)(data[7] << 8 | data[6]);   // X
 8000916:	7efb      	ldrb	r3, [r7, #27]
 8000918:	b21b      	sxth	r3, r3
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7ebb      	ldrb	r3, [r7, #26]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	801a      	strh	r2, [r3, #0]
    accel[1] = (int16_t)(data[9] << 8 | data[8]);   // Y
 800092a:	7f7b      	ldrb	r3, [r7, #29]
 800092c:	b21b      	sxth	r3, r3
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b219      	sxth	r1, r3
 8000932:	7f3b      	ldrb	r3, [r7, #28]
 8000934:	b21a      	sxth	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3302      	adds	r3, #2
 800093a:	430a      	orrs	r2, r1
 800093c:	b212      	sxth	r2, r2
 800093e:	801a      	strh	r2, [r3, #0]
    accel[2] = (int16_t)(data[11] << 8 | data[10]); // Z
 8000940:	7ffb      	ldrb	r3, [r7, #31]
 8000942:	b21b      	sxth	r3, r3
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b219      	sxth	r1, r3
 8000948:	7fbb      	ldrb	r3, [r7, #30]
 800094a:	b21a      	sxth	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3304      	adds	r3, #4
 8000950:	430a      	orrs	r2, r1
 8000952:	b212      	sxth	r2, r2
 8000954:	801a      	strh	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <LSM6DSO32_Init>:
//------------------------------------------------------------------------

void LSM6DSO32_Init(I2C_HandleTypeDef *hi2c)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af04      	add	r7, sp, #16
 8000966:	6078      	str	r0, [r7, #4]
    uint8_t ctrl1_xl = 0x60;  // ODR = 416 Hz, ±2g
 8000968:	2360      	movs	r3, #96	@ 0x60
 800096a:	73fb      	strb	r3, [r7, #15]
    uint8_t ctrl2_g  = 0x60;  // ODR = 416 Hz, ±250 dps
 800096c:	2360      	movs	r3, #96	@ 0x60
 800096e:	73bb      	strb	r3, [r7, #14]
    uint8_t check = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSO32_ADDR, 0x10, 1, &check, 1, HAL_MAX_DELAY);
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	2301      	movs	r3, #1
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	f107 030d 	add.w	r3, r7, #13
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2301      	movs	r3, #1
 8000986:	2210      	movs	r2, #16
 8000988:	21d4      	movs	r1, #212	@ 0xd4
 800098a:	4814      	ldr	r0, [pc, #80]	@ (80009dc <LSM6DSO32_Init+0x7c>)
 800098c:	f002 fe48 	bl	8003620 <HAL_I2C_Mem_Read>
    printf("CTRL1_XL = 0x%02X\r\n", check);  // should be 0x60
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	4619      	mov	r1, r3
 8000994:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <LSM6DSO32_Init+0x80>)
 8000996:	f009 ff6f 	bl	800a878 <iprintf>
    HAL_I2C_Mem_Write(hi2c, LSM6DSO32_ADDR, CTRL1_XL, 1, &ctrl1_xl, 1, HAL_MAX_DELAY);
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	f107 030f 	add.w	r3, r7, #15
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	2210      	movs	r2, #16
 80009ae:	21d4      	movs	r1, #212	@ 0xd4
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f002 fd21 	bl	80033f8 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, LSM6DSO32_ADDR, CTRL2_G,  1, &ctrl2_g,  1, HAL_MAX_DELAY);
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2301      	movs	r3, #1
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	f107 030e 	add.w	r3, r7, #14
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2301      	movs	r3, #1
 80009c8:	2211      	movs	r2, #17
 80009ca:	21d4      	movs	r1, #212	@ 0xd4
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f002 fd13 	bl	80033f8 <HAL_I2C_Mem_Write>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200008e4 	.word	0x200008e4
 80009e0:	0800cbb8 	.word	0x0800cbb8

080009e4 <__io_putchar>:

PCD_HandleTypeDef hpcd_USB_OTG_FS;

osThreadId defaultTaskHandle;
/* USER CODE BEGIN PV */
int __io_putchar(int ch) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009ec:	1d39      	adds	r1, r7, #4
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	2201      	movs	r2, #1
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <__io_putchar+0x20>)
 80009f6:	f006 f837 	bl	8006a68 <HAL_UART_Transmit>
    return ch;
 80009fa:	687b      	ldr	r3, [r7, #4]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000ac4 	.word	0x20000ac4

08000a08 <scan_i2c_bus>:
/* USER CODE BEGIN PFP */
void LoggingTask(void *params);  //  tell compiler this function exists
void SensorTask(void *params);
void UartTask(void *params);
void scan_i2c_bus(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b092      	sub	sp, #72	@ 0x48
 8000a0c:	af00      	add	r7, sp, #0
    char msg[64];
    uint8_t i2c_address = 0x68 << 1; // STM32 HAL uses 8-bit address
 8000a0e:	23d0      	movs	r3, #208	@ 0xd0
 8000a10:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    ret = HAL_I2C_IsDeviceReady(&hi2c1, i2c_address, 3, 100);
 8000a14:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	2364      	movs	r3, #100	@ 0x64
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	4833      	ldr	r0, [pc, #204]	@ (8000aec <scan_i2c_bus+0xe4>)
 8000a20:	f002 ff18 	bl	8003854 <HAL_I2C_IsDeviceReady>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <scan_i2c_bus+0xe8>)
 8000a2a:	701a      	strb	r2, [r3, #0]
    if (ret == HAL_OK) {
 8000a2c:	4b30      	ldr	r3, [pc, #192]	@ (8000af0 <scan_i2c_bus+0xe8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d111      	bne.n	8000a58 <scan_i2c_bus+0x50>
    	sprintf(msg, "fond it");
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	492f      	ldr	r1, [pc, #188]	@ (8000af4 <scan_i2c_bus+0xec>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f009 ff8d 	bl	800a958 <siprintf>
    	            HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fc4d 	bl	80002e0 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	1d39      	adds	r1, r7, #4
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	4829      	ldr	r0, [pc, #164]	@ (8000af8 <scan_i2c_bus+0xf0>)
 8000a52:	f006 f809 	bl	8006a68 <HAL_UART_Transmit>
 8000a56:	e010      	b.n	8000a7a <scan_i2c_bus+0x72>
    } else {
    	sprintf(msg, "not fond it");
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4928      	ldr	r1, [pc, #160]	@ (8000afc <scan_i2c_bus+0xf4>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f009 ff7b 	bl	800a958 <siprintf>
    	    	            HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);   // Device not responding
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fc3b 	bl	80002e0 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	1d39      	adds	r1, r7, #4
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	4820      	ldr	r0, [pc, #128]	@ (8000af8 <scan_i2c_bus+0xf0>)
 8000a76:	f005 fff7 	bl	8006a68 <HAL_UART_Transmit>
    }
    for (uint8_t addr = 1; addr < 127; addr++)
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000a80:	e024      	b.n	8000acc <scan_i2c_bus+0xc4>
    {
        // 7-bit address shifted left by 1 for HAL
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 3, 10) == HAL_OK)
 8000a82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	2203      	movs	r2, #3
 8000a90:	4816      	ldr	r0, [pc, #88]	@ (8000aec <scan_i2c_bus+0xe4>)
 8000a92:	f002 fedf 	bl	8003854 <HAL_I2C_IsDeviceReady>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d112      	bne.n	8000ac2 <scan_i2c_bus+0xba>
        {
            sprintf(msg, "I2C device found at address 0x%02X\r\n", addr);
 8000a9c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4917      	ldr	r1, [pc, #92]	@ (8000b00 <scan_i2c_bus+0xf8>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f009 ff57 	bl	800a958 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fc17 	bl	80002e0 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	1d39      	adds	r1, r7, #4
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <scan_i2c_bus+0xf0>)
 8000abe:	f005 ffd3 	bl	8006a68 <HAL_UART_Transmit>
    for (uint8_t addr = 1; addr < 127; addr++)
 8000ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000acc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ad0:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ad2:	d9d6      	bls.n	8000a82 <scan_i2c_bus+0x7a>
        }
    }
    HAL_UART_Transmit(&huart3, (uint8_t *)"Scan complete.\r\n", 16, HAL_MAX_DELAY);
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	2210      	movs	r2, #16
 8000ada:	490a      	ldr	r1, [pc, #40]	@ (8000b04 <scan_i2c_bus+0xfc>)
 8000adc:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <scan_i2c_bus+0xf0>)
 8000ade:	f005 ffc3 	bl	8006a68 <HAL_UART_Transmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	3748      	adds	r7, #72	@ 0x48
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200008e4 	.word	0x200008e4
 8000af0:	200007f8 	.word	0x200007f8
 8000af4:	0800cbcc 	.word	0x0800cbcc
 8000af8:	20000ac4 	.word	0x20000ac4
 8000afc:	0800cbd4 	.word	0x0800cbd4
 8000b00:	0800cbe0 	.word	0x0800cbe0
 8000b04:	0800cc08 	.word	0x0800cc08

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b5b0      	push	{r4, r5, r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f001 fb68 	bl	80021e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f891 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f000 fae9 	bl	80010ec <MX_GPIO_Init>
  MX_ETH_Init();
 8000b1a:	f000 f8ff 	bl	8000d1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b1e:	f000 fa87 	bl	8001030 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b22:	f000 fab5 	bl	8001090 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000b26:	f000 f947 	bl	8000db8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b2a:	f000 f985 	bl	8000e38 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000b2e:	f000 f9c3 	bl	8000eb8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000b32:	f000 f9ff 	bl	8000f34 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b36:	f000 fa4b 	bl	8000fd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SD_DetectCard();
 8000b3a:	f000 fc93 	bl	8001464 <SD_DetectCard>
  HAL_Delay(10);
 8000b3e:	200a      	movs	r0, #10
 8000b40:	f001 fb7c 	bl	800223c <HAL_Delay>
  SD_Init();
 8000b44:	f000 fcf8 	bl	8001538 <SD_Init>
  HAL_Delay(10);
 8000b48:	200a      	movs	r0, #10
 8000b4a:	f001 fb77 	bl	800223c <HAL_Delay>
  scan_i2c_bus();
 8000b4e:	f7ff ff5b 	bl	8000a08 <scan_i2c_bus>
  ADXL375_Init(&hi2c1);
 8000b52:	482a      	ldr	r0, [pc, #168]	@ (8000bfc <main+0xf4>)
 8000b54:	f7ff fe22 	bl	800079c <ADXL375_Init>
  LSM6DSO32_Init(&hi2c1);
 8000b58:	4828      	ldr	r0, [pc, #160]	@ (8000bfc <main+0xf4>)
 8000b5a:	f7ff ff01 	bl	8000960 <LSM6DSO32_Init>
  if (GY63_Init(&hgy63,&hi2c1) == HAL_OK) {
 8000b5e:	4927      	ldr	r1, [pc, #156]	@ (8000bfc <main+0xf4>)
 8000b60:	4827      	ldr	r0, [pc, #156]	@ (8000c00 <main+0xf8>)
 8000b62:	f7ff fd78 	bl	8000656 <GY63_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d103      	bne.n	8000b74 <main+0x6c>
         printf("GY-63 init OK\r\n");
 8000b6c:	4825      	ldr	r0, [pc, #148]	@ (8000c04 <main+0xfc>)
 8000b6e:	f009 feeb 	bl	800a948 <puts>
 8000b72:	e002      	b.n	8000b7a <main+0x72>
     } else {
         printf("GY-63 init FAILED\r\n");
 8000b74:	4824      	ldr	r0, [pc, #144]	@ (8000c08 <main+0x100>)
 8000b76:	f009 fee7 	bl	800a948 <puts>


 // printf("Loop running...\r\n");


 sensorQueue = xQueueCreate(10, sizeof(SensorSample_t));
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	211a      	movs	r1, #26
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f007 f912 	bl	8007da8 <xQueueGenericCreate>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <main+0x104>)
 8000b88:	6013      	str	r3, [r2, #0]
 uartQueue = xQueueCreate(10, sizeof(SensorSample_t));
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	211a      	movs	r1, #26
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f007 f90a 	bl	8007da8 <xQueueGenericCreate>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a1e      	ldr	r2, [pc, #120]	@ (8000c10 <main+0x108>)
 8000b98:	6013      	str	r3, [r2, #0]
    xTaskCreate(SensorTask, "Sensor", 512, NULL, 2, &sensorTaskHandle);
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <main+0x10c>)
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba8:	491b      	ldr	r1, [pc, #108]	@ (8000c18 <main+0x110>)
 8000baa:	481c      	ldr	r0, [pc, #112]	@ (8000c1c <main+0x114>)
 8000bac:	f007 fcc6 	bl	800853c <xTaskCreate>
   // xTaskCreate(LoggingTask, "Logger", 512, NULL, 1, NULL);
    xTaskCreate(UartTask, "UartTask", 256, NULL, 1, &UartTaskHandle);
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <main+0x118>)
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bbe:	4919      	ldr	r1, [pc, #100]	@ (8000c24 <main+0x11c>)
 8000bc0:	4819      	ldr	r0, [pc, #100]	@ (8000c28 <main+0x120>)
 8000bc2:	f007 fcbb 	bl	800853c <xTaskCreate>
    HAL_TIM_Base_Start_IT(&htim3);
 8000bc6:	4819      	ldr	r0, [pc, #100]	@ (8000c2c <main+0x124>)
 8000bc8:	f005 faa2 	bl	8006110 <HAL_TIM_Base_Start_IT>

    vTaskStartScheduler();
 8000bcc:	f007 fe40 	bl	8008850 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <main+0x128>)
 8000bd2:	1d3c      	adds	r4, r7, #4
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f006 ff5d 	bl	8007aa6 <osThreadCreate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a11      	ldr	r2, [pc, #68]	@ (8000c34 <main+0x12c>)
 8000bf0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bf2:	f006 ff51 	bl	8007a98 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000bf6:	bf00      	nop
 8000bf8:	e7fd      	b.n	8000bf6 <main+0xee>
 8000bfa:	bf00      	nop
 8000bfc:	200008e4 	.word	0x200008e4
 8000c00:	200007e4 	.word	0x200007e4
 8000c04:	0800cc1c 	.word	0x0800cc1c
 8000c08:	0800cc2c 	.word	0x0800cc2c
 8000c0c:	200007d4 	.word	0x200007d4
 8000c10:	200007d8 	.word	0x200007d8
 8000c14:	200007dc 	.word	0x200007dc
 8000c18:	0800cc40 	.word	0x0800cc40
 8000c1c:	080012b5 	.word	0x080012b5
 8000c20:	200007e0 	.word	0x200007e0
 8000c24:	0800cc48 	.word	0x0800cc48
 8000c28:	08001271 	.word	0x08001271
 8000c2c:	200009f0 	.word	0x200009f0
 8000c30:	0800cc60 	.word	0x0800cc60
 8000c34:	2000102c 	.word	0x2000102c

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	@ 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2234      	movs	r2, #52	@ 0x34
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f009 ff80 	bl	800ab4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c5c:	f003 fc20 	bl	80044a0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	4b2c      	ldr	r3, [pc, #176]	@ (8000d14 <SystemClock_Config+0xdc>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	4a2b      	ldr	r2, [pc, #172]	@ (8000d14 <SystemClock_Config+0xdc>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6c:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <SystemClock_Config+0xdc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c78:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <SystemClock_Config+0xe0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c80:	4a25      	ldr	r2, [pc, #148]	@ (8000d18 <SystemClock_Config+0xe0>)
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <SystemClock_Config+0xe0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c98:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000cac:	2360      	movs	r3, #96	@ 0x60
 8000cae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fc4d 	bl	8004560 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ccc:	f000 fb96 	bl	80013fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cd0:	f003 fbf6 	bl	80044c0 <HAL_PWREx_EnableOverDrive>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cda:	f000 fb8f 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	2103      	movs	r1, #3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f003 fede 	bl	8004abc <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d06:	f000 fb79 	bl	80013fc <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3750      	adds	r7, #80	@ 0x50
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_ETH_Init+0x84>)
 8000d22:	4a20      	ldr	r2, [pc, #128]	@ (8000da4 <MX_ETH_Init+0x88>)
 8000d24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <MX_ETH_Init+0x8c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <MX_ETH_Init+0x8c>)
 8000d2e:	2280      	movs	r2, #128	@ 0x80
 8000d30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <MX_ETH_Init+0x8c>)
 8000d34:	22e1      	movs	r2, #225	@ 0xe1
 8000d36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <MX_ETH_Init+0x8c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <MX_ETH_Init+0x8c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d44:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <MX_ETH_Init+0x8c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_ETH_Init+0x84>)
 8000d4c:	4a16      	ldr	r2, [pc, #88]	@ (8000da8 <MX_ETH_Init+0x8c>)
 8000d4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_ETH_Init+0x84>)
 8000d52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d56:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_ETH_Init+0x84>)
 8000d5a:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <MX_ETH_Init+0x90>)
 8000d5c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_ETH_Init+0x84>)
 8000d60:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <MX_ETH_Init+0x94>)
 8000d62:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_ETH_Init+0x84>)
 8000d66:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000d6a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <MX_ETH_Init+0x84>)
 8000d6e:	f001 fb6b 	bl	8002448 <HAL_ETH_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d78:	f000 fb40 	bl	80013fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d7c:	2238      	movs	r2, #56	@ 0x38
 8000d7e:	2100      	movs	r1, #0
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <MX_ETH_Init+0x98>)
 8000d82:	f009 fee3 	bl	800ab4c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_ETH_Init+0x98>)
 8000d88:	2221      	movs	r2, #33	@ 0x21
 8000d8a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_ETH_Init+0x98>)
 8000d8e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000d92:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <MX_ETH_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000834 	.word	0x20000834
 8000da4:	40028000 	.word	0x40028000
 8000da8:	20001030 	.word	0x20001030
 8000dac:	20000278 	.word	0x20000278
 8000db0:	200001d8 	.word	0x200001d8
 8000db4:	200007fc 	.word	0x200007fc

08000db8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000e30 <MX_I2C1_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e34 <MX_I2C1_Init+0x7c>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dda:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df2:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000df4:	f002 f856 	bl	8002ea4 <HAL_I2C_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dfe:	f000 fafd 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000e06:	f003 f979 	bl	80040fc <HAL_I2CEx_ConfigAnalogFilter>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e10:	f000 faf4 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000e18:	f003 f9bb 	bl	8004192 <HAL_I2CEx_ConfigDigitalFilter>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f000 faeb 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200008e4 	.word	0x200008e4
 8000e30:	40005400 	.word	0x40005400
 8000e34:	20303e5d 	.word	0x20303e5d

08000e38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb0 <MX_I2C2_Init+0x78>)
 8000e40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e44:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <MX_I2C2_Init+0x7c>)
 8000e46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e72:	480e      	ldr	r0, [pc, #56]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e74:	f002 f816 	bl	8002ea4 <HAL_I2C_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e7e:	f000 fabd 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e82:	2100      	movs	r1, #0
 8000e84:	4809      	ldr	r0, [pc, #36]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e86:	f003 f939 	bl	80040fc <HAL_I2CEx_ConfigAnalogFilter>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e90:	f000 fab4 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e98:	f003 f97b 	bl	8004192 <HAL_I2CEx_ConfigDigitalFilter>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ea2:	f000 faab 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000938 	.word	0x20000938
 8000eb0:	40005800 	.word	0x40005800
 8000eb4:	20303e5d 	.word	0x20303e5d

08000eb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8000f30 <MX_SPI1_Init+0x78>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000ec4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000ed2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ed6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000eee:	2238      	movs	r2, #56	@ 0x38
 8000ef0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_SPI1_Init+0x74>)
 8000f18:	f004 fc50 	bl	80057bc <HAL_SPI_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 fa6b 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000098c 	.word	0x2000098c
 8000f30:	40013000 	.word	0x40013000

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f54:	4a1d      	ldr	r2, [pc, #116]	@ (8000fcc <MX_TIM3_Init+0x98>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8599;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f5a:	f242 1297 	movw	r2, #8599	@ 0x2197
 8000f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f68:	2263      	movs	r2, #99	@ 0x63
 8000f6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f78:	4813      	ldr	r0, [pc, #76]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f7a:	f005 f871 	bl	8006060 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f84:	f000 fa3a 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000f96:	f005 fa3b 	bl	8006410 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000fa0:	f000 fa2c 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_TIM3_Init+0x94>)
 8000fb2:	f005 fc5f 	bl	8006874 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f000 fa1e 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200009f0 	.word	0x200009f0
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8000fd6:	4a15      	ldr	r2, [pc, #84]	@ (800102c <MX_USART2_UART_Init+0x5c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_USART2_UART_Init+0x58>)
 8001014:	f005 fcda 	bl	80069cc <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800101e:	f000 f9ed 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000a3c 	.word	0x20000a3c
 800102c:	40004400 	.word	0x40004400

08001030 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	@ (800108c <MX_USART3_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_USART3_UART_Init+0x58>)
 8001074:	f005 fcaa 	bl	80069cc <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 f9bd 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000ac4 	.word	0x20000ac4
 800108c:	40004800 	.word	0x40004800

08001090 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001096:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800109a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109e:	2206      	movs	r2, #6
 80010a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d4:	f003 f8a9 	bl	800422a <HAL_PCD_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010de:	f000 f98d 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000b4c 	.word	0x20000b4c

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b56      	ldr	r3, [pc, #344]	@ (800125c <MX_GPIO_Init+0x170>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a55      	ldr	r2, [pc, #340]	@ (800125c <MX_GPIO_Init+0x170>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b53      	ldr	r3, [pc, #332]	@ (800125c <MX_GPIO_Init+0x170>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	4b50      	ldr	r3, [pc, #320]	@ (800125c <MX_GPIO_Init+0x170>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a4f      	ldr	r2, [pc, #316]	@ (800125c <MX_GPIO_Init+0x170>)
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b4d      	ldr	r3, [pc, #308]	@ (800125c <MX_GPIO_Init+0x170>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	4b4a      	ldr	r3, [pc, #296]	@ (800125c <MX_GPIO_Init+0x170>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a49      	ldr	r2, [pc, #292]	@ (800125c <MX_GPIO_Init+0x170>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b47      	ldr	r3, [pc, #284]	@ (800125c <MX_GPIO_Init+0x170>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b44      	ldr	r3, [pc, #272]	@ (800125c <MX_GPIO_Init+0x170>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a43      	ldr	r2, [pc, #268]	@ (800125c <MX_GPIO_Init+0x170>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b41      	ldr	r3, [pc, #260]	@ (800125c <MX_GPIO_Init+0x170>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b3e      	ldr	r3, [pc, #248]	@ (800125c <MX_GPIO_Init+0x170>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a3d      	ldr	r2, [pc, #244]	@ (800125c <MX_GPIO_Init+0x170>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <MX_GPIO_Init+0x170>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4b38      	ldr	r3, [pc, #224]	@ (800125c <MX_GPIO_Init+0x170>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a37      	ldr	r2, [pc, #220]	@ (800125c <MX_GPIO_Init+0x170>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b35      	ldr	r3, [pc, #212]	@ (800125c <MX_GPIO_Init+0x170>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001192:	4b32      	ldr	r3, [pc, #200]	@ (800125c <MX_GPIO_Init+0x170>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a31      	ldr	r2, [pc, #196]	@ (800125c <MX_GPIO_Init+0x170>)
 8001198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b2f      	ldr	r3, [pc, #188]	@ (800125c <MX_GPIO_Init+0x170>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011b0:	482b      	ldr	r0, [pc, #172]	@ (8001260 <MX_GPIO_Init+0x174>)
 80011b2:	f001 fe43 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2140      	movs	r1, #64	@ 0x40
 80011ba:	482a      	ldr	r0, [pc, #168]	@ (8001264 <MX_GPIO_Init+0x178>)
 80011bc:	f001 fe3e 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2140      	movs	r1, #64	@ 0x40
 80011c4:	4828      	ldr	r0, [pc, #160]	@ (8001268 <MX_GPIO_Init+0x17c>)
 80011c6:	f001 fe39 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4822      	ldr	r0, [pc, #136]	@ (800126c <MX_GPIO_Init+0x180>)
 80011e2:	f001 fc7f 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011e6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4818      	ldr	r0, [pc, #96]	@ (8001260 <MX_GPIO_Init+0x174>)
 8001200:	f001 fc70 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	4812      	ldr	r0, [pc, #72]	@ (8001264 <MX_GPIO_Init+0x178>)
 800121c:	f001 fc62 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	@ (8001264 <MX_GPIO_Init+0x178>)
 8001234:	f001 fc56 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001238:	2340      	movs	r3, #64	@ 0x40
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	@ (8001268 <MX_GPIO_Init+0x17c>)
 8001250:	f001 fc48 	bl	8002ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	@ 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40020400 	.word	0x40020400
 8001264:	40021800 	.word	0x40021800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40020800 	.word	0x40020800

08001270 <UartTask>:
        	            index += sizeof(SensorSample_t);
        }
    }
}
void UartTask(void *params)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	 SensorSample_t sample;
	 //static uint8_t Counter = 1;
	    for (;;)
	    {
	        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for 10 Hz notification
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	2001      	movs	r0, #1
 800127e:	f007 ffc5 	bl	800920c <ulTaskNotifyTake>


	      //  printf("%d",sizeof(sample));
	        if (xQueueReceive(uartQueue, &sample, 0) == pdPASS) {
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <UartTask+0x3c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f107 010c 	add.w	r1, r7, #12
 800128a:	2200      	movs	r2, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f006 fef7 	bl	8008080 <xQueueReceive>
 8001292:	4603      	mov	r3, r0
 8001294:	2b01      	cmp	r3, #1
 8001296:	d1ef      	bne.n	8001278 <UartTask+0x8>
	            HAL_UART_Transmit(&huart2, (uint8_t*)&sample, sizeof(sample), HAL_MAX_DELAY);
 8001298:	f107 010c 	add.w	r1, r7, #12
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	221a      	movs	r2, #26
 80012a2:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <UartTask+0x40>)
 80012a4:	f005 fbe0 	bl	8006a68 <HAL_UART_Transmit>
	        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait for 10 Hz notification
 80012a8:	e7e6      	b.n	8001278 <UartTask+0x8>
 80012aa:	bf00      	nop
 80012ac:	200007d8 	.word	0x200007d8
 80012b0:	20000a3c 	.word	0x20000a3c

080012b4 <SensorTask>:
	        }
	    }

}
void SensorTask(void *params)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	SensorSample_t sample;
	static uint8_t uartCounter = 0;
	float pressure, temperature;
    for (;;) {
        // Wait for 100Hz timer interrupt
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	2001      	movs	r0, #1
 80012c2:	f007 ffa3 	bl	800920c <ulTaskNotifyTake>

    	ADXL375_ReadAccel(&hi2c1, sample.adxl);
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	481e      	ldr	r0, [pc, #120]	@ (8001348 <SensorTask+0x94>)
 80012ce:	f7ff fa8e 	bl	80007ee <ADXL375_ReadAccel>
        LSM6DSO32_ReadAccelGyro(&hi2c1, sample.lsm_accel, sample.lsm_gyro);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	f103 020c 	add.w	r2, r3, #12
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	3306      	adds	r3, #6
 80012e0:	4619      	mov	r1, r3
 80012e2:	4819      	ldr	r0, [pc, #100]	@ (8001348 <SensorTask+0x94>)
 80012e4:	f7ff fad4 	bl	8000890 <LSM6DSO32_ReadAccelGyro>
        GY63_Read(&hi2c1, &sample.Baro_P, &sample.Baro_T); //Baro
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	f103 0216 	add.w	r2, r3, #22
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	3312      	adds	r3, #18
 80012f6:	4619      	mov	r1, r3
 80012f8:	4813      	ldr	r0, [pc, #76]	@ (8001348 <SensorTask+0x94>)
 80012fa:	f7ff fa0c 	bl	8000716 <GY63_Read>
        	//printf("Timestamp: %u\n", sample.timestamp);
            //printf("ADXL:X=%d, Y=%d, Z=%d\r\n", sample.adxl[0], sample.adxl[1], sample.adxl[2]);
            //  printf("LSM Acc: X=%d, Y=%d, Z=%d\r\n", sample.lsm_accel[0], sample.lsm_accel[1], sample.lsm_accel[2]);
            //  printf("LSM Gyro:X=%d, Y=%d, Z=%d\r\n", sample.lsm_gyro[0], sample.lsm_gyro[1], sample.lsm_gyro[2]);
        	//printf("%d",sizeof(sample));
        xQueueSend(sensorQueue, &sample, 0);
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <SensorTask+0x98>)
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	f107 010c 	add.w	r1, r7, #12
 8001306:	2300      	movs	r3, #0
 8001308:	2200      	movs	r2, #0
 800130a:	f006 fdaf 	bl	8007e6c <xQueueGenericSend>
         if (++uartCounter >= 10)
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <SensorTask+0x9c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <SensorTask+0x9c>)
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <SensorTask+0x9c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b09      	cmp	r3, #9
 8001320:	d9cc      	bls.n	80012bc <SensorTask+0x8>
               {
        	 	   xQueueSend(uartQueue, &sample, 0);
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <SensorTask+0xa0>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f107 010c 	add.w	r1, r7, #12
 800132a:	2300      	movs	r3, #0
 800132c:	2200      	movs	r2, #0
 800132e:	f006 fd9d 	bl	8007e6c <xQueueGenericSend>
                   uartCounter = 0;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <SensorTask+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

                   xTaskNotifyGive(UartTaskHandle);  // wake UART task
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <SensorTask+0xa4>)
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	2300      	movs	r3, #0
 800133e:	2202      	movs	r2, #2
 8001340:	2100      	movs	r1, #0
 8001342:	f007 ffaf 	bl	80092a4 <xTaskGenericNotify>
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001346:	e7b9      	b.n	80012bc <SensorTask+0x8>
 8001348:	200008e4 	.word	0x200008e4
 800134c:	200007d4 	.word	0x200007d4
 8001350:	20001036 	.word	0x20001036
 8001354:	200007d8 	.word	0x200007d8
 8001358:	200007e0 	.word	0x200007e0

0800135c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f006 fbea 	bl	8007b3e <osDelay>
 800136a:	e7fb      	b.n	8001364 <StartDefaultTask+0x8>

0800136c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1a      	ldr	r2, [pc, #104]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d102      	bne.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    HAL_IncTick();
 800137e:	f000 ff3d 	bl	80021fc <HAL_IncTick>
          BaseType_t xHigherPriorityTaskWoken = pdFALSE;
          vTaskNotifyGiveFromISR(sensorTaskHandle, &xHigherPriorityTaskWoken);
          portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
      }
  /* USER CODE END Callback 1 */
}
 8001382:	e02a      	b.n	80013da <HAL_TIM_PeriodElapsedCallback+0x6e>
  else if (htim->Instance == TIM3)  // your 100 Hz timer
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d125      	bne.n	80013da <HAL_TIM_PeriodElapsedCallback+0x6e>
	  count++;
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001398:	701a      	strb	r2, [r3, #0]
	  if (count >= 10) {
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b09      	cmp	r3, #9
 80013a0:	d906      	bls.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x44>
	      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80013a2:	2101      	movs	r1, #1
 80013a4:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80013a6:	f001 fd62 	bl	8002e6e <HAL_GPIO_TogglePin>
	      count = 0;
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
          BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
          vTaskNotifyGiveFromISR(sensorTaskHandle, &xHigherPriorityTaskWoken);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f107 020c 	add.w	r2, r7, #12
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f008 f838 	bl	8009434 <vTaskNotifyGiveFromISR>
          portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_TIM_PeriodElapsedCallback+0x6e>
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f3bf 8f4f 	dsb	sy
 80013d6:	f3bf 8f6f 	isb	sy
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40001000 	.word	0x40001000
 80013e8:	40000400 	.word	0x40000400
 80013ec:	20001037 	.word	0x20001037
 80013f0:	40020400 	.word	0x40020400
 80013f4:	200007dc 	.word	0x200007dc
 80013f8:	e000ed04 	.word	0xe000ed04

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <SD_Select>:
#define CMD55   (0x40 | 55)
#define ACMD41  (0x40 | 41)
#define CMD58   (0x40 | 58)

//===============================Necessary function for CS and Transmit/receive Data========================================================================================================
void SD_Select(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2140      	movs	r1, #64	@ 0x40
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <SD_Select+0x14>)
 8001412:	f001 fd13 	bl	8002e3c <HAL_GPIO_WritePin>
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40020c00 	.word	0x40020c00

08001420 <SD_Deselect>:

void SD_Deselect(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2140      	movs	r1, #64	@ 0x40
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <SD_Deselect+0x14>)
 800142a:	f001 fd07 	bl	8002e3c <HAL_GPIO_WritePin>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40020c00 	.word	0x40020c00

08001438 <SD_SPI_TxRx>:

uint8_t SD_SPI_TxRx(uint8_t data) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af02      	add	r7, sp, #8
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
    uint8_t rx;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, HAL_MAX_DELAY);
 8001442:	f107 020f 	add.w	r2, r7, #15
 8001446:	1df9      	adds	r1, r7, #7
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	4803      	ldr	r0, [pc, #12]	@ (8001460 <SD_SPI_TxRx+0x28>)
 8001452:	f004 fa5e 	bl	8005912 <HAL_SPI_TransmitReceive>
    return rx;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000098c 	.word	0x2000098c

08001464 <SD_DetectCard>:
//------------------------------Detecting SD card with cmd--------------------------------------------------------------------
bool SD_DetectCard(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
    // 1. Send 80 dummy clocks with CS high
    SD_Select();
 800146a:	f7ff ffcd 	bl	8001408 <SD_Select>
    for (int i = 0; i < 10; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e005      	b.n	8001480 <SD_DetectCard+0x1c>
        SD_SPI_TxRx(0xFF);  // Send dummy bytes
 8001474:	20ff      	movs	r0, #255	@ 0xff
 8001476:	f7ff ffdf 	bl	8001438 <SD_SPI_TxRx>
    for (int i = 0; i < 10; i++) {
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b09      	cmp	r3, #9
 8001484:	ddf6      	ble.n	8001474 <SD_DetectCard+0x10>
    }

    // 2. Send CMD0 (GO_IDLE_STATE)
    SD_Select();
 8001486:	f7ff ffbf 	bl	8001408 <SD_Select>

    SD_SPI_TxRx(0x40 | 0);     // CMD0
 800148a:	2040      	movs	r0, #64	@ 0x40
 800148c:	f7ff ffd4 	bl	8001438 <SD_SPI_TxRx>
    SD_SPI_TxRx(0x00);         // Arg[31:24]
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ffd1 	bl	8001438 <SD_SPI_TxRx>
    SD_SPI_TxRx(0x00);         // Arg[23:16]
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff ffce 	bl	8001438 <SD_SPI_TxRx>
    SD_SPI_TxRx(0x00);         // Arg[15:8]
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff ffcb 	bl	8001438 <SD_SPI_TxRx>
    SD_SPI_TxRx(0x00);         // Arg[7:0]
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff ffc8 	bl	8001438 <SD_SPI_TxRx>
    SD_SPI_TxRx(0x95);         // Valid CRC for CMD0
 80014a8:	2095      	movs	r0, #149	@ 0x95
 80014aa:	f7ff ffc5 	bl	8001438 <SD_SPI_TxRx>

    // 3. Wait for response (R1 = 0x01 = IDLE)
    uint8_t response = 0xFF;
 80014ae:	23ff      	movs	r3, #255	@ 0xff
 80014b0:	74fb      	strb	r3, [r7, #19]
    for (int i = 0; i < 8; i++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e00a      	b.n	80014ce <SD_DetectCard+0x6a>
        response = SD_SPI_TxRx(0xFF);
 80014b8:	20ff      	movs	r0, #255	@ 0xff
 80014ba:	f7ff ffbd 	bl	8001438 <SD_SPI_TxRx>
 80014be:	4603      	mov	r3, r0
 80014c0:	74fb      	strb	r3, [r7, #19]
        if (response == 0x01) break;
 80014c2:	7cfb      	ldrb	r3, [r7, #19]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d006      	beq.n	80014d6 <SD_DetectCard+0x72>
    for (int i = 0; i < 8; i++) {
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	ddf1      	ble.n	80014b8 <SD_DetectCard+0x54>
 80014d4:	e000      	b.n	80014d8 <SD_DetectCard+0x74>
        if (response == 0x01) break;
 80014d6:	bf00      	nop
    }

    SD_Deselect();
 80014d8:	f7ff ffa2 	bl	8001420 <SD_Deselect>
    SD_SPI_TxRx(0xFF); // Final 8 clocks
 80014dc:	20ff      	movs	r0, #255	@ 0xff
 80014de:	f7ff ffab 	bl	8001438 <SD_SPI_TxRx>

    // 4. Send result over USART2
    if (response == 0x01) {
 80014e2:	7cfb      	ldrb	r3, [r7, #19]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d10e      	bne.n	8001506 <SD_DetectCard+0xa2>
        const char *msg = "SD card detected and responded to CMD0.\r\n";
 80014e8:	4b10      	ldr	r3, [pc, #64]	@ (800152c <SD_DetectCard+0xc8>)
 80014ea:	607b      	str	r3, [r7, #4]
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7fe fef7 	bl	80002e0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <SD_DetectCard+0xcc>)
 80014fe:	f005 fab3 	bl	8006a68 <HAL_UART_Transmit>
        return true;
 8001502:	2301      	movs	r3, #1
 8001504:	e00d      	b.n	8001522 <SD_DetectCard+0xbe>
    } else {
        const char *msg = "No SD card or no CMD0 response.\r\n";
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <SD_DetectCard+0xd0>)
 8001508:	60bb      	str	r3, [r7, #8]
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <SD_DetectCard+0xcc>)
 800151c:	f005 faa4 	bl	8006a68 <HAL_UART_Transmit>
        return false;
 8001520:	2300      	movs	r3, #0
    }
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	0800cc7c 	.word	0x0800cc7c
 8001530:	20000ac4 	.word	0x20000ac4
 8001534:	0800cca8 	.word	0x0800cca8

08001538 <SD_Init>:
//-------------------------Initialization-------------------------------------------------------------------------------------
bool SD_Init(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
	SD_Deselect();
 800153e:	f7ff ff6f 	bl	8001420 <SD_Deselect>
	printf("DESELECTED");
 8001542:	48a0      	ldr	r0, [pc, #640]	@ (80017c4 <SD_Init+0x28c>)
 8001544:	f009 f998 	bl	800a878 <iprintf>
    uint8_t r1;
    uint8_t ocr[4];
// 3. CMD8: check voltage and SD version
  SD_Select();
 8001548:	f7ff ff5e 	bl	8001408 <SD_Select>
  printf("SELECTED");
 800154c:	489e      	ldr	r0, [pc, #632]	@ (80017c8 <SD_Init+0x290>)
 800154e:	f009 f993 	bl	800a878 <iprintf>
  SD_SPI_TxRx(CMD8);
 8001552:	2048      	movs	r0, #72	@ 0x48
 8001554:	f7ff ff70 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x00);
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff ff6d 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x00);
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff ff6a 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x01);  // 2.7–3.6V
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff ff67 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0xAA);  // check pattern
 800156a:	20aa      	movs	r0, #170	@ 0xaa
 800156c:	f7ff ff64 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x87);  // Valid CRC for CMD8
 8001570:	2087      	movs	r0, #135	@ 0x87
 8001572:	f7ff ff61 	bl	8001438 <SD_SPI_TxRx>
  // AITING FOR R1 TO RECIEVE DATA
  for (int i = 0; i < 10; i++) {
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
 800157a:	e00f      	b.n	800159c <SD_Init+0x64>
      r1 = SD_SPI_TxRx(0xFF);
 800157c:	20ff      	movs	r0, #255	@ 0xff
 800157e:	f7ff ff5b 	bl	8001438 <SD_SPI_TxRx>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if (r1 != 0xFF) break;
 8001588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800158c:	2bff      	cmp	r3, #255	@ 0xff
 800158e:	d109      	bne.n	80015a4 <SD_Init+0x6c>
      HAL_Delay(1);
 8001590:	2001      	movs	r0, #1
 8001592:	f000 fe53 	bl	800223c <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	3301      	adds	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	2b09      	cmp	r3, #9
 80015a0:	ddec      	ble.n	800157c <SD_Init+0x44>
 80015a2:	e000      	b.n	80015a6 <SD_Init+0x6e>
      if (r1 != 0xFF) break;
 80015a4:	bf00      	nop
  }
  printf("CMD8 R1 = 0x%02X\r\n", r1);
 80015a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015aa:	4619      	mov	r1, r3
 80015ac:	4887      	ldr	r0, [pc, #540]	@ (80017cc <SD_Init+0x294>)
 80015ae:	f009 f963 	bl	800a878 <iprintf>
  for (int i = 0; i < 4; i++) ocr[i] = SD_SPI_TxRx(0xFF);
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	e00c      	b.n	80015d2 <SD_Init+0x9a>
 80015b8:	20ff      	movs	r0, #255	@ 0xff
 80015ba:	f7ff ff3d 	bl	8001438 <SD_SPI_TxRx>
 80015be:	4603      	mov	r3, r0
 80015c0:	4619      	mov	r1, r3
 80015c2:	1d3a      	adds	r2, r7, #4
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	460a      	mov	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	ddef      	ble.n	80015b8 <SD_Init+0x80>
SD_Deselect();
 80015d8:	f7ff ff22 	bl	8001420 <SD_Deselect>

  if (r1 != 0x01 || ocr[3] != 0xAA) {
 80015dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d102      	bne.n	80015ea <SD_Init+0xb2>
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2baa      	cmp	r3, #170	@ 0xaa
 80015e8:	d007      	beq.n	80015fa <SD_Init+0xc2>
	 /// printf("SD CMD8 failed: r1=0x%02X, R7 = %02X %02X %02X %02X\r\n",r1, ocr[0], ocr[1], ocr[2], ocr[3]);
      printf("SD CMD8 failed, r1 = 0x%02X\r\n", r1);
 80015ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015ee:	4619      	mov	r1, r3
 80015f0:	4877      	ldr	r0, [pc, #476]	@ (80017d0 <SD_Init+0x298>)
 80015f2:	f009 f941 	bl	800a878 <iprintf>
      return false;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e0df      	b.n	80017ba <SD_Init+0x282>
  }

  printf("SD CMD8 OK, SD v2.x card detected\r\n");
 80015fa:	4876      	ldr	r0, [pc, #472]	@ (80017d4 <SD_Init+0x29c>)
 80015fc:	f009 f9a4 	bl	800a948 <puts>


  // 4. ACMD41: initialize card (HCS=1 for SDHC support)
  for (int i = 0; i < 100; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	e06b      	b.n	80016de <SD_Init+0x1a6>
      // Send CMD55
      SD_Select();
 8001606:	f7ff feff 	bl	8001408 <SD_Select>
      SD_SPI_TxRx(CMD55);
 800160a:	2077      	movs	r0, #119	@ 0x77
 800160c:	f7ff ff14 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x00);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff ff11 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x00);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff ff0e 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff ff0b 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x00);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff ff08 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x01);  // Dummy CRC
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff ff05 	bl	8001438 <SD_SPI_TxRx>
      r1 = SD_SPI_TxRx(0xFF);
 800162e:	20ff      	movs	r0, #255	@ 0xff
 8001630:	f7ff ff02 	bl	8001438 <SD_SPI_TxRx>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (int j = 0; j < 8; j++) {
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00c      	b.n	800165a <SD_Init+0x122>
          if (r1 != 0xFF) break;
 8001640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001644:	2bff      	cmp	r3, #255	@ 0xff
 8001646:	d10c      	bne.n	8001662 <SD_Init+0x12a>
          r1 = SD_SPI_TxRx(0xFF);
 8001648:	20ff      	movs	r0, #255	@ 0xff
 800164a:	f7ff fef5 	bl	8001438 <SD_SPI_TxRx>
 800164e:	4603      	mov	r3, r0
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (int j = 0; j < 8; j++) {
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b07      	cmp	r3, #7
 800165e:	ddef      	ble.n	8001640 <SD_Init+0x108>
 8001660:	e000      	b.n	8001664 <SD_Init+0x12c>
          if (r1 != 0xFF) break;
 8001662:	bf00      	nop
      }
      SD_Deselect();
 8001664:	f7ff fedc 	bl	8001420 <SD_Deselect>

      // Send ACMD41
      SD_Select();
 8001668:	f7ff fece 	bl	8001408 <SD_Select>
      SD_SPI_TxRx(ACMD41);
 800166c:	2069      	movs	r0, #105	@ 0x69
 800166e:	f7ff fee3 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x40);  // HCS=1
 8001672:	2040      	movs	r0, #64	@ 0x40
 8001674:	f7ff fee0 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x00);
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fedd 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x00);
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff feda 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x00);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fed7 	bl	8001438 <SD_SPI_TxRx>
      SD_SPI_TxRx(0x01);  // Dummy CRC
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff fed4 	bl	8001438 <SD_SPI_TxRx>
      r1 = SD_SPI_TxRx(0xFF);
 8001690:	20ff      	movs	r0, #255	@ 0xff
 8001692:	f7ff fed1 	bl	8001438 <SD_SPI_TxRx>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (int j = 0; j < 8; j++) {
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	e00c      	b.n	80016bc <SD_Init+0x184>
          if (r1 != 0xFF) break;
 80016a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016a6:	2bff      	cmp	r3, #255	@ 0xff
 80016a8:	d10c      	bne.n	80016c4 <SD_Init+0x18c>
          r1 = SD_SPI_TxRx(0xFF);
 80016aa:	20ff      	movs	r0, #255	@ 0xff
 80016ac:	f7ff fec4 	bl	8001438 <SD_SPI_TxRx>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (int j = 0; j < 8; j++) {
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	3301      	adds	r3, #1
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b07      	cmp	r3, #7
 80016c0:	ddef      	ble.n	80016a2 <SD_Init+0x16a>
 80016c2:	e000      	b.n	80016c6 <SD_Init+0x18e>
          if (r1 != 0xFF) break;
 80016c4:	bf00      	nop
      }
      SD_Deselect();
 80016c6:	f7ff feab 	bl	8001420 <SD_Deselect>

      if (r1 == 0x00) break;  // Card is ready
 80016ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <SD_Init+0x1ae>
      HAL_Delay(10);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f000 fdb2 	bl	800223c <HAL_Delay>
  for (int i = 0; i < 100; i++) {
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	3301      	adds	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b63      	cmp	r3, #99	@ 0x63
 80016e2:	dd90      	ble.n	8001606 <SD_Init+0xce>
 80016e4:	e000      	b.n	80016e8 <SD_Init+0x1b0>
      if (r1 == 0x00) break;  // Card is ready
 80016e6:	bf00      	nop
  }

  if (r1 != 0x00) {
 80016e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <SD_Init+0x1c8>
      printf("SD ACMD41 failed, r1 = 0x%02X\r\n", r1);
 80016f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016f4:	4619      	mov	r1, r3
 80016f6:	4838      	ldr	r0, [pc, #224]	@ (80017d8 <SD_Init+0x2a0>)
 80016f8:	f009 f8be 	bl	800a878 <iprintf>
      return false;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e05c      	b.n	80017ba <SD_Init+0x282>
  }

  printf("SD ACMD41 OK, card initialized\r\n");
 8001700:	4836      	ldr	r0, [pc, #216]	@ (80017dc <SD_Init+0x2a4>)
 8001702:	f009 f921 	bl	800a948 <puts>

  // 5. CMD58: Read OCR
  SD_Select();
 8001706:	f7ff fe7f 	bl	8001408 <SD_Select>
  SD_SPI_TxRx(CMD58);
 800170a:	207a      	movs	r0, #122	@ 0x7a
 800170c:	f7ff fe94 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fe91 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x00);
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff fe8e 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x00);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fe8b 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x00);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fe88 	bl	8001438 <SD_SPI_TxRx>
  SD_SPI_TxRx(0x01);  // Dummy CRC
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff fe85 	bl	8001438 <SD_SPI_TxRx>
  for (int i = 0; i < 10; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e00f      	b.n	8001754 <SD_Init+0x21c>
        r1 = SD_SPI_TxRx(0xFF);
 8001734:	20ff      	movs	r0, #255	@ 0xff
 8001736:	f7ff fe7f 	bl	8001438 <SD_SPI_TxRx>
 800173a:	4603      	mov	r3, r0
 800173c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (r1 != 0xFF) break;
 8001740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001744:	2bff      	cmp	r3, #255	@ 0xff
 8001746:	d109      	bne.n	800175c <SD_Init+0x224>
        HAL_Delay(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f000 fd77 	bl	800223c <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3301      	adds	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b09      	cmp	r3, #9
 8001758:	ddec      	ble.n	8001734 <SD_Init+0x1fc>
 800175a:	e000      	b.n	800175e <SD_Init+0x226>
        if (r1 != 0xFF) break;
 800175c:	bf00      	nop
    }
  for (int i = 0; i < 4; i++) ocr[i] = SD_SPI_TxRx(0xFF);
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	e00c      	b.n	800177e <SD_Init+0x246>
 8001764:	20ff      	movs	r0, #255	@ 0xff
 8001766:	f7ff fe67 	bl	8001438 <SD_SPI_TxRx>
 800176a:	4603      	mov	r3, r0
 800176c:	4619      	mov	r1, r3
 800176e:	1d3a      	adds	r2, r7, #4
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4413      	add	r3, r2
 8001774:	460a      	mov	r2, r1
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3301      	adds	r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b03      	cmp	r3, #3
 8001782:	ddef      	ble.n	8001764 <SD_Init+0x22c>
  SD_Deselect();
 8001784:	f7ff fe4c 	bl	8001420 <SD_Deselect>

  if (r1 != 0x00) {
 8001788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <SD_Init+0x268>
      printf("SD CMD58 failed, r1 = 0x%02X\r\n", r1);
 8001790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001794:	4619      	mov	r1, r3
 8001796:	4812      	ldr	r0, [pc, #72]	@ (80017e0 <SD_Init+0x2a8>)
 8001798:	f009 f86e 	bl	800a878 <iprintf>
      return false;
 800179c:	2300      	movs	r3, #0
 800179e:	e00c      	b.n	80017ba <SD_Init+0x282>
  }

  if (ocr[0] & 0x40)
 80017a0:	793b      	ldrb	r3, [r7, #4]
 80017a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <SD_Init+0x27a>
      printf("Card is SDHC/SDXC\r\n");
 80017aa:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <SD_Init+0x2ac>)
 80017ac:	f009 f8cc 	bl	800a948 <puts>
 80017b0:	e002      	b.n	80017b8 <SD_Init+0x280>
  else
      printf("Card is SDSC\r\n");
 80017b2:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <SD_Init+0x2b0>)
 80017b4:	f009 f8c8 	bl	800a948 <puts>

  return true;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3728      	adds	r7, #40	@ 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800cccc 	.word	0x0800cccc
 80017c8:	0800ccd8 	.word	0x0800ccd8
 80017cc:	0800cce4 	.word	0x0800cce4
 80017d0:	0800ccf8 	.word	0x0800ccf8
 80017d4:	0800cd18 	.word	0x0800cd18
 80017d8:	0800cd3c 	.word	0x0800cd3c
 80017dc:	0800cd5c 	.word	0x0800cd5c
 80017e0:	0800cd7c 	.word	0x0800cd7c
 80017e4:	0800cd9c 	.word	0x0800cd9c
 80017e8:	0800cdb0 	.word	0x0800cdb0

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_MspInit+0x4c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <HAL_MspInit+0x4c>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_MspInit+0x4c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_MspInit+0x4c>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001814:	6453      	str	r3, [r2, #68]	@ 0x44
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	210f      	movs	r1, #15
 8001826:	f06f 0001 	mvn.w	r0, #1
 800182a:	f000 fde3 	bl	80023f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08e      	sub	sp, #56	@ 0x38
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a4e      	ldr	r2, [pc, #312]	@ (8001994 <HAL_ETH_MspInit+0x158>)
 800185a:	4293      	cmp	r3, r2
 800185c:	f040 8096 	bne.w	800198c <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001860:	4b4d      	ldr	r3, [pc, #308]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001864:	4a4c      	ldr	r2, [pc, #304]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 8001866:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800186a:	6313      	str	r3, [r2, #48]	@ 0x30
 800186c:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187c:	4a46      	ldr	r2, [pc, #280]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 800187e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001882:	6313      	str	r3, [r2, #48]	@ 0x30
 8001884:	4b44      	ldr	r3, [pc, #272]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	4a40      	ldr	r2, [pc, #256]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 8001896:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800189a:	6313      	str	r3, [r2, #48]	@ 0x30
 800189c:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b4:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b35      	ldr	r3, [pc, #212]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	4a34      	ldr	r2, [pc, #208]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80018cc:	4b32      	ldr	r3, [pc, #200]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018f0:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	4a28      	ldr	r2, [pc, #160]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fc:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <HAL_ETH_MspInit+0x15c>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001908:	2332      	movs	r3, #50	@ 0x32
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001918:	230b      	movs	r3, #11
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	481e      	ldr	r0, [pc, #120]	@ (800199c <HAL_ETH_MspInit+0x160>)
 8001924:	f001 f8de 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001928:	2386      	movs	r3, #134	@ 0x86
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001938:	230b      	movs	r3, #11
 800193a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	4817      	ldr	r0, [pc, #92]	@ (80019a0 <HAL_ETH_MspInit+0x164>)
 8001944:	f001 f8ce 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800195a:	230b      	movs	r3, #11
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	480f      	ldr	r0, [pc, #60]	@ (80019a4 <HAL_ETH_MspInit+0x168>)
 8001966:	f001 f8bd 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800196a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800197c:	230b      	movs	r3, #11
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4808      	ldr	r0, [pc, #32]	@ (80019a8 <HAL_ETH_MspInit+0x16c>)
 8001988:	f001 f8ac 	bl	8002ae4 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 800198c:	bf00      	nop
 800198e:	3738      	adds	r7, #56	@ 0x38
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40028000 	.word	0x40028000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40021800 	.word	0x40021800

080019ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0b0      	sub	sp, #192	@ 0xc0
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	2290      	movs	r2, #144	@ 0x90
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f009 f8bd 	bl	800ab4c <memset>
  if(hi2c->Instance==I2C1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a44      	ldr	r2, [pc, #272]	@ (8001ae8 <HAL_I2C_MspInit+0x13c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d13e      	bne.n	8001a5a <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fabd 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80019f8:	f7ff fd00 	bl	80013fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a00:	4a3a      	ldr	r2, [pc, #232]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a08:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a14:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1c:	2312      	movs	r3, #18
 8001a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a38:	4619      	mov	r1, r3
 8001a3a:	482d      	ldr	r0, [pc, #180]	@ (8001af0 <HAL_I2C_MspInit+0x144>)
 8001a3c:	f001 f852 	bl	8002ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a40:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	4a29      	ldr	r2, [pc, #164]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001a46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4c:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a58:	e041      	b.n	8001ade <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a25      	ldr	r2, [pc, #148]	@ (8001af4 <HAL_I2C_MspInit+0x148>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d13c      	bne.n	8001ade <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a68:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fa79 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001a80:	f7ff fcbc 	bl	80013fc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	4a18      	ldr	r2, [pc, #96]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001a8a:	f043 0320 	orr.w	r3, r3, #32
 8001a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a90:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa2:	2312      	movs	r3, #18
 8001aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480d      	ldr	r0, [pc, #52]	@ (8001af8 <HAL_I2C_MspInit+0x14c>)
 8001ac2:	f001 f80f 	bl	8002ae4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001acc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_I2C_MspInit+0x140>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
}
 8001ade:	bf00      	nop
 8001ae0:	37c0      	adds	r7, #192	@ 0xc0
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40005800 	.word	0x40005800
 8001af8:	40021400 	.word	0x40021400

08001afc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a25      	ldr	r2, [pc, #148]	@ (8001bb0 <HAL_SPI_MspInit+0xb4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d143      	bne.n	8001ba6 <HAL_SPI_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a24      	ldr	r2, [pc, #144]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_SPI_MspInit+0xb8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b66:	2360      	movs	r3, #96	@ 0x60
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b76:	2305      	movs	r3, #5
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <HAL_SPI_MspInit+0xbc>)
 8001b82:	f000 ffaf 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <HAL_SPI_MspInit+0xc0>)
 8001ba2:	f000 ff9f 	bl	8002ae4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	@ 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40013000 	.word	0x40013000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <HAL_TIM_Base_MspInit+0x44>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d113      	bne.n	8001bfa <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_TIM_Base_MspInit+0x48>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c08 <HAL_TIM_Base_MspInit+0x48>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_TIM_Base_MspInit+0x48>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2105      	movs	r1, #5
 8001bee:	201d      	movs	r0, #29
 8001bf0:	f000 fc00 	bl	80023f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bf4:	201d      	movs	r0, #29
 8001bf6:	f000 fc19 	bl	800242c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40000400 	.word	0x40000400
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0b0      	sub	sp, #192	@ 0xc0
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	2290      	movs	r2, #144	@ 0x90
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f008 ff8d 	bl	800ab4c <memset>
  if(huart->Instance==USART2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a53      	ldr	r2, [pc, #332]	@ (8001d84 <HAL_UART_MspInit+0x178>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d15c      	bne.n	8001cf6 <HAL_UART_MspInit+0xea>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 f98f 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c54:	f7ff fbd2 	bl	80013fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c58:	4b4b      	ldr	r3, [pc, #300]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c64:	4b48      	ldr	r3, [pc, #288]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b45      	ldr	r3, [pc, #276]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	4a44      	ldr	r2, [pc, #272]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7c:	4b42      	ldr	r3, [pc, #264]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c88:	4b3f      	ldr	r3, [pc, #252]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c8e:	f043 0308 	orr.w	r3, r3, #8
 8001c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c94:	4b3c      	ldr	r3, [pc, #240]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4831      	ldr	r0, [pc, #196]	@ (8001d8c <HAL_UART_MspInit+0x180>)
 8001cc6:	f000 ff0d 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cec:	4619      	mov	r1, r3
 8001cee:	4828      	ldr	r0, [pc, #160]	@ (8001d90 <HAL_UART_MspInit+0x184>)
 8001cf0:	f000 fef8 	bl	8002ae4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cf4:	e041      	b.n	8001d7a <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a26      	ldr	r2, [pc, #152]	@ (8001d94 <HAL_UART_MspInit+0x188>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d13c      	bne.n	8001d7a <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d04:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 f92c 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_UART_MspInit+0x112>
      Error_Handler();
 8001d1a:	f7ff fb6f 	bl	80013fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a13      	ldr	r2, [pc, #76]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_UART_MspInit+0x17c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d68:	2307      	movs	r3, #7
 8001d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d6e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d72:	4619      	mov	r1, r3
 8001d74:	4806      	ldr	r0, [pc, #24]	@ (8001d90 <HAL_UART_MspInit+0x184>)
 8001d76:	f000 feb5 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001d7a:	bf00      	nop
 8001d7c:	37c0      	adds	r7, #192	@ 0xc0
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40004400 	.word	0x40004400
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40004800 	.word	0x40004800

08001d98 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0ae      	sub	sp, #184	@ 0xb8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2290      	movs	r2, #144	@ 0x90
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f008 fec7 	bl	800ab4c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc6:	d159      	bne.n	8001e7c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001dc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 f8c7 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001de4:	f7ff fb0a 	bl	80013fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e00:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4818      	ldr	r0, [pc, #96]	@ (8001e88 <HAL_PCD_MspInit+0xf0>)
 8001e28:	f000 fe5c 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4810      	ldr	r0, [pc, #64]	@ (8001e88 <HAL_PCD_MspInit+0xf0>)
 8001e48:	f000 fe4c 	bl	8002ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e50:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e56:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	4a06      	ldr	r2, [pc, #24]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001e7c:	bf00      	nop
 8001e7e:	37b8      	adds	r7, #184	@ 0xb8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	@ 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e9c:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	4a32      	ldr	r2, [pc, #200]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001ea2:	f043 0310 	orr.w	r3, r3, #16
 8001ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea8:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb4:	f107 0210 	add.w	r2, r7, #16
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 f822 	bl	8004f08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ece:	f002 fff3 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8001ed2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ed4:	e004      	b.n	8001ee0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ed6:	f002 ffef 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8001eda:	4603      	mov	r3, r0
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee2:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_InitTick+0xe4>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9b      	lsrs	r3, r3, #18
 8001eea:	3b01      	subs	r3, #1
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001ef0:	4a21      	ldr	r2, [pc, #132]	@ (8001f78 <HAL_InitTick+0xec>)
 8001ef2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001ef6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001efa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001efc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f14:	4817      	ldr	r0, [pc, #92]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f16:	f004 f8a3 	bl	8006060 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11b      	bne.n	8001f60 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f28:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f2a:	f004 f8f1 	bl	8006110 <HAL_TIM_Base_Start_IT>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d111      	bne.n	8001f60 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f3c:	2036      	movs	r0, #54	@ 0x36
 8001f3e:	f000 fa75 	bl	800242c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d808      	bhi.n	8001f5a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	2036      	movs	r0, #54	@ 0x36
 8001f4e:	f000 fa51 	bl	80023f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_InitTick+0xf0>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e002      	b.n	8001f60 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3738      	adds	r7, #56	@ 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	20001038 	.word	0x20001038
 8001f78:	40001000 	.word	0x40001000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <NMI_Handler+0x4>

08001f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <MemManage_Handler+0x4>

08001f98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fbc:	4802      	ldr	r0, [pc, #8]	@ (8001fc8 <TIM3_IRQHandler+0x10>)
 8001fbe:	f004 f91f 	bl	8006200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200009f0 	.word	0x200009f0

08001fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <TIM6_DAC_IRQHandler+0x10>)
 8001fd2:	f004 f915 	bl	8006200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20001038 	.word	0x20001038

08001fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return 1;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_kill>:

int _kill(int pid, int sig)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ffa:	f008 fe57 	bl	800acac <__errno>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2216      	movs	r2, #22
 8002002:	601a      	str	r2, [r3, #0]
  return -1;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_exit>:

void _exit (int status)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ffe7 	bl	8001ff0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002022:	bf00      	nop
 8002024:	e7fd      	b.n	8002022 <_exit+0x12>

08002026 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e00a      	b.n	800204e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002038:	f3af 8000 	nop.w
 800203c:	4601      	mov	r1, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	dbf0      	blt.n	8002038 <_read+0x12>
  }

  return len;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e009      	b.n	8002086 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fcb2 	bl	80009e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf1      	blt.n	8002072 <_write+0x12>
  }
  return len;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_close>:

int _close(int file)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c0:	605a      	str	r2, [r3, #4]
  return 0;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_isatty>:

int _isatty(int file)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002108:	4a14      	ldr	r2, [pc, #80]	@ (800215c <_sbrk+0x5c>)
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <_sbrk+0x60>)
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002114:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <_sbrk+0x64>)
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <_sbrk+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d207      	bcs.n	8002140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002130:	f008 fdbc 	bl	800acac <__errno>
 8002134:	4603      	mov	r3, r0
 8002136:	220c      	movs	r2, #12
 8002138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e009      	b.n	8002154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <_sbrk+0x64>)
 8002150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20080000 	.word	0x20080000
 8002160:	00000400 	.word	0x00000400
 8002164:	20001084 	.word	0x20001084
 8002168:	20004f28 	.word	0x20004f28

0800216c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <SystemInit+0x20>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002176:	4a05      	ldr	r2, [pc, #20]	@ (800218c <SystemInit+0x20>)
 8002178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800217c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002190:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002194:	f7ff ffea 	bl	800216c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	@ (80021dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021be:	f008 fd7b 	bl	800acb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c2:	f7fe fca1 	bl	8000b08 <main>
  bx  lr    
 80021c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80021d4:	0800d214 	.word	0x0800d214
  ldr r2, =_sbss
 80021d8:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 80021dc:	20004f24 	.word	0x20004f24

080021e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC_IRQHandler>

080021e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e6:	2003      	movs	r0, #3
 80021e8:	f000 f8f9 	bl	80023de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ec:	200f      	movs	r0, #15
 80021ee:	f7ff fe4d 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f2:	f7ff fafb 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	20001088 	.word	0x20001088

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20001088 	.word	0x20001088

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff ffee 	bl	8002224 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffde 	bl	8002224 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000008 	.word	0x20000008

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x40>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	05fa0000 	.word	0x05fa0000

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	@ (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	@ (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ff4c 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002406:	f7ff ff61 	bl	80022cc <__NVIC_GetPriorityGrouping>
 800240a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	6978      	ldr	r0, [r7, #20]
 8002412:	f7ff ffb1 	bl	8002378 <NVIC_EncodePriority>
 8002416:	4602      	mov	r2, r0
 8002418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff80 	bl	8002324 <__NVIC_SetPriority>
}
 8002424:	bf00      	nop
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff54 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e086      	b.n	8002568 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002460:	2b00      	cmp	r3, #0
 8002462:	d106      	bne.n	8002472 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff f9e5 	bl	800183c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <HAL_ETH_Init+0x128>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	4a3e      	ldr	r2, [pc, #248]	@ (8002570 <HAL_ETH_Init+0x128>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44
 800247e:	4b3c      	ldr	r3, [pc, #240]	@ (8002570 <HAL_ETH_Init+0x128>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800248a:	4b3a      	ldr	r3, [pc, #232]	@ (8002574 <HAL_ETH_Init+0x12c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a39      	ldr	r2, [pc, #228]	@ (8002574 <HAL_ETH_Init+0x12c>)
 8002490:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002494:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002496:	4b37      	ldr	r3, [pc, #220]	@ (8002574 <HAL_ETH_Init+0x12c>)
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4935      	ldr	r1, [pc, #212]	@ (8002574 <HAL_ETH_Init+0x12c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024a4:	4b33      	ldr	r3, [pc, #204]	@ (8002574 <HAL_ETH_Init+0x12c>)
 80024a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c0:	f7ff feb0 	bl	8002224 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024c6:	e011      	b.n	80024ec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024c8:	f7ff feac 	bl	8002224 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024d6:	d909      	bls.n	80024ec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2204      	movs	r2, #4
 80024dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	22e0      	movs	r2, #224	@ 0xe0
 80024e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e03d      	b.n	8002568 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e4      	bne.n	80024c8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f97a 	bl	80027f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fa25 	bl	8002954 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa7b 	bl	8002a06 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	461a      	mov	r2, r3
 8002516:	2100      	movs	r1, #0
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f9e3 	bl	80028e4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800252c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <HAL_ETH_Init+0x130>)
 800253c:	430b      	orrs	r3, r1
 800253e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002552:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2210      	movs	r2, #16
 8002562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	40013800 	.word	0x40013800
 8002578:	00020060 	.word	0x00020060

0800257c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <ETH_SetMACConfig+0x164>)
 8002592:	4013      	ands	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7b9b      	ldrb	r3, [r3, #14]
 800259a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	7c12      	ldrb	r2, [r2, #16]
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	d102      	bne.n	80025aa <ETH_SetMACConfig+0x2e>
 80025a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025a8:	e000      	b.n	80025ac <ETH_SetMACConfig+0x30>
 80025aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	7c52      	ldrb	r2, [r2, #17]
 80025b2:	2a00      	cmp	r2, #0
 80025b4:	d102      	bne.n	80025bc <ETH_SetMACConfig+0x40>
 80025b6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025ba:	e000      	b.n	80025be <ETH_SetMACConfig+0x42>
 80025bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	7fdb      	ldrb	r3, [r3, #31]
 80025ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	7f92      	ldrb	r2, [r2, #30]
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d102      	bne.n	80025e2 <ETH_SetMACConfig+0x66>
 80025dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e0:	e000      	b.n	80025e4 <ETH_SetMACConfig+0x68>
 80025e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80025e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7f1b      	ldrb	r3, [r3, #28]
 80025ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	791b      	ldrb	r3, [r3, #4]
 80025f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002602:	2a00      	cmp	r2, #0
 8002604:	d102      	bne.n	800260c <ETH_SetMACConfig+0x90>
 8002606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800260a:	e000      	b.n	800260e <ETH_SetMACConfig+0x92>
 800260c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800260e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	7bdb      	ldrb	r3, [r3, #15]
 8002614:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002616:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800261c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002624:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002626:	4313      	orrs	r3, r2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff fdfc 	bl	800223c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800265a:	4013      	ands	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002662:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800266a:	2a00      	cmp	r2, #0
 800266c:	d101      	bne.n	8002672 <ETH_SetMACConfig+0xf6>
 800266e:	2280      	movs	r2, #128	@ 0x80
 8002670:	e000      	b.n	8002674 <ETH_SetMACConfig+0xf8>
 8002672:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002674:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800267a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002682:	2a01      	cmp	r2, #1
 8002684:	d101      	bne.n	800268a <ETH_SetMACConfig+0x10e>
 8002686:	2208      	movs	r2, #8
 8002688:	e000      	b.n	800268c <ETH_SetMACConfig+0x110>
 800268a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800268c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002694:	2a01      	cmp	r2, #1
 8002696:	d101      	bne.n	800269c <ETH_SetMACConfig+0x120>
 8002698:	2204      	movs	r2, #4
 800269a:	e000      	b.n	800269e <ETH_SetMACConfig+0x122>
 800269c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800269e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80026a6:	2a01      	cmp	r2, #1
 80026a8:	d101      	bne.n	80026ae <ETH_SetMACConfig+0x132>
 80026aa:	2202      	movs	r2, #2
 80026ac:	e000      	b.n	80026b0 <ETH_SetMACConfig+0x134>
 80026ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026b0:	4313      	orrs	r3, r2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff fdb7 	bl	800223c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	fd20810f 	.word	0xfd20810f

080026e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <ETH_SetDMAConfig+0x110>)
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7b1b      	ldrb	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <ETH_SetDMAConfig+0x2c>
 800270a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800270e:	e000      	b.n	8002712 <ETH_SetDMAConfig+0x2e>
 8002710:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7b5b      	ldrb	r3, [r3, #13]
 8002716:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002718:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	7f52      	ldrb	r2, [r2, #29]
 800271e:	2a00      	cmp	r2, #0
 8002720:	d102      	bne.n	8002728 <ETH_SetDMAConfig+0x44>
 8002722:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002726:	e000      	b.n	800272a <ETH_SetDMAConfig+0x46>
 8002728:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800272a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	7b9b      	ldrb	r3, [r3, #14]
 8002730:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002732:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002738:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	7f1b      	ldrb	r3, [r3, #28]
 800273e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002740:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7f9b      	ldrb	r3, [r3, #30]
 8002746:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002748:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800274e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002756:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002758:	4313      	orrs	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002768:	461a      	mov	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff fd5e 	bl	800223c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	791b      	ldrb	r3, [r3, #4]
 8002792:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002798:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800279e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d8:	2001      	movs	r0, #1
 80027da:	f7ff fd2f 	bl	800223c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	f8de3f23 	.word	0xf8de3f23

080027f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0a6      	sub	sp, #152	@ 0x98
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800280c:	2300      	movs	r3, #0
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800283a:	2300      	movs	r3, #0
 800283c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002844:	2300      	movs	r3, #0
 8002846:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002860:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002864:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002866:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800286a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002872:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fe7f 	bl	800257c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800287e:	2301      	movs	r3, #1
 8002880:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002882:	2301      	movs	r3, #1
 8002884:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800288c:	2301      	movs	r3, #1
 800288e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028b8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028be:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028ce:	f107 0308 	add.w	r3, r7, #8
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff05 	bl	80026e4 <ETH_SetDMAConfig>
}
 80028da:	bf00      	nop
 80028dc:	3798      	adds	r7, #152	@ 0x98
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3305      	adds	r3, #5
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	3204      	adds	r2, #4
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <ETH_MACAddressConfig+0x68>)
 8002906:	4413      	add	r3, r2
 8002908:	461a      	mov	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3303      	adds	r3, #3
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	061a      	lsls	r2, r3, #24
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3302      	adds	r3, #2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3301      	adds	r3, #1
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	4313      	orrs	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <ETH_MACAddressConfig+0x6c>)
 8002936:	4413      	add	r3, r2
 8002938:	461a      	mov	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40028040 	.word	0x40028040
 8002950:	40028044 	.word	0x40028044

08002954 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e03e      	b.n	80029e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68d9      	ldr	r1, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	3206      	adds	r2, #6
 8002994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d80c      	bhi.n	80029c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68d9      	ldr	r1, [r3, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	e004      	b.n	80029ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3301      	adds	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d9bd      	bls.n	8002962 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f8:	611a      	str	r2, [r3, #16]
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e048      	b.n	8002aa6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6919      	ldr	r1, [r3, #16]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a50:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	3212      	adds	r2, #18
 8002a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d80c      	bhi.n	8002a96 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6919      	ldr	r1, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	e004      	b.n	8002aa0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d9b3      	bls.n	8002a14 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad6:	60da      	str	r2, [r3, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e175      	b.n	8002df0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8164 	bne.w	8002dea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x56>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80be 	beq.w	8002dea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	4b66      	ldr	r3, [pc, #408]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	4a65      	ldr	r2, [pc, #404]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7a:	4b63      	ldr	r3, [pc, #396]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c86:	4a61      	ldr	r2, [pc, #388]	@ (8002e0c <HAL_GPIO_Init+0x328>)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a58      	ldr	r2, [pc, #352]	@ (8002e10 <HAL_GPIO_Init+0x32c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d037      	beq.n	8002d22 <HAL_GPIO_Init+0x23e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_GPIO_Init+0x330>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_GPIO_Init+0x23a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a56      	ldr	r2, [pc, #344]	@ (8002e18 <HAL_GPIO_Init+0x334>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02b      	beq.n	8002d1a <HAL_GPIO_Init+0x236>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a55      	ldr	r2, [pc, #340]	@ (8002e1c <HAL_GPIO_Init+0x338>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d025      	beq.n	8002d16 <HAL_GPIO_Init+0x232>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a54      	ldr	r2, [pc, #336]	@ (8002e20 <HAL_GPIO_Init+0x33c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <HAL_GPIO_Init+0x22e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a53      	ldr	r2, [pc, #332]	@ (8002e24 <HAL_GPIO_Init+0x340>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d019      	beq.n	8002d0e <HAL_GPIO_Init+0x22a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	@ (8002e28 <HAL_GPIO_Init+0x344>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x226>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a51      	ldr	r2, [pc, #324]	@ (8002e2c <HAL_GPIO_Init+0x348>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_Init+0x222>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a50      	ldr	r2, [pc, #320]	@ (8002e30 <HAL_GPIO_Init+0x34c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x21e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e34 <HAL_GPIO_Init+0x350>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_Init+0x21a>
 8002cfa:	2309      	movs	r3, #9
 8002cfc:	e012      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002cfe:	230a      	movs	r3, #10
 8002d00:	e010      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d02:	2308      	movs	r3, #8
 8002d04:	e00e      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e00c      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e00a      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d34:	4935      	ldr	r1, [pc, #212]	@ (8002e0c <HAL_GPIO_Init+0x328>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d42:	4b3d      	ldr	r3, [pc, #244]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d66:	4a34      	ldr	r2, [pc, #208]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d6c:	4b32      	ldr	r3, [pc, #200]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d90:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d96:	4b28      	ldr	r3, [pc, #160]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dba:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de4:	4a14      	ldr	r2, [pc, #80]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f ae86 	bls.w	8002b04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020c00 	.word	0x40020c00
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40021400 	.word	0x40021400
 8002e28:	40021800 	.word	0x40021800
 8002e2c:	40021c00 	.word	0x40021c00
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40022400 	.word	0x40022400
 8002e38:	40013c00 	.word	0x40013c00

08002e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e58:	e003      	b.n	8002e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e80:	887a      	ldrh	r2, [r7, #2]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4013      	ands	r3, r2
 8002e86:	041a      	lsls	r2, r3, #16
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	400b      	ands	r3, r1
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	619a      	str	r2, [r3, #24]
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e08b      	b.n	8002fce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe fd6e 	bl	80019ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	@ 0x24
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ef4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	e006      	b.n	8002f2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d108      	bne.n	8002f46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	e007      	b.n	8002f56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <HAL_I2C_Init+0x134>)
 8002f62:	430b      	orrs	r3, r1
 8002f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	02008000 	.word	0x02008000

08002fdc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	460b      	mov	r3, r1
 8002fea:	817b      	strh	r3, [r7, #10]
 8002fec:	4613      	mov	r3, r2
 8002fee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	f040 80fd 	bne.w	80031f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2C_Master_Transmit+0x30>
 8003008:	2302      	movs	r3, #2
 800300a:	e0f6      	b.n	80031fa <HAL_I2C_Master_Transmit+0x21e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003014:	f7ff f906 	bl	8002224 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2319      	movs	r3, #25
 8003020:	2201      	movs	r2, #1
 8003022:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fde6 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0e1      	b.n	80031fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2221      	movs	r2, #33	@ 0x21
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2210      	movs	r2, #16
 8003042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	893a      	ldrh	r2, [r7, #8]
 8003056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2bff      	cmp	r3, #255	@ 0xff
 8003066:	d906      	bls.n	8003076 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	22ff      	movs	r2, #255	@ 0xff
 800306c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800306e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e007      	b.n	8003086 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003080:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003084:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d024      	beq.n	80030d8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	781a      	ldrb	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	8979      	ldrh	r1, [r7, #10]
 80030ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003204 <HAL_I2C_Master_Transmit+0x228>)
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 ffe1 	bl	8004098 <I2C_TransferConfig>
 80030d6:	e066      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	4b48      	ldr	r3, [pc, #288]	@ (8003204 <HAL_I2C_Master_Transmit+0x228>)
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 ffd6 	bl	8004098 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030ec:	e05b      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	6a39      	ldr	r1, [r7, #32]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fdd9 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07b      	b.n	80031fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d034      	beq.n	80031a6 <HAL_I2C_Master_Transmit+0x1ca>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d130      	bne.n	80031a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	2200      	movs	r2, #0
 800314c:	2180      	movs	r1, #128	@ 0x80
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fd52 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e04d      	b.n	80031fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	2bff      	cmp	r3, #255	@ 0xff
 8003166:	d90e      	bls.n	8003186 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	22ff      	movs	r2, #255	@ 0xff
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	b2da      	uxtb	r2, r3
 8003174:	8979      	ldrh	r1, [r7, #10]
 8003176:	2300      	movs	r3, #0
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 ff8a 	bl	8004098 <I2C_TransferConfig>
 8003184:	e00f      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	b2da      	uxtb	r2, r3
 8003196:	8979      	ldrh	r1, [r7, #10]
 8003198:	2300      	movs	r3, #0
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 ff79 	bl	8004098 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d19e      	bne.n	80030ee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	6a39      	ldr	r1, [r7, #32]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fdbf 	bl	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e01a      	b.n	80031fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2220      	movs	r2, #32
 80031ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <HAL_I2C_Master_Transmit+0x22c>)
 80031d8:	400b      	ands	r3, r1
 80031da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	80002000 	.word	0x80002000
 8003208:	fe00e800 	.word	0xfe00e800

0800320c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	817b      	strh	r3, [r7, #10]
 800321c:	4613      	mov	r3, r2
 800321e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b20      	cmp	r3, #32
 800322a:	f040 80db 	bne.w	80033e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_I2C_Master_Receive+0x30>
 8003238:	2302      	movs	r3, #2
 800323a:	e0d4      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003244:	f7fe ffee 	bl	8002224 <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2319      	movs	r3, #25
 8003250:	2201      	movs	r2, #1
 8003252:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fcce 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0bf      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2222      	movs	r2, #34	@ 0x22
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2210      	movs	r2, #16
 8003272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	893a      	ldrh	r2, [r7, #8]
 8003286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2bff      	cmp	r3, #255	@ 0xff
 8003296:	d90e      	bls.n	80032b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	8979      	ldrh	r1, [r7, #10]
 80032a6:	4b52      	ldr	r3, [pc, #328]	@ (80033f0 <HAL_I2C_Master_Receive+0x1e4>)
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fef2 	bl	8004098 <I2C_TransferConfig>
 80032b4:	e06d      	b.n	8003392 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	4b49      	ldr	r3, [pc, #292]	@ (80033f0 <HAL_I2C_Master_Receive+0x1e4>)
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fee1 	bl	8004098 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032d6:	e05c      	b.n	8003392 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	6a39      	ldr	r1, [r7, #32]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fd6f 	bl	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e07c      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d034      	beq.n	8003392 <HAL_I2C_Master_Receive+0x186>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d130      	bne.n	8003392 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2200      	movs	r2, #0
 8003338:	2180      	movs	r1, #128	@ 0x80
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fc5c 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e04d      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	2bff      	cmp	r3, #255	@ 0xff
 8003352:	d90e      	bls.n	8003372 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	22ff      	movs	r2, #255	@ 0xff
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	b2da      	uxtb	r2, r3
 8003360:	8979      	ldrh	r1, [r7, #10]
 8003362:	2300      	movs	r3, #0
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fe94 	bl	8004098 <I2C_TransferConfig>
 8003370:	e00f      	b.n	8003392 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	b2da      	uxtb	r2, r3
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fe83 	bl	8004098 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d19d      	bne.n	80032d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6a39      	ldr	r1, [r7, #32]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fcc9 	bl	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e01a      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2220      	movs	r2, #32
 80033b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <HAL_I2C_Master_Receive+0x1e8>)
 80033c4:	400b      	ands	r3, r1
 80033c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	80002400 	.word	0x80002400
 80033f4:	fe00e800 	.word	0xfe00e800

080033f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	817b      	strh	r3, [r7, #10]
 800340a:	460b      	mov	r3, r1
 800340c:	813b      	strh	r3, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b20      	cmp	r3, #32
 800341c:	f040 80f9 	bne.w	8003612 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_I2C_Mem_Write+0x34>
 8003426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0ed      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Mem_Write+0x4e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0e6      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800344e:	f7fe fee9 	bl	8002224 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2319      	movs	r3, #25
 800345a:	2201      	movs	r2, #1
 800345c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fbc9 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d1      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2221      	movs	r2, #33	@ 0x21
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2240      	movs	r2, #64	@ 0x40
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003490:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003498:	88f8      	ldrh	r0, [r7, #6]
 800349a:	893a      	ldrh	r2, [r7, #8]
 800349c:	8979      	ldrh	r1, [r7, #10]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4603      	mov	r3, r0
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fad9 	bl	8003a60 <I2C_RequestMemoryWrite>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0a9      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2bff      	cmp	r3, #255	@ 0xff
 80034c8:	d90e      	bls.n	80034e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	@ 0xff
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fdd9 	bl	8004098 <I2C_TransferConfig>
 80034e6:	e00f      	b.n	8003508 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	8979      	ldrh	r1, [r7, #10]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fdc8 	bl	8004098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fbcc 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e07b      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d034      	beq.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d130      	bne.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	@ 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fb45 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e04d      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	2bff      	cmp	r3, #255	@ 0xff
 8003580:	d90e      	bls.n	80035a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	22ff      	movs	r2, #255	@ 0xff
 8003586:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8979      	ldrh	r1, [r7, #10]
 8003590:	2300      	movs	r3, #0
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fd7d 	bl	8004098 <I2C_TransferConfig>
 800359e:	e00f      	b.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fd6c 	bl	8004098 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d19e      	bne.n	8003508 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fbb2 	bl	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e01a      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2220      	movs	r2, #32
 80035e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <HAL_I2C_Mem_Write+0x224>)
 80035f2:	400b      	ands	r3, r1
 80035f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	fe00e800 	.word	0xfe00e800

08003620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b20      	cmp	r3, #32
 8003644:	f040 80fd 	bne.w	8003842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_I2C_Mem_Read+0x34>
 800364e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800365a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0f1      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_I2C_Mem_Read+0x4e>
 800366a:	2302      	movs	r3, #2
 800366c:	e0ea      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003676:	f7fe fdd5 	bl	8002224 <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2319      	movs	r3, #25
 8003682:	2201      	movs	r2, #1
 8003684:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fab5 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0d5      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2222      	movs	r2, #34	@ 0x22
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	@ 0x40
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c0:	88f8      	ldrh	r0, [r7, #6]
 80036c2:	893a      	ldrh	r2, [r7, #8]
 80036c4:	8979      	ldrh	r1, [r7, #10]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4603      	mov	r3, r0
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fa19 	bl	8003b08 <I2C_RequestMemoryRead>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0ad      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2bff      	cmp	r3, #255	@ 0xff
 80036f0:	d90e      	bls.n	8003710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	8979      	ldrh	r1, [r7, #10]
 8003700:	4b52      	ldr	r3, [pc, #328]	@ (800384c <HAL_I2C_Mem_Read+0x22c>)
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fcc5 	bl	8004098 <I2C_TransferConfig>
 800370e:	e00f      	b.n	8003730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	b2da      	uxtb	r2, r3
 8003720:	8979      	ldrh	r1, [r7, #10]
 8003722:	4b4a      	ldr	r3, [pc, #296]	@ (800384c <HAL_I2C_Mem_Read+0x22c>)
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fcb4 	bl	8004098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003736:	2200      	movs	r2, #0
 8003738:	2104      	movs	r1, #4
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa5c 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07c      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d034      	beq.n	80037f0 <HAL_I2C_Mem_Read+0x1d0>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d130      	bne.n	80037f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003794:	2200      	movs	r2, #0
 8003796:	2180      	movs	r1, #128	@ 0x80
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fa2d 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e04d      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2bff      	cmp	r3, #255	@ 0xff
 80037b0:	d90e      	bls.n	80037d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	8979      	ldrh	r1, [r7, #10]
 80037c0:	2300      	movs	r3, #0
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fc65 	bl	8004098 <I2C_TransferConfig>
 80037ce:	e00f      	b.n	80037f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	8979      	ldrh	r1, [r7, #10]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fc54 	bl	8004098 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d19a      	bne.n	8003730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fa9a 	bl	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e01a      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2220      	movs	r2, #32
 8003814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <HAL_I2C_Mem_Read+0x230>)
 8003822:	400b      	ands	r3, r1
 8003824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	80002400 	.word	0x80002400
 8003850:	fe00e800 	.word	0xfe00e800

08003854 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08a      	sub	sp, #40	@ 0x28
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b20      	cmp	r3, #32
 8003876:	f040 80e9 	bne.w	8003a4c <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003888:	d101      	bne.n	800388e <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	e0df      	b.n	8003a4e <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_I2C_IsDeviceReady+0x48>
 8003898:	2302      	movs	r3, #2
 800389a:	e0d8      	b.n	8003a4e <HAL_I2C_IsDeviceReady+0x1fa>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2224      	movs	r2, #36	@ 0x24
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <HAL_I2C_IsDeviceReady+0x72>
 80038ba:	897b      	ldrh	r3, [r7, #10]
 80038bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038c0:	4b65      	ldr	r3, [pc, #404]	@ (8003a58 <HAL_I2C_IsDeviceReady+0x204>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	e004      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0x7c>
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038cc:	4b63      	ldr	r3, [pc, #396]	@ (8003a5c <HAL_I2C_IsDeviceReady+0x208>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80038d6:	f7fe fca5 	bl	8002224 <HAL_GetTick>
 80038da:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003908:	e034      	b.n	8003974 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d01a      	beq.n	8003948 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fc87 	bl	8002224 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <HAL_I2C_IsDeviceReady+0xd4>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10f      	bne.n	8003948 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e082      	b.n	8003a4e <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b20      	cmp	r3, #32
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b10      	cmp	r3, #16
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003974:	7fbb      	ldrb	r3, [r7, #30]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <HAL_I2C_IsDeviceReady+0x12c>
 800397a:	7f7b      	ldrb	r3, [r7, #29]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0c4      	beq.n	800390a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d027      	beq.n	80039de <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	2120      	movs	r1, #32
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f92d 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00e      	beq.n	80039c2 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d107      	bne.n	80039bc <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2220      	movs	r2, #32
 80039b2:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80039ba:	e026      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e023      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2220      	movs	r2, #32
 80039c8:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e037      	b.n	8003a4e <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2210      	movs	r2, #16
 80039e4:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2120      	movs	r1, #32
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f901 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e003      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2220      	movs	r2, #32
 8003a08:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d904      	bls.n	8003a22 <HAL_I2C_IsDeviceReady+0x1ce>
 8003a18:	7ffb      	ldrb	r3, [r7, #31]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	f63f af43 	bhi.w	80038b2 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	02002000 	.word	0x02002000
 8003a5c:	02002800 	.word	0x02002800

08003a60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	4b20      	ldr	r3, [pc, #128]	@ (8003b04 <I2C_RequestMemoryWrite+0xa4>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fb05 	bl	8004098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	69b9      	ldr	r1, [r7, #24]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f909 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e02c      	b.n	8003afc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ab2:	e015      	b.n	8003ae0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ab4:	893b      	ldrh	r3, [r7, #8]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8ef 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e012      	b.n	8003afc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad6:	893b      	ldrh	r3, [r7, #8]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2180      	movs	r1, #128	@ 0x80
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f884 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	80002000 	.word	0x80002000

08003b08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	8979      	ldrh	r1, [r7, #10]
 8003b28:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <I2C_RequestMemoryRead+0xa4>)
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fab2 	bl	8004098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f8b6 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e02c      	b.n	8003ba2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4e:	893b      	ldrh	r3, [r7, #8]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b58:	e015      	b.n	8003b86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b5a:	893b      	ldrh	r3, [r7, #8]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f89c 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e012      	b.n	8003ba2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b7c:	893b      	ldrh	r3, [r7, #8]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2140      	movs	r1, #64	@ 0x40
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f831 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	80002000 	.word	0x80002000

08003bb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d103      	bne.n	8003bce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d007      	beq.n	8003bec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	619a      	str	r2, [r3, #24]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c08:	e03b      	b.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	6839      	ldr	r1, [r7, #0]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f962 	bl	8003ed8 <I2C_IsErrorOccurred>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e041      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d02d      	beq.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	f7fe fafd 	bl	8002224 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d122      	bne.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d113      	bne.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00f      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d0b4      	beq.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb6:	e033      	b.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f90b 	bl	8003ed8 <I2C_IsErrorOccurred>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e031      	b.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d025      	beq.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fe faa6 	bl	8002224 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d11a      	bne.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d013      	beq.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d1c4      	bne.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d44:	e02f      	b.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f8c4 	bl	8003ed8 <I2C_IsErrorOccurred>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e02d      	b.n	8003db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe fa63 	bl	8002224 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11a      	bne.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d013      	beq.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e007      	b.n	8003db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d1c8      	bne.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003dd0:	e071      	b.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f87e 	bl	8003ed8 <I2C_IsErrorOccurred>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d13b      	bne.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d138      	bne.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d105      	bne.n	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d121      	bne.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2210      	movs	r2, #16
 8003e28:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2220      	movs	r2, #32
 8003e36:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b24      	ldr	r3, [pc, #144]	@ (8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003e44:	400b      	ands	r3, r1
 8003e46:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
 8003e64:	e002      	b.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003e6c:	f7fe f9da 	bl	8002224 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d302      	bcc.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d119      	bne.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d116      	bne.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d00f      	beq.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d002      	beq.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d083      	beq.n	8003dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	fe00e800 	.word	0xfe00e800

08003ed8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	@ 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d068      	beq.n	8003fd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2210      	movs	r2, #16
 8003f0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f0c:	e049      	b.n	8003fa2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d045      	beq.n	8003fa2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fe f985 	bl	8002224 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_IsErrorOccurred+0x54>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d13a      	bne.n	8003fa2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4e:	d121      	bne.n	8003f94 <I2C_IsErrorOccurred+0xbc>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f56:	d01d      	beq.n	8003f94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d01a      	beq.n	8003f94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f6e:	f7fe f959 	bl	8002224 <HAL_GetTick>
 8003f72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f74:	e00e      	b.n	8003f94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f76:	f7fe f955 	bl	8002224 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b19      	cmp	r3, #25
 8003f82:	d907      	bls.n	8003f94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f043 0320 	orr.w	r3, r3, #32
 8003f8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f92:	e006      	b.n	8003fa2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d1e9      	bne.n	8003f76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d003      	beq.n	8003fb8 <I2C_IsErrorOccurred+0xe0>
 8003fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0aa      	beq.n	8003f0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ff8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f043 0308 	orr.w	r3, r3, #8
 8004010:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800401a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800403c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01c      	beq.n	8004086 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff fdaf 	bl	8003bb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <I2C_IsErrorOccurred+0x1bc>)
 800405e:	400b      	ands	r3, r1
 8004060:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004086:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800408a:	4618      	mov	r0, r3
 800408c:	3728      	adds	r7, #40	@ 0x28
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	fe00e800 	.word	0xfe00e800

08004098 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	817b      	strh	r3, [r7, #10]
 80040a6:	4613      	mov	r3, r2
 80040a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040b0:	7a7b      	ldrb	r3, [r7, #9]
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040c6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	0d5b      	lsrs	r3, r3, #21
 80040d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040d6:	4b08      	ldr	r3, [pc, #32]	@ (80040f8 <I2C_TransferConfig+0x60>)
 80040d8:	430b      	orrs	r3, r1
 80040da:	43db      	mvns	r3, r3
 80040dc:	ea02 0103 	and.w	r1, r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	03ff63ff 	.word	0x03ff63ff

080040fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b20      	cmp	r3, #32
 8004110:	d138      	bne.n	8004184 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800411c:	2302      	movs	r3, #2
 800411e:	e032      	b.n	8004186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2224      	movs	r2, #36	@ 0x24
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800414e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d139      	bne.n	800421c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e033      	b.n	800421e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2224      	movs	r2, #36	@ 0x24
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	e000      	b.n	800421e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b086      	sub	sp, #24
 800422e:	af02      	add	r7, sp, #8
 8004230:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e108      	b.n	800444e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd fd9e 	bl	8001d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2203      	movs	r2, #3
 8004260:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800426a:	d102      	bne.n	8004272 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f003 f95a 	bl	8007530 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	7c1a      	ldrb	r2, [r3, #16]
 8004284:	f88d 2000 	strb.w	r2, [sp]
 8004288:	3304      	adds	r3, #4
 800428a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800428c:	f003 f8f6 	bl	800747c <USB_CoreInit>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0d5      	b.n	800444e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f003 f952 	bl	8007552 <USB_SetCurrentMode>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0c6      	b.n	800444e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e04a      	b.n	800435c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	3315      	adds	r3, #21
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042da:	7bfa      	ldrb	r2, [r7, #15]
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	3314      	adds	r3, #20
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	b298      	uxth	r0, r3
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	332e      	adds	r3, #46	@ 0x2e
 8004302:	4602      	mov	r2, r0
 8004304:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	3318      	adds	r3, #24
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800431a:	7bfa      	ldrb	r2, [r7, #15]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	331c      	adds	r3, #28
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3320      	adds	r3, #32
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	3324      	adds	r3, #36	@ 0x24
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	3301      	adds	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	791b      	ldrb	r3, [r3, #4]
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	429a      	cmp	r2, r3
 8004364:	d3af      	bcc.n	80042c6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	e044      	b.n	80043f6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004382:	7bfa      	ldrb	r2, [r7, #15]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	3301      	adds	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	791b      	ldrb	r3, [r3, #4]
 80043fa:	7bfa      	ldrb	r2, [r7, #15]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d3b5      	bcc.n	800436c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7c1a      	ldrb	r2, [r3, #16]
 8004408:	f88d 2000 	strb.w	r2, [sp]
 800440c:	3304      	adds	r3, #4
 800440e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004410:	f003 f8ec 	bl	80075ec <USB_DevInit>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e013      	b.n	800444e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7b1b      	ldrb	r3, [r3, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d102      	bne.n	8004442 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f80b 	bl	8004458 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f003 faa7 	bl	800799a <USB_DevDisconnect>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004486:	4b05      	ldr	r3, [pc, #20]	@ (800449c <HAL_PCDEx_ActivateLPM+0x44>)
 8004488:	4313      	orrs	r3, r2
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	10000003 	.word	0x10000003

080044a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a4:	4b05      	ldr	r3, [pc, #20]	@ (80044bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ae:	6013      	str	r3, [r2, #0]
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40007000 	.word	0x40007000

080044c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	4b23      	ldr	r3, [pc, #140]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x98>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x98>)
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d6:	4b20      	ldr	r3, [pc, #128]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x98>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044e2:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1d      	ldr	r2, [pc, #116]	@ (800455c <HAL_PWREx_EnableOverDrive+0x9c>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ee:	f7fd fe99 	bl	8002224 <HAL_GetTick>
 80044f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044f4:	e009      	b.n	800450a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044f6:	f7fd fe95 	bl	8002224 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004504:	d901      	bls.n	800450a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e022      	b.n	8004550 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800450a:	4b14      	ldr	r3, [pc, #80]	@ (800455c <HAL_PWREx_EnableOverDrive+0x9c>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004516:	d1ee      	bne.n	80044f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004518:	4b10      	ldr	r3, [pc, #64]	@ (800455c <HAL_PWREx_EnableOverDrive+0x9c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0f      	ldr	r2, [pc, #60]	@ (800455c <HAL_PWREx_EnableOverDrive+0x9c>)
 800451e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004522:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004524:	f7fd fe7e 	bl	8002224 <HAL_GetTick>
 8004528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800452a:	e009      	b.n	8004540 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800452c:	f7fd fe7a 	bl	8002224 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800453a:	d901      	bls.n	8004540 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e007      	b.n	8004550 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800454c:	d1ee      	bne.n	800452c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	40007000 	.word	0x40007000

08004560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004568:	2300      	movs	r3, #0
 800456a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e29b      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8087 	beq.w	8004692 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004584:	4b96      	ldr	r3, [pc, #600]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b04      	cmp	r3, #4
 800458e:	d00c      	beq.n	80045aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004590:	4b93      	ldr	r3, [pc, #588]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d112      	bne.n	80045c2 <HAL_RCC_OscConfig+0x62>
 800459c:	4b90      	ldr	r3, [pc, #576]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a8:	d10b      	bne.n	80045c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045aa:	4b8d      	ldr	r3, [pc, #564]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d06c      	beq.n	8004690 <HAL_RCC_OscConfig+0x130>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d168      	bne.n	8004690 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e275      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ca:	d106      	bne.n	80045da <HAL_RCC_OscConfig+0x7a>
 80045cc:	4b84      	ldr	r3, [pc, #528]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a83      	ldr	r2, [pc, #524]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	e02e      	b.n	8004638 <HAL_RCC_OscConfig+0xd8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x9c>
 80045e2:	4b7f      	ldr	r3, [pc, #508]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7e      	ldr	r2, [pc, #504]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b7c      	ldr	r3, [pc, #496]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7b      	ldr	r2, [pc, #492]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80045f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e01d      	b.n	8004638 <HAL_RCC_OscConfig+0xd8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0xc0>
 8004606:	4b76      	ldr	r3, [pc, #472]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a75      	ldr	r2, [pc, #468]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 800460c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b73      	ldr	r3, [pc, #460]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a72      	ldr	r2, [pc, #456]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0xd8>
 8004620:	4b6f      	ldr	r3, [pc, #444]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a6e      	ldr	r2, [pc, #440]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	4b6c      	ldr	r3, [pc, #432]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6b      	ldr	r2, [pc, #428]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d013      	beq.n	8004668 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd fdf0 	bl	8002224 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004648:	f7fd fdec 	bl	8002224 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	@ 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e229      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b61      	ldr	r3, [pc, #388]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0xe8>
 8004666:	e014      	b.n	8004692 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fd fddc 	bl	8002224 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004670:	f7fd fdd8 	bl	8002224 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	@ 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e215      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004682:	4b57      	ldr	r3, [pc, #348]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x110>
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d069      	beq.n	8004772 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800469e:	4b50      	ldr	r3, [pc, #320]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046aa:	4b4d      	ldr	r3, [pc, #308]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d11c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x190>
 80046b6:	4b4a      	ldr	r3, [pc, #296]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d116      	bne.n	80046f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c2:	4b47      	ldr	r3, [pc, #284]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_RCC_OscConfig+0x17a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d001      	beq.n	80046da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e1e9      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046da:	4b41      	ldr	r3, [pc, #260]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	493d      	ldr	r1, [pc, #244]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ee:	e040      	b.n	8004772 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d023      	beq.n	8004740 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f8:	4b39      	ldr	r3, [pc, #228]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a38      	ldr	r2, [pc, #224]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd fd8e 	bl	8002224 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470c:	f7fd fd8a 	bl	8002224 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e1c7      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471e:	4b30      	ldr	r3, [pc, #192]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472a:	4b2d      	ldr	r3, [pc, #180]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4929      	ldr	r1, [pc, #164]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]
 800473e:	e018      	b.n	8004772 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004740:	4b27      	ldr	r3, [pc, #156]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd fd6a 	bl	8002224 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004754:	f7fd fd66 	bl	8002224 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1a3      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004766:	4b1e      	ldr	r3, [pc, #120]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d038      	beq.n	80047f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d019      	beq.n	80047ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004786:	4b16      	ldr	r3, [pc, #88]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 8004788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800478a:	4a15      	ldr	r2, [pc, #84]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd fd47 	bl	8002224 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479a:	f7fd fd43 	bl	8002224 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e180      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ac:	4b0c      	ldr	r3, [pc, #48]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x23a>
 80047b8:	e01a      	b.n	80047f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ba:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047be:	4a08      	ldr	r2, [pc, #32]	@ (80047e0 <HAL_RCC_OscConfig+0x280>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c6:	f7fd fd2d 	bl	8002224 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ce:	f7fd fd29 	bl	8002224 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d903      	bls.n	80047e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e166      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
 80047e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e4:	4b92      	ldr	r3, [pc, #584]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80047e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ee      	bne.n	80047ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80a4 	beq.w	8004946 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10d      	bne.n	8004826 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800480a:	4b89      	ldr	r3, [pc, #548]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	4a88      	ldr	r2, [pc, #544]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004814:	6413      	str	r3, [r2, #64]	@ 0x40
 8004816:	4b86      	ldr	r3, [pc, #536]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004826:	4b83      	ldr	r3, [pc, #524]	@ (8004a34 <HAL_RCC_OscConfig+0x4d4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d118      	bne.n	8004864 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004832:	4b80      	ldr	r3, [pc, #512]	@ (8004a34 <HAL_RCC_OscConfig+0x4d4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a7f      	ldr	r2, [pc, #508]	@ (8004a34 <HAL_RCC_OscConfig+0x4d4>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800483c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800483e:	f7fd fcf1 	bl	8002224 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004846:	f7fd fced 	bl	8002224 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b64      	cmp	r3, #100	@ 0x64
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e12a      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004858:	4b76      	ldr	r3, [pc, #472]	@ (8004a34 <HAL_RCC_OscConfig+0x4d4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d106      	bne.n	800487a <HAL_RCC_OscConfig+0x31a>
 800486c:	4b70      	ldr	r3, [pc, #448]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004870:	4a6f      	ldr	r2, [pc, #444]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	@ 0x70
 8004878:	e02d      	b.n	80048d6 <HAL_RCC_OscConfig+0x376>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x33c>
 8004882:	4b6b      	ldr	r3, [pc, #428]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	4a6a      	ldr	r2, [pc, #424]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	6713      	str	r3, [r2, #112]	@ 0x70
 800488e:	4b68      	ldr	r3, [pc, #416]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	4a67      	ldr	r2, [pc, #412]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	6713      	str	r3, [r2, #112]	@ 0x70
 800489a:	e01c      	b.n	80048d6 <HAL_RCC_OscConfig+0x376>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d10c      	bne.n	80048be <HAL_RCC_OscConfig+0x35e>
 80048a4:	4b62      	ldr	r3, [pc, #392]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	4a61      	ldr	r2, [pc, #388]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048aa:	f043 0304 	orr.w	r3, r3, #4
 80048ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	4a5e      	ldr	r2, [pc, #376]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80048bc:	e00b      	b.n	80048d6 <HAL_RCC_OscConfig+0x376>
 80048be:	4b5c      	ldr	r3, [pc, #368]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ca:	4b59      	ldr	r3, [pc, #356]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	4a58      	ldr	r2, [pc, #352]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048d0:	f023 0304 	bic.w	r3, r3, #4
 80048d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d015      	beq.n	800490a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fd fca1 	bl	8002224 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fd fc9d 	bl	8002224 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0d8      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	4b4c      	ldr	r3, [pc, #304]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ee      	beq.n	80048e6 <HAL_RCC_OscConfig+0x386>
 8004908:	e014      	b.n	8004934 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fd fc8b 	bl	8002224 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fd fc87 	bl	8002224 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0c2      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004928:	4b41      	ldr	r3, [pc, #260]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ee      	bne.n	8004912 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 80ae 	beq.w	8004aac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004950:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d06d      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d14b      	bne.n	80049fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004964:	4b32      	ldr	r3, [pc, #200]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a31      	ldr	r2, [pc, #196]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 800496a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800496e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd fc58 	bl	8002224 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fd fc54 	bl	8002224 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e091      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	4b29      	ldr	r3, [pc, #164]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	3b01      	subs	r3, #1
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	491b      	ldr	r1, [pc, #108]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c8:	4b19      	ldr	r3, [pc, #100]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a18      	ldr	r2, [pc, #96]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80049ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fd fc26 	bl	8002224 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fd fc22 	bl	8002224 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e05f      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ee:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x47c>
 80049fa:	e057      	b.n	8004aac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0b      	ldr	r2, [pc, #44]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fd fc0c 	bl	8002224 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fd fc08 	bl	8002224 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e045      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a22:	4b03      	ldr	r3, [pc, #12]	@ (8004a30 <HAL_RCC_OscConfig+0x4d0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4b0>
 8004a2e:	e03d      	b.n	8004aac <HAL_RCC_OscConfig+0x54c>
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a38:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab8 <HAL_RCC_OscConfig+0x558>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d030      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d129      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d122      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d119      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	3b01      	subs	r3, #1
 8004a82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d10f      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800

08004abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0d0      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d910      	bls.n	8004b04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b67      	ldr	r3, [pc, #412]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 020f 	bic.w	r2, r3, #15
 8004aea:	4965      	ldr	r1, [pc, #404]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b63      	ldr	r3, [pc, #396]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0b8      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d020      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b1c:	4b59      	ldr	r3, [pc, #356]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a58      	ldr	r2, [pc, #352]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b34:	4b53      	ldr	r3, [pc, #332]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a52      	ldr	r2, [pc, #328]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b50      	ldr	r3, [pc, #320]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	494d      	ldr	r1, [pc, #308]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d040      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d115      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e07f      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7e:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e073      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e06b      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9e:	4b39      	ldr	r3, [pc, #228]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f023 0203 	bic.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4936      	ldr	r1, [pc, #216]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fd fb38 	bl	8002224 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb8:	f7fd fb34 	bl	8002224 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e053      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	4b2d      	ldr	r3, [pc, #180]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 020c 	and.w	r2, r3, #12
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1eb      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be0:	4b27      	ldr	r3, [pc, #156]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d210      	bcs.n	8004c10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 020f 	bic.w	r2, r3, #15
 8004bf6:	4922      	ldr	r1, [pc, #136]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b20      	ldr	r3, [pc, #128]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e032      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c1c:	4b19      	ldr	r3, [pc, #100]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4916      	ldr	r1, [pc, #88]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c3a:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	490e      	ldr	r1, [pc, #56]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c4e:	f000 f821 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8004c52:	4602      	mov	r2, r0
 8004c54:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	490a      	ldr	r1, [pc, #40]	@ (8004c88 <HAL_RCC_ClockConfig+0x1cc>)
 8004c60:	5ccb      	ldrb	r3, [r1, r3]
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	4a09      	ldr	r2, [pc, #36]	@ (8004c8c <HAL_RCC_ClockConfig+0x1d0>)
 8004c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c6a:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <HAL_RCC_ClockConfig+0x1d4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fd f90c 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023c00 	.word	0x40023c00
 8004c84:	40023800 	.word	0x40023800
 8004c88:	0800ce74 	.word	0x0800ce74
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	20000004 	.word	0x20000004

08004c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c98:	b094      	sub	sp, #80	@ 0x50
 8004c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cac:	4b79      	ldr	r3, [pc, #484]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d00d      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	f200 80e1 	bhi.w	8004e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d003      	beq.n	8004cce <HAL_RCC_GetSysClockFreq+0x3a>
 8004cc6:	e0db      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc8:	4b73      	ldr	r3, [pc, #460]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ccc:	e0db      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cce:	4b73      	ldr	r3, [pc, #460]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8004cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cd2:	e0d8      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004cde:	4b6d      	ldr	r3, [pc, #436]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d063      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cea:	4b6a      	ldr	r3, [pc, #424]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	099b      	lsrs	r3, r3, #6
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d06:	4622      	mov	r2, r4
 8004d08:	462b      	mov	r3, r5
 8004d0a:	f04f 0000 	mov.w	r0, #0
 8004d0e:	f04f 0100 	mov.w	r1, #0
 8004d12:	0159      	lsls	r1, r3, #5
 8004d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d18:	0150      	lsls	r0, r2, #5
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4621      	mov	r1, r4
 8004d20:	1a51      	subs	r1, r2, r1
 8004d22:	6139      	str	r1, [r7, #16]
 8004d24:	4629      	mov	r1, r5
 8004d26:	eb63 0301 	sbc.w	r3, r3, r1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d38:	4659      	mov	r1, fp
 8004d3a:	018b      	lsls	r3, r1, #6
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d42:	4651      	mov	r1, sl
 8004d44:	018a      	lsls	r2, r1, #6
 8004d46:	4651      	mov	r1, sl
 8004d48:	ebb2 0801 	subs.w	r8, r2, r1
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d66:	4690      	mov	r8, r2
 8004d68:	4699      	mov	r9, r3
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	eb18 0303 	adds.w	r3, r8, r3
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	462b      	mov	r3, r5
 8004d74:	eb49 0303 	adc.w	r3, r9, r3
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d86:	4629      	mov	r1, r5
 8004d88:	024b      	lsls	r3, r1, #9
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d90:	4621      	mov	r1, r4
 8004d92:	024a      	lsls	r2, r1, #9
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004da4:	f7fb faa4 	bl	80002f0 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4613      	mov	r3, r2
 8004dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db0:	e058      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db2:	4b38      	ldr	r3, [pc, #224]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	099b      	lsrs	r3, r3, #6
 8004db8:	2200      	movs	r2, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	f04f 0000 	mov.w	r0, #0
 8004dd4:	f04f 0100 	mov.w	r1, #0
 8004dd8:	0159      	lsls	r1, r3, #5
 8004dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dde:	0150      	lsls	r0, r2, #5
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4641      	mov	r1, r8
 8004de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dea:	4649      	mov	r1, r9
 8004dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e04:	ebb2 040a 	subs.w	r4, r2, sl
 8004e08:	eb63 050b 	sbc.w	r5, r3, fp
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	00eb      	lsls	r3, r5, #3
 8004e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e1a:	00e2      	lsls	r2, r4, #3
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	461d      	mov	r5, r3
 8004e20:	4643      	mov	r3, r8
 8004e22:	18e3      	adds	r3, r4, r3
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	464b      	mov	r3, r9
 8004e28:	eb45 0303 	adc.w	r3, r5, r3
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	028b      	lsls	r3, r1, #10
 8004e3e:	4621      	mov	r1, r4
 8004e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e44:	4621      	mov	r1, r4
 8004e46:	028a      	lsls	r2, r1, #10
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	61fa      	str	r2, [r7, #28]
 8004e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e58:	f7fb fa4a 	bl	80002f0 <__aeabi_uldivmod>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4613      	mov	r3, r2
 8004e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e64:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	0c1b      	lsrs	r3, r3, #16
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e7e:	e002      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3750      	adds	r7, #80	@ 0x50
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
 8004e98:	00f42400 	.word	0x00f42400
 8004e9c:	007a1200 	.word	0x007a1200

08004ea0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea4:	4b03      	ldr	r3, [pc, #12]	@ (8004eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000000 	.word	0x20000000

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ebc:	f7ff fff0 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0a9b      	lsrs	r3, r3, #10
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4903      	ldr	r1, [pc, #12]	@ (8004edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	0800ce84 	.word	0x0800ce84

08004ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ee4:	f7ff ffdc 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	0b5b      	lsrs	r3, r3, #13
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4903      	ldr	r1, [pc, #12]	@ (8004f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40023800 	.word	0x40023800
 8004f04:	0800ce84 	.word	0x0800ce84

08004f08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	220f      	movs	r2, #15
 8004f16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f18:	4b12      	ldr	r3, [pc, #72]	@ (8004f64 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0203 	and.w	r2, r3, #3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f24:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <HAL_RCC_GetClockConfig+0x5c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f30:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <HAL_RCC_GetClockConfig+0x5c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004f3c:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	08db      	lsrs	r3, r3, #3
 8004f42:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f4a:	4b07      	ldr	r3, [pc, #28]	@ (8004f68 <HAL_RCC_GetClockConfig+0x60>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 020f 	and.w	r2, r3, #15
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	601a      	str	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
 8004f68:	40023c00 	.word	0x40023c00

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d012      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f94:	4b69      	ldr	r3, [pc, #420]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4a68      	ldr	r2, [pc, #416]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f9e:	6093      	str	r3, [r2, #8]
 8004fa0:	4b66      	ldr	r3, [pc, #408]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa8:	4964      	ldr	r1, [pc, #400]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d017      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fcc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd4:	4959      	ldr	r1, [pc, #356]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe4:	d101      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d017      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005002:	4b4e      	ldr	r3, [pc, #312]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005008:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	494a      	ldr	r1, [pc, #296]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005020:	d101      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005022:	2301      	movs	r3, #1
 8005024:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800502e:	2301      	movs	r3, #1
 8005030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800503e:	2301      	movs	r3, #1
 8005040:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 808b 	beq.w	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005050:	4b3a      	ldr	r3, [pc, #232]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	4a39      	ldr	r2, [pc, #228]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800505a:	6413      	str	r3, [r2, #64]	@ 0x40
 800505c:	4b37      	ldr	r3, [pc, #220]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005068:	4b35      	ldr	r3, [pc, #212]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a34      	ldr	r2, [pc, #208]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800506e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005074:	f7fd f8d6 	bl	8002224 <HAL_GetTick>
 8005078:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507c:	f7fd f8d2 	bl	8002224 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	@ 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e38f      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800508e:	4b2c      	ldr	r3, [pc, #176]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800509a:	4b28      	ldr	r3, [pc, #160]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d035      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d02e      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b8:	4b20      	ldr	r3, [pc, #128]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c2:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050cc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ce:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d2:	4a1a      	ldr	r2, [pc, #104]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80050da:	4a18      	ldr	r2, [pc, #96]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050e0:	4b16      	ldr	r3, [pc, #88]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d114      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd f89a 	bl	8002224 <HAL_GetTick>
 80050f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f2:	e00a      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fd f896 	bl	8002224 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e351      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510a:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0ee      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800511e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005122:	d111      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005124:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005130:	4b04      	ldr	r3, [pc, #16]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005132:	400b      	ands	r3, r1
 8005134:	4901      	ldr	r1, [pc, #4]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
 800513a:	e00b      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800513c:	40023800 	.word	0x40023800
 8005140:	40007000 	.word	0x40007000
 8005144:	0ffffcff 	.word	0x0ffffcff
 8005148:	4bac      	ldr	r3, [pc, #688]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4aab      	ldr	r2, [pc, #684]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005152:	6093      	str	r3, [r2, #8]
 8005154:	4ba9      	ldr	r3, [pc, #676]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005156:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005160:	49a6      	ldr	r1, [pc, #664]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005162:	4313      	orrs	r3, r2
 8005164:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	d010      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005172:	4ba2      	ldr	r3, [pc, #648]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005178:	4aa0      	ldr	r2, [pc, #640]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800517e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005182:	4b9e      	ldr	r3, [pc, #632]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005184:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	499b      	ldr	r1, [pc, #620]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a0:	4b96      	ldr	r3, [pc, #600]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ae:	4993      	ldr	r1, [pc, #588]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051c2:	4b8e      	ldr	r3, [pc, #568]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051d0:	498a      	ldr	r1, [pc, #552]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051e4:	4b85      	ldr	r3, [pc, #532]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f2:	4982      	ldr	r1, [pc, #520]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005206:	4b7d      	ldr	r3, [pc, #500]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005214:	4979      	ldr	r1, [pc, #484]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005228:	4b74      	ldr	r3, [pc, #464]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522e:	f023 0203 	bic.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	4971      	ldr	r1, [pc, #452]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800524a:	4b6c      	ldr	r3, [pc, #432]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f023 020c 	bic.w	r2, r3, #12
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005258:	4968      	ldr	r1, [pc, #416]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800526c:	4b63      	ldr	r3, [pc, #396]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005272:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527a:	4960      	ldr	r1, [pc, #384]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800528e:	4b5b      	ldr	r3, [pc, #364]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005294:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800529c:	4957      	ldr	r1, [pc, #348]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052b0:	4b52      	ldr	r3, [pc, #328]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	494f      	ldr	r1, [pc, #316]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052d2:	4b4a      	ldr	r3, [pc, #296]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e0:	4946      	ldr	r1, [pc, #280]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80052f4:	4b41      	ldr	r3, [pc, #260]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005302:	493e      	ldr	r1, [pc, #248]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005316:	4b39      	ldr	r3, [pc, #228]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005324:	4935      	ldr	r1, [pc, #212]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005338:	4b30      	ldr	r3, [pc, #192]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005346:	492d      	ldr	r1, [pc, #180]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d011      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800535a:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005360:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005368:	4924      	ldr	r1, [pc, #144]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005378:	d101      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800538a:	2301      	movs	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800539a:	4b18      	ldr	r3, [pc, #96]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a8:	4914      	ldr	r1, [pc, #80]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00b      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053bc:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053cc:	490b      	ldr	r1, [pc, #44]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00f      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80053e0:	4b06      	ldr	r3, [pc, #24]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f0:	4902      	ldr	r1, [pc, #8]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053f8:	e002      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80053fa:	bf00      	nop
 80053fc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00b      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800540c:	4b8a      	ldr	r3, [pc, #552]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800540e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005412:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541c:	4986      	ldr	r1, [pc, #536]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00b      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005430:	4b81      	ldr	r3, [pc, #516]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005436:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005440:	497d      	ldr	r1, [pc, #500]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d006      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80d6 	beq.w	8005608 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800545c:	4b76      	ldr	r3, [pc, #472]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a75      	ldr	r2, [pc, #468]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005462:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005468:	f7fc fedc 	bl	8002224 <HAL_GetTick>
 800546c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005470:	f7fc fed8 	bl	8002224 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	@ 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e195      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005482:	4b6d      	ldr	r3, [pc, #436]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d021      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x572>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d11d      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054a2:	4b65      	ldr	r3, [pc, #404]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054b0:	4b61      	ldr	r3, [pc, #388]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b6:	0e1b      	lsrs	r3, r3, #24
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	019a      	lsls	r2, r3, #6
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	431a      	orrs	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	061b      	lsls	r3, r3, #24
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	071b      	lsls	r3, r3, #28
 80054d6:	4958      	ldr	r1, [pc, #352]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054f2:	d00a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d02e      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005508:	d129      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800550a:	4b4b      	ldr	r3, [pc, #300]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005518:	4b47      	ldr	r3, [pc, #284]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800551e:	0f1b      	lsrs	r3, r3, #28
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	019a      	lsls	r2, r3, #6
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	071b      	lsls	r3, r3, #28
 800553e:	493e      	ldr	r1, [pc, #248]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005546:	4b3c      	ldr	r3, [pc, #240]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800554c:	f023 021f 	bic.w	r2, r3, #31
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	3b01      	subs	r3, #1
 8005556:	4938      	ldr	r1, [pc, #224]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01d      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800556a:	4b33      	ldr	r3, [pc, #204]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800556c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005578:	4b2f      	ldr	r3, [pc, #188]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800557e:	0f1b      	lsrs	r3, r3, #28
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	019a      	lsls	r2, r3, #6
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	431a      	orrs	r2, r3
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	061b      	lsls	r3, r3, #24
 8005598:	431a      	orrs	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	071b      	lsls	r3, r3, #28
 800559e:	4926      	ldr	r1, [pc, #152]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d011      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	019a      	lsls	r2, r3, #6
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	071b      	lsls	r3, r3, #28
 80055ce:	491a      	ldr	r1, [pc, #104]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055d6:	4b18      	ldr	r3, [pc, #96]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a17      	ldr	r2, [pc, #92]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e2:	f7fc fe1f 	bl	8002224 <HAL_GetTick>
 80055e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055e8:	e008      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055ea:	f7fc fe1b 	bl	8002224 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b64      	cmp	r3, #100	@ 0x64
 80055f6:	d901      	bls.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e0d8      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 80ce 	bne.w	80057ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005610:	4b09      	ldr	r3, [pc, #36]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a08      	ldr	r2, [pc, #32]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800561a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fc fe02 	bl	8002224 <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005622:	e00b      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005624:	f7fc fdfe 	bl	8002224 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	@ 0x64
 8005630:	d904      	bls.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0bb      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800563c:	4b5e      	ldr	r3, [pc, #376]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005648:	d0ec      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005666:	2b00      	cmp	r3, #0
 8005668:	d02e      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d12a      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005672:	4b51      	ldr	r3, [pc, #324]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005680:	4b4d      	ldr	r3, [pc, #308]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	0f1b      	lsrs	r3, r3, #28
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	019a      	lsls	r2, r3, #6
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	061b      	lsls	r3, r3, #24
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	071b      	lsls	r3, r3, #28
 80056a6:	4944      	ldr	r1, [pc, #272]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056ae:	4b42      	ldr	r3, [pc, #264]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	3b01      	subs	r3, #1
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	493d      	ldr	r1, [pc, #244]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d022      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056dc:	d11d      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056de:	4b36      	ldr	r3, [pc, #216]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056ec:	4b32      	ldr	r3, [pc, #200]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	0f1b      	lsrs	r3, r3, #28
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	019a      	lsls	r2, r3, #6
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	431a      	orrs	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	061b      	lsls	r3, r3, #24
 800570c:	431a      	orrs	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	4929      	ldr	r1, [pc, #164]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d028      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005726:	4b24      	ldr	r3, [pc, #144]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572c:	0e1b      	lsrs	r3, r3, #24
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005734:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	019a      	lsls	r2, r3, #6
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	041b      	lsls	r3, r3, #16
 800574c:	431a      	orrs	r2, r3
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	071b      	lsls	r3, r3, #28
 800575a:	4917      	ldr	r1, [pc, #92]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005762:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005768:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	4911      	ldr	r1, [pc, #68]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005778:	4b0f      	ldr	r3, [pc, #60]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0e      	ldr	r2, [pc, #56]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800577e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005784:	f7fc fd4e 	bl	8002224 <HAL_GetTick>
 8005788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800578a:	e008      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800578c:	f7fc fd4a 	bl	8002224 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	@ 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e007      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800579e:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057aa:	d1ef      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800

080057bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e09d      	b.n	800590a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d108      	bne.n	80057e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057de:	d009      	beq.n	80057f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	61da      	str	r2, [r3, #28]
 80057e6:	e005      	b.n	80057f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc f974 	bl	8001afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800582a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005834:	d902      	bls.n	800583c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	e002      	b.n	8005842 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800583c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005840:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800584a:	d007      	beq.n	800585c <HAL_SPI_Init+0xa0>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005854:	d002      	beq.n	800585c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589e:	ea42 0103 	orr.w	r1, r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	f003 0204 	and.w	r2, r3, #4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80058d8:	ea42 0103 	orr.w	r1, r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08a      	sub	sp, #40	@ 0x28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005920:	2301      	movs	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005924:	f7fc fc7e 	bl	8002224 <HAL_GetTick>
 8005928:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005930:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005938:	887b      	ldrh	r3, [r7, #2]
 800593a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800593c:	887b      	ldrh	r3, [r7, #2]
 800593e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005940:	7ffb      	ldrb	r3, [r7, #31]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d00c      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x4e>
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800594c:	d106      	bne.n	800595c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <HAL_SPI_TransmitReceive+0x4a>
 8005956:	7ffb      	ldrb	r3, [r7, #31]
 8005958:	2b04      	cmp	r3, #4
 800595a:	d001      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
 800595e:	e1f3      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x60>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x60>
 800596c:	887b      	ldrh	r3, [r7, #2]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e1e8      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x72>
 8005980:	2302      	movs	r3, #2
 8005982:	e1e1      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x436>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b04      	cmp	r3, #4
 8005996:	d003      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2205      	movs	r2, #5
 800599c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	887a      	ldrh	r2, [r7, #2]
 80059b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059e2:	d802      	bhi.n	80059ea <HAL_SPI_TransmitReceive+0xd8>
 80059e4:	8abb      	ldrh	r3, [r7, #20]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d908      	bls.n	80059fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	e007      	b.n	8005a0c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a0a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b40      	cmp	r3, #64	@ 0x40
 8005a18:	d007      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a32:	f240 8083 	bls.w	8005b3c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_SPI_TransmitReceive+0x132>
 8005a3e:	8afb      	ldrh	r3, [r7, #22]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d16f      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a68:	e05c      	b.n	8005b24 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d11b      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x19e>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d016      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x19e>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d113      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d11c      	bne.n	8005af8 <HAL_SPI_TransmitReceive+0x1e6>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d016      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad4:	b292      	uxth	r2, r2
 8005ad6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	1c9a      	adds	r2, r3, #2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005af4:	2301      	movs	r3, #1
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005af8:	f7fc fb94 	bl	8002224 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d80d      	bhi.n	8005b24 <HAL_SPI_TransmitReceive+0x212>
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0e:	d009      	beq.n	8005b24 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e111      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d19d      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x158>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d197      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x158>
 8005b3a:	e0e5      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x23a>
 8005b44:	8afb      	ldrh	r3, [r7, #22]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	f040 80d1 	bne.w	8005cee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d912      	bls.n	8005b7c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	881a      	ldrh	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	1c9a      	adds	r2, r3, #2
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b02      	subs	r3, #2
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b7a:	e0b8      	b.n	8005cee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	7812      	ldrb	r2, [r2, #0]
 8005b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba2:	e0a4      	b.n	8005cee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d134      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x30a>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02f      	beq.n	8005c1c <HAL_SPI_TransmitReceive+0x30a>
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d12c      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d912      	bls.n	8005bf2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd0:	881a      	ldrh	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bdc:	1c9a      	adds	r2, r3, #2
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b02      	subs	r3, #2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bf0:	e012      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	7812      	ldrb	r2, [r2, #0]
 8005bfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d148      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x3aa>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d042      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d923      	bls.n	8005c8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4c:	b292      	uxth	r2, r2
 8005c4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b02      	subs	r3, #2
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d81f      	bhi.n	8005cb8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c86:	605a      	str	r2, [r3, #4]
 8005c88:	e016      	b.n	8005cb8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f103 020c 	add.w	r2, r3, #12
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cbc:	f7fc fab2 	bl	8002224 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d803      	bhi.n	8005cd4 <HAL_SPI_TransmitReceive+0x3c2>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d102      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x3c8>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e02c      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f47f af55 	bne.w	8005ba4 <HAL_SPI_TransmitReceive+0x292>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f47f af4e 	bne.w	8005ba4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d08:	6a3a      	ldr	r2, [r7, #32]
 8005d0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f93d 	bl	8005f8c <SPI_EndRxTxTransaction>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e00e      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005d46:	2300      	movs	r3, #0
  }
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3728      	adds	r7, #40	@ 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d60:	f7fc fa60 	bl	8002224 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d70:	f7fc fa58 	bl	8002224 <HAL_GetTick>
 8005d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d76:	4b39      	ldr	r3, [pc, #228]	@ (8005e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	015b      	lsls	r3, r3, #5
 8005d7c:	0d1b      	lsrs	r3, r3, #20
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d86:	e055      	b.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d051      	beq.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d90:	f7fc fa48 	bl	8002224 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d902      	bls.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d13d      	bne.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dbe:	d111      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc8:	d004      	beq.n	8005dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd2:	d107      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dec:	d10f      	bne.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e018      	b.n	8005e54 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	e002      	b.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d19a      	bne.n	8005d88 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000000 	.word	0x20000000

08005e60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	@ 0x28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e72:	f7fc f9d7 	bl	8002224 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	4413      	add	r3, r2
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005e82:	f7fc f9cf 	bl	8002224 <HAL_GetTick>
 8005e86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e90:	4b3d      	ldr	r3, [pc, #244]	@ (8005f88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	00da      	lsls	r2, r3, #3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	0d1b      	lsrs	r3, r3, #20
 8005ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ea8:	e061      	b.n	8005f6e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005eb0:	d107      	bne.n	8005ec2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d051      	beq.n	8005f6e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eca:	f7fc f9ab 	bl	8002224 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d902      	bls.n	8005ee0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d13d      	bne.n	8005f5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005eee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ef8:	d111      	bne.n	8005f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f02:	d004      	beq.n	8005f0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f0c:	d107      	bne.n	8005f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f26:	d10f      	bne.n	8005f48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e011      	b.n	8005f80 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f66:	e002      	b.n	8005f6e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d195      	bne.n	8005eaa <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3728      	adds	r7, #40	@ 0x28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000000 	.word	0x20000000

08005f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff ff5b 	bl	8005e60 <SPI_WaitFifoStateUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e046      	b.n	800604e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fc0:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <SPI_EndRxTxTransaction+0xcc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a25      	ldr	r2, [pc, #148]	@ (800605c <SPI_EndRxTxTransaction+0xd0>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	0d5b      	lsrs	r3, r3, #21
 8005fcc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fde:	d112      	bne.n	8006006 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2180      	movs	r1, #128	@ 0x80
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff feb0 	bl	8005d50 <SPI_WaitFlagStateUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffa:	f043 0220 	orr.w	r2, r3, #32
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e023      	b.n	800604e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3b01      	subs	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601c:	2b80      	cmp	r3, #128	@ 0x80
 800601e:	d0f2      	beq.n	8006006 <SPI_EndRxTxTransaction+0x7a>
 8006020:	e000      	b.n	8006024 <SPI_EndRxTxTransaction+0x98>
        break;
 8006022:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2200      	movs	r2, #0
 800602c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff ff15 	bl	8005e60 <SPI_WaitFifoStateUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006040:	f043 0220 	orr.w	r2, r3, #32
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e000      	b.n	800604e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000000 	.word	0x20000000
 800605c:	165e9f81 	.word	0x165e9f81

08006060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e049      	b.n	8006106 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fb fd9a 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f000 faa8 	bl	80065f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	d001      	beq.n	8006128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e054      	b.n	80061d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a26      	ldr	r2, [pc, #152]	@ (80061e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d022      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x80>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006152:	d01d      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x80>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a22      	ldr	r2, [pc, #136]	@ (80061e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d018      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x80>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a21      	ldr	r2, [pc, #132]	@ (80061e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d013      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x80>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <HAL_TIM_Base_Start_IT+0xdc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00e      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x80>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1e      	ldr	r2, [pc, #120]	@ (80061f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d009      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x80>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1c      	ldr	r2, [pc, #112]	@ (80061f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x80>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1b      	ldr	r2, [pc, #108]	@ (80061f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d115      	bne.n	80061bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	4b19      	ldr	r3, [pc, #100]	@ (80061fc <HAL_TIM_Base_Start_IT+0xec>)
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b06      	cmp	r3, #6
 80061a0:	d015      	beq.n	80061ce <HAL_TIM_Base_Start_IT+0xbe>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a8:	d011      	beq.n	80061ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	e008      	b.n	80061ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	e000      	b.n	80061d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800
 80061ec:	40000c00 	.word	0x40000c00
 80061f0:	40010400 	.word	0x40010400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40001800 	.word	0x40001800
 80061fc:	00010007 	.word	0x00010007

08006200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d020      	beq.n	8006264 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01b      	beq.n	8006264 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0202 	mvn.w	r2, #2
 8006234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f9b4 	bl	80065b8 <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f9a6 	bl	80065a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f9b7 	bl	80065cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d020      	beq.n	80062b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01b      	beq.n	80062b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0204 	mvn.w	r2, #4
 8006280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f98e 	bl	80065b8 <HAL_TIM_IC_CaptureCallback>
 800629c:	e005      	b.n	80062aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f980 	bl	80065a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f991 	bl	80065cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d020      	beq.n	80062fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01b      	beq.n	80062fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0208 	mvn.w	r2, #8
 80062cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2204      	movs	r2, #4
 80062d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f968 	bl	80065b8 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f95a 	bl	80065a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f96b 	bl	80065cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	d020      	beq.n	8006348 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01b      	beq.n	8006348 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0210 	mvn.w	r2, #16
 8006318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2208      	movs	r2, #8
 800631e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f942 	bl	80065b8 <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f934 	bl	80065a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f945 	bl	80065cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00c      	beq.n	800636c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0201 	mvn.w	r2, #1
 8006364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fb f800 	bl	800136c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fb05 	bl	80069a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00c      	beq.n	80063be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fafd 	bl	80069b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00c      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f8ff 	bl	80065e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f06f 0220 	mvn.w	r2, #32
 80063fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fac5 	bl	8006990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIM_ConfigClockSource+0x1c>
 8006428:	2302      	movs	r3, #2
 800642a:	e0b4      	b.n	8006596 <HAL_TIM_ConfigClockSource+0x186>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	4b56      	ldr	r3, [pc, #344]	@ (80065a0 <HAL_TIM_ConfigClockSource+0x190>)
 8006448:	4013      	ands	r3, r2
 800644a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006464:	d03e      	beq.n	80064e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646a:	f200 8087 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x16c>
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006472:	f000 8086 	beq.w	8006582 <HAL_TIM_ConfigClockSource+0x172>
 8006476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647a:	d87f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 800647c:	2b70      	cmp	r3, #112	@ 0x70
 800647e:	d01a      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006480:	2b70      	cmp	r3, #112	@ 0x70
 8006482:	d87b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 8006484:	2b60      	cmp	r3, #96	@ 0x60
 8006486:	d050      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x11a>
 8006488:	2b60      	cmp	r3, #96	@ 0x60
 800648a:	d877      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 800648c:	2b50      	cmp	r3, #80	@ 0x50
 800648e:	d03c      	beq.n	800650a <HAL_TIM_ConfigClockSource+0xfa>
 8006490:	2b50      	cmp	r3, #80	@ 0x50
 8006492:	d873      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 8006494:	2b40      	cmp	r3, #64	@ 0x40
 8006496:	d058      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x13a>
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	d86f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 800649c:	2b30      	cmp	r3, #48	@ 0x30
 800649e:	d064      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15a>
 80064a0:	2b30      	cmp	r3, #48	@ 0x30
 80064a2:	d86b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d060      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15a>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d867      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d05c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15a>
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d05a      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x15a>
 80064b4:	e062      	b.n	800657c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064c6:	f000 f9b5 	bl	8006834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	609a      	str	r2, [r3, #8]
      break;
 80064e2:	e04f      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064f4:	f000 f99e 	bl	8006834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006506:	609a      	str	r2, [r3, #8]
      break;
 8006508:	e03c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006516:	461a      	mov	r2, r3
 8006518:	f000 f912 	bl	8006740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2150      	movs	r1, #80	@ 0x50
 8006522:	4618      	mov	r0, r3
 8006524:	f000 f96b 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 8006528:	e02c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006536:	461a      	mov	r2, r3
 8006538:	f000 f931 	bl	800679e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2160      	movs	r1, #96	@ 0x60
 8006542:	4618      	mov	r0, r3
 8006544:	f000 f95b 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 8006548:	e01c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006556:	461a      	mov	r2, r3
 8006558:	f000 f8f2 	bl	8006740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2140      	movs	r1, #64	@ 0x40
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f94b 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 8006568:	e00c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f000 f942 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 800657a:	e003      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      break;
 8006580:	e000      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	fffeff88 	.word	0xfffeff88

080065a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a43      	ldr	r2, [pc, #268]	@ (8006714 <TIM_Base_SetConfig+0x120>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006612:	d00f      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a40      	ldr	r2, [pc, #256]	@ (8006718 <TIM_Base_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00b      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a3f      	ldr	r2, [pc, #252]	@ (800671c <TIM_Base_SetConfig+0x128>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d007      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a3e      	ldr	r2, [pc, #248]	@ (8006720 <TIM_Base_SetConfig+0x12c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a3d      	ldr	r2, [pc, #244]	@ (8006724 <TIM_Base_SetConfig+0x130>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d108      	bne.n	8006646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a32      	ldr	r2, [pc, #200]	@ (8006714 <TIM_Base_SetConfig+0x120>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d02b      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006654:	d027      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2f      	ldr	r2, [pc, #188]	@ (8006718 <TIM_Base_SetConfig+0x124>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d023      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2e      	ldr	r2, [pc, #184]	@ (800671c <TIM_Base_SetConfig+0x128>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01f      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2d      	ldr	r2, [pc, #180]	@ (8006720 <TIM_Base_SetConfig+0x12c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01b      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2c      	ldr	r2, [pc, #176]	@ (8006724 <TIM_Base_SetConfig+0x130>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d017      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2b      	ldr	r2, [pc, #172]	@ (8006728 <TIM_Base_SetConfig+0x134>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a2a      	ldr	r2, [pc, #168]	@ (800672c <TIM_Base_SetConfig+0x138>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00f      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a29      	ldr	r2, [pc, #164]	@ (8006730 <TIM_Base_SetConfig+0x13c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00b      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a28      	ldr	r2, [pc, #160]	@ (8006734 <TIM_Base_SetConfig+0x140>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d007      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a27      	ldr	r2, [pc, #156]	@ (8006738 <TIM_Base_SetConfig+0x144>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d003      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a26      	ldr	r2, [pc, #152]	@ (800673c <TIM_Base_SetConfig+0x148>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d108      	bne.n	80066b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006714 <TIM_Base_SetConfig+0x120>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_Base_SetConfig+0xf2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a10      	ldr	r2, [pc, #64]	@ (8006724 <TIM_Base_SetConfig+0x130>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d103      	bne.n	80066ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f043 0204 	orr.w	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	601a      	str	r2, [r3, #0]
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40010000 	.word	0x40010000
 8006718:	40000400 	.word	0x40000400
 800671c:	40000800 	.word	0x40000800
 8006720:	40000c00 	.word	0x40000c00
 8006724:	40010400 	.word	0x40010400
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800
 8006734:	40001800 	.word	0x40001800
 8006738:	40001c00 	.word	0x40001c00
 800673c:	40002000 	.word	0x40002000

08006740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800676a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 030a 	bic.w	r3, r3, #10
 800677c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679e:	b480      	push	{r7}
 80067a0:	b087      	sub	sp, #28
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f023 0210 	bic.w	r2, r3, #16
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	031b      	lsls	r3, r3, #12
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	f043 0307 	orr.w	r3, r3, #7
 8006820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	609a      	str	r2, [r3, #8]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800684e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	431a      	orrs	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4313      	orrs	r3, r2
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006888:	2302      	movs	r3, #2
 800688a:	e06d      	b.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a30      	ldr	r2, [pc, #192]	@ (8006974 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d108      	bne.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a20      	ldr	r2, [pc, #128]	@ (8006974 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d022      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fe:	d01d      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1d      	ldr	r2, [pc, #116]	@ (800697c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d018      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1c      	ldr	r2, [pc, #112]	@ (8006980 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1a      	ldr	r2, [pc, #104]	@ (8006984 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00e      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a15      	ldr	r2, [pc, #84]	@ (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d009      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a16      	ldr	r2, [pc, #88]	@ (8006988 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a15      	ldr	r2, [pc, #84]	@ (800698c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d10c      	bne.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006942:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40010000 	.word	0x40010000
 8006978:	40010400 	.word	0x40010400
 800697c:	40000400 	.word	0x40000400
 8006980:	40000800 	.word	0x40000800
 8006984:	40000c00 	.word	0x40000c00
 8006988:	40014000 	.word	0x40014000
 800698c:	40001800 	.word	0x40001800

08006990 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e040      	b.n	8006a60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fb f90c 	bl	8001c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2224      	movs	r2, #36	@ 0x24
 80069f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0201 	bic.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fb16 	bl	8007044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f8af 	bl	8006b7c <UART_SetConfig>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e01b      	b.n	8006a60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fb95 	bl	8007188 <UART_CheckIdleState>
 8006a5e:	4603      	mov	r3, r0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	@ 0x28
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4613      	mov	r3, r2
 8006a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d177      	bne.n	8006b70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_UART_Transmit+0x24>
 8006a86:	88fb      	ldrh	r3, [r7, #6]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e070      	b.n	8006b72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2221      	movs	r2, #33	@ 0x21
 8006a9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a9e:	f7fb fbc1 	bl	8002224 <HAL_GetTick>
 8006aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	88fa      	ldrh	r2, [r7, #6]
 8006aa8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	88fa      	ldrh	r2, [r7, #6]
 8006ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006abc:	d108      	bne.n	8006ad0 <HAL_UART_Transmit+0x68>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d104      	bne.n	8006ad0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	e003      	b.n	8006ad8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ad8:	e02f      	b.n	8006b3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2180      	movs	r1, #128	@ 0x80
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fbf7 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e03b      	b.n	8006b72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	3302      	adds	r3, #2
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e007      	b.n	8006b28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	781a      	ldrb	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1c9      	bne.n	8006ada <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2140      	movs	r1, #64	@ 0x40
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fbc1 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d004      	beq.n	8006b66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e005      	b.n	8006b72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e000      	b.n	8006b72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
  }
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4ba6      	ldr	r3, [pc, #664]	@ (8006e40 <UART_SetConfig+0x2c4>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	6979      	ldr	r1, [r7, #20]
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a94      	ldr	r2, [pc, #592]	@ (8006e44 <UART_SetConfig+0x2c8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d120      	bne.n	8006c3a <UART_SetConfig+0xbe>
 8006bf8:	4b93      	ldr	r3, [pc, #588]	@ (8006e48 <UART_SetConfig+0x2cc>)
 8006bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d816      	bhi.n	8006c34 <UART_SetConfig+0xb8>
 8006c06:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <UART_SetConfig+0x90>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c1d 	.word	0x08006c1d
 8006c10:	08006c29 	.word	0x08006c29
 8006c14:	08006c23 	.word	0x08006c23
 8006c18:	08006c2f 	.word	0x08006c2f
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e150      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006c22:	2302      	movs	r3, #2
 8006c24:	77fb      	strb	r3, [r7, #31]
 8006c26:	e14d      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	77fb      	strb	r3, [r7, #31]
 8006c2c:	e14a      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006c2e:	2308      	movs	r3, #8
 8006c30:	77fb      	strb	r3, [r7, #31]
 8006c32:	e147      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006c34:	2310      	movs	r3, #16
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e144      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a83      	ldr	r2, [pc, #524]	@ (8006e4c <UART_SetConfig+0x2d0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d132      	bne.n	8006caa <UART_SetConfig+0x12e>
 8006c44:	4b80      	ldr	r3, [pc, #512]	@ (8006e48 <UART_SetConfig+0x2cc>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c4a:	f003 030c 	and.w	r3, r3, #12
 8006c4e:	2b0c      	cmp	r3, #12
 8006c50:	d828      	bhi.n	8006ca4 <UART_SetConfig+0x128>
 8006c52:	a201      	add	r2, pc, #4	@ (adr r2, 8006c58 <UART_SetConfig+0xdc>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c8d 	.word	0x08006c8d
 8006c5c:	08006ca5 	.word	0x08006ca5
 8006c60:	08006ca5 	.word	0x08006ca5
 8006c64:	08006ca5 	.word	0x08006ca5
 8006c68:	08006c99 	.word	0x08006c99
 8006c6c:	08006ca5 	.word	0x08006ca5
 8006c70:	08006ca5 	.word	0x08006ca5
 8006c74:	08006ca5 	.word	0x08006ca5
 8006c78:	08006c93 	.word	0x08006c93
 8006c7c:	08006ca5 	.word	0x08006ca5
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006c9f 	.word	0x08006c9f
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e118      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006c92:	2302      	movs	r3, #2
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e115      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e112      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	77fb      	strb	r3, [r7, #31]
 8006ca2:	e10f      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	e10c      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a68      	ldr	r2, [pc, #416]	@ (8006e50 <UART_SetConfig+0x2d4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d120      	bne.n	8006cf6 <UART_SetConfig+0x17a>
 8006cb4:	4b64      	ldr	r3, [pc, #400]	@ (8006e48 <UART_SetConfig+0x2cc>)
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cbe:	2b30      	cmp	r3, #48	@ 0x30
 8006cc0:	d013      	beq.n	8006cea <UART_SetConfig+0x16e>
 8006cc2:	2b30      	cmp	r3, #48	@ 0x30
 8006cc4:	d814      	bhi.n	8006cf0 <UART_SetConfig+0x174>
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d009      	beq.n	8006cde <UART_SetConfig+0x162>
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d810      	bhi.n	8006cf0 <UART_SetConfig+0x174>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <UART_SetConfig+0x15c>
 8006cd2:	2b10      	cmp	r3, #16
 8006cd4:	d006      	beq.n	8006ce4 <UART_SetConfig+0x168>
 8006cd6:	e00b      	b.n	8006cf0 <UART_SetConfig+0x174>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e0f2      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	77fb      	strb	r3, [r7, #31]
 8006ce2:	e0ef      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	77fb      	strb	r3, [r7, #31]
 8006ce8:	e0ec      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006cea:	2308      	movs	r3, #8
 8006cec:	77fb      	strb	r3, [r7, #31]
 8006cee:	e0e9      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	77fb      	strb	r3, [r7, #31]
 8006cf4:	e0e6      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a56      	ldr	r2, [pc, #344]	@ (8006e54 <UART_SetConfig+0x2d8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d120      	bne.n	8006d42 <UART_SetConfig+0x1c6>
 8006d00:	4b51      	ldr	r3, [pc, #324]	@ (8006e48 <UART_SetConfig+0x2cc>)
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d0c:	d013      	beq.n	8006d36 <UART_SetConfig+0x1ba>
 8006d0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d10:	d814      	bhi.n	8006d3c <UART_SetConfig+0x1c0>
 8006d12:	2b80      	cmp	r3, #128	@ 0x80
 8006d14:	d009      	beq.n	8006d2a <UART_SetConfig+0x1ae>
 8006d16:	2b80      	cmp	r3, #128	@ 0x80
 8006d18:	d810      	bhi.n	8006d3c <UART_SetConfig+0x1c0>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <UART_SetConfig+0x1a8>
 8006d1e:	2b40      	cmp	r3, #64	@ 0x40
 8006d20:	d006      	beq.n	8006d30 <UART_SetConfig+0x1b4>
 8006d22:	e00b      	b.n	8006d3c <UART_SetConfig+0x1c0>
 8006d24:	2300      	movs	r3, #0
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e0cc      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	77fb      	strb	r3, [r7, #31]
 8006d2e:	e0c9      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d30:	2304      	movs	r3, #4
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e0c6      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d36:	2308      	movs	r3, #8
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e0c3      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e0c0      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a44      	ldr	r2, [pc, #272]	@ (8006e58 <UART_SetConfig+0x2dc>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d125      	bne.n	8006d98 <UART_SetConfig+0x21c>
 8006d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8006e48 <UART_SetConfig+0x2cc>)
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d5a:	d017      	beq.n	8006d8c <UART_SetConfig+0x210>
 8006d5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d60:	d817      	bhi.n	8006d92 <UART_SetConfig+0x216>
 8006d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d66:	d00b      	beq.n	8006d80 <UART_SetConfig+0x204>
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6c:	d811      	bhi.n	8006d92 <UART_SetConfig+0x216>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <UART_SetConfig+0x1fe>
 8006d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d76:	d006      	beq.n	8006d86 <UART_SetConfig+0x20a>
 8006d78:	e00b      	b.n	8006d92 <UART_SetConfig+0x216>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e0a1      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d80:	2302      	movs	r3, #2
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e09e      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d86:	2304      	movs	r3, #4
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e09b      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d8c:	2308      	movs	r3, #8
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e098      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d92:	2310      	movs	r3, #16
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e095      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e5c <UART_SetConfig+0x2e0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d125      	bne.n	8006dee <UART_SetConfig+0x272>
 8006da2:	4b29      	ldr	r3, [pc, #164]	@ (8006e48 <UART_SetConfig+0x2cc>)
 8006da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006dac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006db0:	d017      	beq.n	8006de2 <UART_SetConfig+0x266>
 8006db2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006db6:	d817      	bhi.n	8006de8 <UART_SetConfig+0x26c>
 8006db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dbc:	d00b      	beq.n	8006dd6 <UART_SetConfig+0x25a>
 8006dbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dc2:	d811      	bhi.n	8006de8 <UART_SetConfig+0x26c>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <UART_SetConfig+0x254>
 8006dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dcc:	d006      	beq.n	8006ddc <UART_SetConfig+0x260>
 8006dce:	e00b      	b.n	8006de8 <UART_SetConfig+0x26c>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e076      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	77fb      	strb	r3, [r7, #31]
 8006dda:	e073      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006ddc:	2304      	movs	r3, #4
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	e070      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006de2:	2308      	movs	r3, #8
 8006de4:	77fb      	strb	r3, [r7, #31]
 8006de6:	e06d      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006de8:	2310      	movs	r3, #16
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e06a      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e60 <UART_SetConfig+0x2e4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d138      	bne.n	8006e6a <UART_SetConfig+0x2ee>
 8006df8:	4b13      	ldr	r3, [pc, #76]	@ (8006e48 <UART_SetConfig+0x2cc>)
 8006dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dfe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e06:	d017      	beq.n	8006e38 <UART_SetConfig+0x2bc>
 8006e08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e0c:	d82a      	bhi.n	8006e64 <UART_SetConfig+0x2e8>
 8006e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e12:	d00b      	beq.n	8006e2c <UART_SetConfig+0x2b0>
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e18:	d824      	bhi.n	8006e64 <UART_SetConfig+0x2e8>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <UART_SetConfig+0x2aa>
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e22:	d006      	beq.n	8006e32 <UART_SetConfig+0x2b6>
 8006e24:	e01e      	b.n	8006e64 <UART_SetConfig+0x2e8>
 8006e26:	2300      	movs	r3, #0
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e04b      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e048      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006e32:	2304      	movs	r3, #4
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e045      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e042      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006e3e:	bf00      	nop
 8006e40:	efff69f3 	.word	0xefff69f3
 8006e44:	40011000 	.word	0x40011000
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	40004400 	.word	0x40004400
 8006e50:	40004800 	.word	0x40004800
 8006e54:	40004c00 	.word	0x40004c00
 8006e58:	40005000 	.word	0x40005000
 8006e5c:	40011400 	.word	0x40011400
 8006e60:	40007800 	.word	0x40007800
 8006e64:	2310      	movs	r3, #16
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e02c      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a72      	ldr	r2, [pc, #456]	@ (8007038 <UART_SetConfig+0x4bc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d125      	bne.n	8006ec0 <UART_SetConfig+0x344>
 8006e74:	4b71      	ldr	r3, [pc, #452]	@ (800703c <UART_SetConfig+0x4c0>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006e7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006e82:	d017      	beq.n	8006eb4 <UART_SetConfig+0x338>
 8006e84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006e88:	d817      	bhi.n	8006eba <UART_SetConfig+0x33e>
 8006e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e8e:	d00b      	beq.n	8006ea8 <UART_SetConfig+0x32c>
 8006e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e94:	d811      	bhi.n	8006eba <UART_SetConfig+0x33e>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <UART_SetConfig+0x326>
 8006e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e9e:	d006      	beq.n	8006eae <UART_SetConfig+0x332>
 8006ea0:	e00b      	b.n	8006eba <UART_SetConfig+0x33e>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e00d      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e00a      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006eae:	2304      	movs	r3, #4
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e007      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e004      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006eba:	2310      	movs	r3, #16
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e001      	b.n	8006ec4 <UART_SetConfig+0x348>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ecc:	d15b      	bne.n	8006f86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d828      	bhi.n	8006f26 <UART_SetConfig+0x3aa>
 8006ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <UART_SetConfig+0x360>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f11 	.word	0x08006f11
 8006ee8:	08006f27 	.word	0x08006f27
 8006eec:	08006f17 	.word	0x08006f17
 8006ef0:	08006f27 	.word	0x08006f27
 8006ef4:	08006f27 	.word	0x08006f27
 8006ef8:	08006f27 	.word	0x08006f27
 8006efc:	08006f1f 	.word	0x08006f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f00:	f7fd ffda 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8006f04:	61b8      	str	r0, [r7, #24]
        break;
 8006f06:	e013      	b.n	8006f30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f08:	f7fd ffea 	bl	8004ee0 <HAL_RCC_GetPCLK2Freq>
 8006f0c:	61b8      	str	r0, [r7, #24]
        break;
 8006f0e:	e00f      	b.n	8006f30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f10:	4b4b      	ldr	r3, [pc, #300]	@ (8007040 <UART_SetConfig+0x4c4>)
 8006f12:	61bb      	str	r3, [r7, #24]
        break;
 8006f14:	e00c      	b.n	8006f30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f16:	f7fd febd 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8006f1a:	61b8      	str	r0, [r7, #24]
        break;
 8006f1c:	e008      	b.n	8006f30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f22:	61bb      	str	r3, [r7, #24]
        break;
 8006f24:	e004      	b.n	8006f30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d074      	beq.n	8007020 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	005a      	lsls	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	441a      	add	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b0f      	cmp	r3, #15
 8006f50:	d916      	bls.n	8006f80 <UART_SetConfig+0x404>
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f58:	d212      	bcs.n	8006f80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f023 030f 	bic.w	r3, r3, #15
 8006f62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	89fb      	ldrh	r3, [r7, #14]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	89fa      	ldrh	r2, [r7, #14]
 8006f7c:	60da      	str	r2, [r3, #12]
 8006f7e:	e04f      	b.n	8007020 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	77bb      	strb	r3, [r7, #30]
 8006f84:	e04c      	b.n	8007020 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f86:	7ffb      	ldrb	r3, [r7, #31]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d828      	bhi.n	8006fde <UART_SetConfig+0x462>
 8006f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <UART_SetConfig+0x418>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fc1 	.word	0x08006fc1
 8006f9c:	08006fc9 	.word	0x08006fc9
 8006fa0:	08006fdf 	.word	0x08006fdf
 8006fa4:	08006fcf 	.word	0x08006fcf
 8006fa8:	08006fdf 	.word	0x08006fdf
 8006fac:	08006fdf 	.word	0x08006fdf
 8006fb0:	08006fdf 	.word	0x08006fdf
 8006fb4:	08006fd7 	.word	0x08006fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f7fd ff7e 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8006fbc:	61b8      	str	r0, [r7, #24]
        break;
 8006fbe:	e013      	b.n	8006fe8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fc0:	f7fd ff8e 	bl	8004ee0 <HAL_RCC_GetPCLK2Freq>
 8006fc4:	61b8      	str	r0, [r7, #24]
        break;
 8006fc6:	e00f      	b.n	8006fe8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8007040 <UART_SetConfig+0x4c4>)
 8006fca:	61bb      	str	r3, [r7, #24]
        break;
 8006fcc:	e00c      	b.n	8006fe8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fce:	f7fd fe61 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8006fd2:	61b8      	str	r0, [r7, #24]
        break;
 8006fd4:	e008      	b.n	8006fe8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fda:	61bb      	str	r3, [r7, #24]
        break;
 8006fdc:	e004      	b.n	8006fe8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	77bb      	strb	r3, [r7, #30]
        break;
 8006fe6:	bf00      	nop
    }

    if (pclk != 0U)
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d018      	beq.n	8007020 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	085a      	lsrs	r2, r3, #1
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	441a      	add	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b0f      	cmp	r3, #15
 8007006:	d909      	bls.n	800701c <UART_SetConfig+0x4a0>
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800700e:	d205      	bcs.n	800701c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	b29a      	uxth	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60da      	str	r2, [r3, #12]
 800701a:	e001      	b.n	8007020 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800702c:	7fbb      	ldrb	r3, [r7, #30]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3720      	adds	r7, #32
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	40007c00 	.word	0x40007c00
 800703c:	40023800 	.word	0x40023800
 8007040:	00f42400 	.word	0x00f42400

08007044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01a      	beq.n	800715a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007142:	d10a      	bne.n	800715a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]
  }
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b098      	sub	sp, #96	@ 0x60
 800718c:	af02      	add	r7, sp, #8
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007198:	f7fb f844 	bl	8002224 <HAL_GetTick>
 800719c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d12e      	bne.n	800720a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071b4:	2200      	movs	r2, #0
 80071b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f88c 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d021      	beq.n	800720a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071da:	653b      	str	r3, [r7, #80]	@ 0x50
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e6      	bne.n	80071c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e062      	b.n	80072d0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b04      	cmp	r3, #4
 8007216:	d149      	bne.n	80072ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007218:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007220:	2200      	movs	r2, #0
 8007222:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f856 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d03c      	beq.n	80072ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	623b      	str	r3, [r7, #32]
   return(result);
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007250:	633b      	str	r3, [r7, #48]	@ 0x30
 8007252:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e6      	bne.n	8007232 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3308      	adds	r3, #8
 800726a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	60fb      	str	r3, [r7, #12]
   return(result);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0301 	bic.w	r3, r3, #1
 800727a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3308      	adds	r3, #8
 8007282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007284:	61fa      	str	r2, [r7, #28]
 8007286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	69b9      	ldr	r1, [r7, #24]
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	617b      	str	r3, [r7, #20]
   return(result);
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e5      	bne.n	8007264 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e011      	b.n	80072d0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3758      	adds	r7, #88	@ 0x58
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e8:	e04f      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d04b      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f2:	f7fa ff97 	bl	8002224 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d302      	bcc.n	8007308 <UART_WaitOnFlagUntilTimeout+0x30>
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e04e      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	d037      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0xb2>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b80      	cmp	r3, #128	@ 0x80
 800731e:	d034      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b40      	cmp	r3, #64	@ 0x40
 8007324:	d031      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b08      	cmp	r3, #8
 8007332:	d110      	bne.n	8007356 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2208      	movs	r2, #8
 800733a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f838 	bl	80073b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2208      	movs	r2, #8
 8007346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e029      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007364:	d111      	bne.n	800738a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800736e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f81e 	bl	80073b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e00f      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4013      	ands	r3, r2
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	429a      	cmp	r2, r3
 8007398:	bf0c      	ite	eq
 800739a:	2301      	moveq	r3, #1
 800739c:	2300      	movne	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d0a0      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b095      	sub	sp, #84	@ 0x54
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80073da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e6      	bne.n	80073ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3308      	adds	r3, #8
 80073f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800740c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800740e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e5      	bne.n	80073ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007424:	2b01      	cmp	r3, #1
 8007426:	d118      	bne.n	800745a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	60bb      	str	r3, [r7, #8]
   return(result);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f023 0310 	bic.w	r3, r3, #16
 800743c:	647b      	str	r3, [r7, #68]	@ 0x44
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6979      	ldr	r1, [r7, #20]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	613b      	str	r3, [r7, #16]
   return(result);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800746e:	bf00      	nop
 8007470:	3754      	adds	r7, #84	@ 0x54
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800747c:	b084      	sub	sp, #16
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	f107 001c 	add.w	r0, r7, #28
 800748a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800748e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007492:	2b01      	cmp	r3, #1
 8007494:	d121      	bne.n	80074da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	4b21      	ldr	r3, [pc, #132]	@ (800752c <USB_CoreInit+0xb0>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d105      	bne.n	80074ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fa92 	bl	80079f8 <USB_CoreReset>
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	e010      	b.n	80074fc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa86 	bl	80079f8 <USB_CoreReset>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80074fc:	7fbb      	ldrb	r3, [r7, #30]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d10b      	bne.n	800751a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f043 0206 	orr.w	r2, r3, #6
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007526:	b004      	add	sp, #16
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	ffbdffbf 	.word	0xffbdffbf

08007530 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f023 0201 	bic.w	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d115      	bne.n	80075a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007580:	200a      	movs	r0, #10
 8007582:	f7fa fe5b 	bl	800223c <HAL_Delay>
      ms += 10U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	330a      	adds	r3, #10
 800758a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fa25 	bl	80079dc <USB_GetMode>
 8007592:	4603      	mov	r3, r0
 8007594:	2b01      	cmp	r3, #1
 8007596:	d01e      	beq.n	80075d6 <USB_SetCurrentMode+0x84>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2bc7      	cmp	r3, #199	@ 0xc7
 800759c:	d9f0      	bls.n	8007580 <USB_SetCurrentMode+0x2e>
 800759e:	e01a      	b.n	80075d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d115      	bne.n	80075d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075b2:	200a      	movs	r0, #10
 80075b4:	f7fa fe42 	bl	800223c <HAL_Delay>
      ms += 10U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	330a      	adds	r3, #10
 80075bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa0c 	bl	80079dc <USB_GetMode>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <USB_SetCurrentMode+0x84>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80075ce:	d9f0      	bls.n	80075b2 <USB_SetCurrentMode+0x60>
 80075d0:	e001      	b.n	80075d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e005      	b.n	80075e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80075da:	d101      	bne.n	80075e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e000      	b.n	80075e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075ec:	b084      	sub	sp, #16
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80075fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	e009      	b.n	8007620 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	3340      	adds	r3, #64	@ 0x40
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	2200      	movs	r2, #0
 8007618:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3301      	adds	r3, #1
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	2b0e      	cmp	r3, #14
 8007624:	d9f2      	bls.n	800760c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007626:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11c      	bne.n	8007668 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800763c:	f043 0302 	orr.w	r3, r3, #2
 8007640:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e005      	b.n	8007674 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800767a:	461a      	mov	r2, r3
 800767c:	2300      	movs	r3, #0
 800767e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007680:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007684:	2b01      	cmp	r3, #1
 8007686:	d10d      	bne.n	80076a4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f968 	bl	8007968 <USB_SetDevSpeed>
 8007698:	e008      	b.n	80076ac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800769a:	2101      	movs	r1, #1
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f963 	bl	8007968 <USB_SetDevSpeed>
 80076a2:	e003      	b.n	80076ac <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076a4:	2103      	movs	r1, #3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f95e 	bl	8007968 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076ac:	2110      	movs	r1, #16
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8fa 	bl	80078a8 <USB_FlushTxFifo>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f924 	bl	800790c <USB_FlushRxFifo>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d4:	461a      	mov	r2, r3
 80076d6:	2300      	movs	r3, #0
 80076d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e0:	461a      	mov	r2, r3
 80076e2:	2300      	movs	r3, #0
 80076e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ec:	461a      	mov	r2, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076f2:	2300      	movs	r3, #0
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	e043      	b.n	8007780 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800770a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800770e:	d118      	bne.n	8007742 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007722:	461a      	mov	r2, r3
 8007724:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	e013      	b.n	8007754 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007738:	461a      	mov	r2, r3
 800773a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	e008      	b.n	8007754 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774e:	461a      	mov	r2, r3
 8007750:	2300      	movs	r3, #0
 8007752:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007760:	461a      	mov	r2, r3
 8007762:	2300      	movs	r3, #0
 8007764:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007772:	461a      	mov	r2, r3
 8007774:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007778:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	3301      	adds	r3, #1
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007784:	461a      	mov	r2, r3
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	4293      	cmp	r3, r2
 800778a:	d3b5      	bcc.n	80076f8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	e043      	b.n	800781a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077a8:	d118      	bne.n	80077dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077bc:	461a      	mov	r2, r3
 80077be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	e013      	b.n	80077ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d2:	461a      	mov	r2, r3
 80077d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e008      	b.n	80077ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e8:	461a      	mov	r2, r3
 80077ea:	2300      	movs	r3, #0
 80077ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fa:	461a      	mov	r2, r3
 80077fc:	2300      	movs	r3, #0
 80077fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780c:	461a      	mov	r2, r3
 800780e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007812:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	3301      	adds	r3, #1
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800781e:	461a      	mov	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4293      	cmp	r3, r2
 8007824:	d3b5      	bcc.n	8007792 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007838:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007846:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007848:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f043 0210 	orr.w	r2, r3, #16
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699a      	ldr	r2, [r3, #24]
 8007860:	4b0f      	ldr	r3, [pc, #60]	@ (80078a0 <USB_DevInit+0x2b4>)
 8007862:	4313      	orrs	r3, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007868:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f043 0208 	orr.w	r2, r3, #8
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800787c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007880:	2b01      	cmp	r3, #1
 8007882:	d105      	bne.n	8007890 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699a      	ldr	r2, [r3, #24]
 8007888:	4b06      	ldr	r3, [pc, #24]	@ (80078a4 <USB_DevInit+0x2b8>)
 800788a:	4313      	orrs	r3, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800789c:	b004      	add	sp, #16
 800789e:	4770      	bx	lr
 80078a0:	803c3800 	.word	0x803c3800
 80078a4:	40000004 	.word	0x40000004

080078a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078c2:	d901      	bls.n	80078c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e01b      	b.n	8007900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	daf2      	bge.n	80078b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	019b      	lsls	r3, r3, #6
 80078d8:	f043 0220 	orr.w	r2, r3, #32
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3301      	adds	r3, #1
 80078e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078ec:	d901      	bls.n	80078f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e006      	b.n	8007900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d0f0      	beq.n	80078e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3301      	adds	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007924:	d901      	bls.n	800792a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e018      	b.n	800795c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	daf2      	bge.n	8007918 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2210      	movs	r2, #16
 800793a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007948:	d901      	bls.n	800794e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e006      	b.n	800795c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b10      	cmp	r3, #16
 8007958:	d0f0      	beq.n	800793c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007988:	4313      	orrs	r3, r2
 800798a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079b4:	f023 0303 	bic.w	r3, r3, #3
 80079b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079c8:	f043 0302 	orr.w	r3, r3, #2
 80079cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	f003 0301 	and.w	r3, r3, #1
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a10:	d901      	bls.n	8007a16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e022      	b.n	8007a5c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	daf2      	bge.n	8007a04 <USB_CoreReset+0xc>

  count = 10U;
 8007a1e:	230a      	movs	r3, #10
 8007a20:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007a22:	e002      	b.n	8007a2a <USB_CoreReset+0x32>
  {
    count--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f9      	bne.n	8007a24 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f043 0201 	orr.w	r2, r3, #1
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a48:	d901      	bls.n	8007a4e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e006      	b.n	8007a5c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d0f0      	beq.n	8007a3c <USB_CoreReset+0x44>

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a7a:	2b84      	cmp	r3, #132	@ 0x84
 8007a7c:	d005      	beq.n	8007a8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4413      	add	r3, r2
 8007a86:	3303      	adds	r3, #3
 8007a88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a9c:	f000 fed8 	bl	8008850 <vTaskStartScheduler>
  
  return osOK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa8:	b089      	sub	sp, #36	@ 0x24
 8007aaa:	af04      	add	r7, sp, #16
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d020      	beq.n	8007afa <osThreadCreate+0x54>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01c      	beq.n	8007afa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685c      	ldr	r4, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691e      	ldr	r6, [r3, #16]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff ffc8 	bl	8007a68 <makeFreeRtosPriority>
 8007ad8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ae2:	9202      	str	r2, [sp, #8]
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	9100      	str	r1, [sp, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	4632      	mov	r2, r6
 8007aec:	4629      	mov	r1, r5
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 fcbe 	bl	8008470 <xTaskCreateStatic>
 8007af4:	4603      	mov	r3, r0
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e01c      	b.n	8007b34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685c      	ldr	r4, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b06:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff ffaa 	bl	8007a68 <makeFreeRtosPriority>
 8007b14:	4602      	mov	r2, r0
 8007b16:	f107 030c 	add.w	r3, r7, #12
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	9200      	str	r2, [sp, #0]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	4632      	mov	r2, r6
 8007b22:	4629      	mov	r1, r5
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 fd09 	bl	800853c <xTaskCreate>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d001      	beq.n	8007b34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e000      	b.n	8007b36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007b34:	68fb      	ldr	r3, [r7, #12]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <osDelay+0x16>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	e000      	b.n	8007b56 <osDelay+0x18>
 8007b54:	2301      	movs	r3, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fe42 	bl	80087e0 <vTaskDelay>
  
  return osOK;
 8007b5c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f103 0208 	add.w	r2, r3, #8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f103 0208 	add.w	r2, r3, #8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f103 0208 	add.w	r2, r3, #8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d103      	bne.n	8007c28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	e00c      	b.n	8007c42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	e002      	b.n	8007c36 <vListInsert+0x2e>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d2f6      	bcs.n	8007c30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	601a      	str	r2, [r3, #0]
}
 8007c6e:	bf00      	nop
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6892      	ldr	r2, [r2, #8]
 8007c90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6852      	ldr	r2, [r2, #4]
 8007c9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d103      	bne.n	8007cae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	1e5a      	subs	r2, r3, #1
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10d      	bne.n	8007d00 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce8:	b672      	cpsid	i
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	b662      	cpsie	i
 8007cf8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	e7fd      	b.n	8007cfc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007d00:	f001 fdac 	bl	800985c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0c:	68f9      	ldr	r1, [r7, #12]
 8007d0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d10:	fb01 f303 	mul.w	r3, r1, r3
 8007d14:	441a      	add	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d30:	3b01      	subs	r3, #1
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d36:	fb01 f303 	mul.w	r3, r1, r3
 8007d3a:	441a      	add	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	22ff      	movs	r2, #255	@ 0xff
 8007d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	22ff      	movs	r2, #255	@ 0xff
 8007d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d114      	bne.n	8007d80 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01a      	beq.n	8007d94 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3310      	adds	r3, #16
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 ffda 	bl	8008d1c <xTaskRemoveFromEventList>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d012      	beq.n	8007d94 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007da4 <xQueueGenericReset+0xd4>)
 8007d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	e009      	b.n	8007d94 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3310      	adds	r3, #16
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff feee 	bl	8007b66 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3324      	adds	r3, #36	@ 0x24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fee9 	bl	8007b66 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d94:	f001 fd98 	bl	80098c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d98:	2301      	movs	r3, #1
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	@ 0x28
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10d      	bne.n	8007dd8 <xQueueGenericCreate+0x30>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	b672      	cpsid	i
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	b662      	cpsie	i
 8007dd0:	613b      	str	r3, [r7, #16]
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	e7fd      	b.n	8007dd4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d102      	bne.n	8007de4 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	e004      	b.n	8007dee <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	fb02 f303 	mul.w	r3, r2, r3
 8007dec:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3348      	adds	r3, #72	@ 0x48
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fe60 	bl	8009ab8 <pvPortMalloc>
 8007df8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d011      	beq.n	8007e24 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	3348      	adds	r3, #72	@ 0x48
 8007e08:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e12:	79fa      	ldrb	r2, [r7, #7]
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	68b9      	ldr	r1, [r7, #8]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f805 	bl	8007e2e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e24:	69bb      	ldr	r3, [r7, #24]
	}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3720      	adds	r7, #32
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d103      	bne.n	8007e4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	e002      	b.n	8007e50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	69b8      	ldr	r0, [r7, #24]
 8007e60:	f7ff ff36 	bl	8007cd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08e      	sub	sp, #56	@ 0x38
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10d      	bne.n	8007ea4 <xQueueGenericSend+0x38>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8c:	b672      	cpsid	i
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	b662      	cpsie	i
 8007e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	e7fd      	b.n	8007ea0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <xQueueGenericSend+0x46>
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <xQueueGenericSend+0x4a>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <xQueueGenericSend+0x4c>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10d      	bne.n	8007ed8 <xQueueGenericSend+0x6c>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec0:	b672      	cpsid	i
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	b662      	cpsie	i
 8007ed0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d103      	bne.n	8007ee6 <xQueueGenericSend+0x7a>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <xQueueGenericSend+0x7e>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <xQueueGenericSend+0x80>
 8007eea:	2300      	movs	r3, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10d      	bne.n	8007f0c <xQueueGenericSend+0xa0>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	b672      	cpsid	i
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	b662      	cpsie	i
 8007f04:	623b      	str	r3, [r7, #32]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f0c:	f001 f8d4 	bl	80090b8 <xTaskGetSchedulerState>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <xQueueGenericSend+0xb0>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <xQueueGenericSend+0xb4>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e000      	b.n	8007f22 <xQueueGenericSend+0xb6>
 8007f20:	2300      	movs	r3, #0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10d      	bne.n	8007f42 <xQueueGenericSend+0xd6>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	b672      	cpsid	i
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	b662      	cpsie	i
 8007f3a:	61fb      	str	r3, [r7, #28]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f42:	f001 fc8b 	bl	800985c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d302      	bcc.n	8007f58 <xQueueGenericSend+0xec>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d129      	bne.n	8007fac <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f5e:	f000 f977 	bl	8008250 <prvCopyDataToQueue>
 8007f62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d010      	beq.n	8007f8e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6e:	3324      	adds	r3, #36	@ 0x24
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fed3 	bl	8008d1c <xTaskRemoveFromEventList>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d013      	beq.n	8007fa4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800807c <xQueueGenericSend+0x210>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	e00a      	b.n	8007fa4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f94:	4b39      	ldr	r3, [pc, #228]	@ (800807c <xQueueGenericSend+0x210>)
 8007f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fa4:	f001 fc90 	bl	80098c8 <vPortExitCritical>
				return pdPASS;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e063      	b.n	8008074 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d103      	bne.n	8007fba <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fb2:	f001 fc89 	bl	80098c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e05c      	b.n	8008074 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d106      	bne.n	8007fce <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 ff0f 	bl	8008de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fce:	f001 fc7b 	bl	80098c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fd2:	f000 fcab 	bl	800892c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fd6:	f001 fc41 	bl	800985c <vPortEnterCritical>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fe0:	b25b      	sxtb	r3, r3
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d103      	bne.n	8007ff0 <xQueueGenericSend+0x184>
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ff6:	b25b      	sxtb	r3, r3
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d103      	bne.n	8008006 <xQueueGenericSend+0x19a>
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008006:	f001 fc5f 	bl	80098c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800800a:	1d3a      	adds	r2, r7, #4
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fefe 	bl	8008e14 <xTaskCheckForTimeOut>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d124      	bne.n	8008068 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800801e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008020:	f000 fa0e 	bl	8008440 <prvIsQueueFull>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d018      	beq.n	800805c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800802a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802c:	3310      	adds	r3, #16
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fe4a 	bl	8008ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800803a:	f000 f999 	bl	8008370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800803e:	f000 fc83 	bl	8008948 <xTaskResumeAll>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	f47f af7c 	bne.w	8007f42 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800804a:	4b0c      	ldr	r3, [pc, #48]	@ (800807c <xQueueGenericSend+0x210>)
 800804c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	e772      	b.n	8007f42 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800805c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800805e:	f000 f987 	bl	8008370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008062:	f000 fc71 	bl	8008948 <xTaskResumeAll>
 8008066:	e76c      	b.n	8007f42 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800806a:	f000 f981 	bl	8008370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800806e:	f000 fc6b 	bl	8008948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008074:	4618      	mov	r0, r3
 8008076:	3738      	adds	r7, #56	@ 0x38
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	e000ed04 	.word	0xe000ed04

08008080 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b08c      	sub	sp, #48	@ 0x30
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800808c:	2300      	movs	r3, #0
 800808e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10d      	bne.n	80080b6 <xQueueReceive+0x36>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809e:	b672      	cpsid	i
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	b662      	cpsie	i
 80080ae:	623b      	str	r3, [r7, #32]
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <xQueueReceive+0x44>
 80080bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <xQueueReceive+0x48>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <xQueueReceive+0x4a>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10d      	bne.n	80080ea <xQueueReceive+0x6a>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	b672      	cpsid	i
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	b662      	cpsie	i
 80080e2:	61fb      	str	r3, [r7, #28]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ea:	f000 ffe5 	bl	80090b8 <xTaskGetSchedulerState>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <xQueueReceive+0x7a>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <xQueueReceive+0x7e>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xQueueReceive+0x80>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10d      	bne.n	8008120 <xQueueReceive+0xa0>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	b672      	cpsid	i
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	b662      	cpsie	i
 8008118:	61bb      	str	r3, [r7, #24]
}
 800811a:	bf00      	nop
 800811c:	bf00      	nop
 800811e:	e7fd      	b.n	800811c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008120:	f001 fb9c 	bl	800985c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008128:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01f      	beq.n	8008170 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008130:	68b9      	ldr	r1, [r7, #8]
 8008132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008134:	f000 f8f6 	bl	8008324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	1e5a      	subs	r2, r3, #1
 800813c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00f      	beq.n	8008168 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	3310      	adds	r3, #16
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fde5 	bl	8008d1c <xTaskRemoveFromEventList>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008158:	4b3c      	ldr	r3, [pc, #240]	@ (800824c <xQueueReceive+0x1cc>)
 800815a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008168:	f001 fbae 	bl	80098c8 <vPortExitCritical>
				return pdPASS;
 800816c:	2301      	movs	r3, #1
 800816e:	e069      	b.n	8008244 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d103      	bne.n	800817e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008176:	f001 fba7 	bl	80098c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800817a:	2300      	movs	r3, #0
 800817c:	e062      	b.n	8008244 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800817e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d106      	bne.n	8008192 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008184:	f107 0310 	add.w	r3, r7, #16
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fe2d 	bl	8008de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800818e:	2301      	movs	r3, #1
 8008190:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008192:	f001 fb99 	bl	80098c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008196:	f000 fbc9 	bl	800892c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800819a:	f001 fb5f 	bl	800985c <vPortEnterCritical>
 800819e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081a4:	b25b      	sxtb	r3, r3
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d103      	bne.n	80081b4 <xQueueReceive+0x134>
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081ba:	b25b      	sxtb	r3, r3
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d103      	bne.n	80081ca <xQueueReceive+0x14a>
 80081c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081ca:	f001 fb7d 	bl	80098c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081ce:	1d3a      	adds	r2, r7, #4
 80081d0:	f107 0310 	add.w	r3, r7, #16
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fe1c 	bl	8008e14 <xTaskCheckForTimeOut>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d123      	bne.n	800822a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e4:	f000 f916 	bl	8008414 <prvIsQueueEmpty>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d017      	beq.n	800821e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f0:	3324      	adds	r3, #36	@ 0x24
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4611      	mov	r1, r2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fd68 	bl	8008ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081fe:	f000 f8b7 	bl	8008370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008202:	f000 fba1 	bl	8008948 <xTaskResumeAll>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d189      	bne.n	8008120 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800820c:	4b0f      	ldr	r3, [pc, #60]	@ (800824c <xQueueReceive+0x1cc>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	e780      	b.n	8008120 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800821e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008220:	f000 f8a6 	bl	8008370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008224:	f000 fb90 	bl	8008948 <xTaskResumeAll>
 8008228:	e77a      	b.n	8008120 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800822a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800822c:	f000 f8a0 	bl	8008370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008230:	f000 fb8a 	bl	8008948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008236:	f000 f8ed 	bl	8008414 <prvIsQueueEmpty>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	f43f af6f 	beq.w	8008120 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008242:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008244:	4618      	mov	r0, r3
 8008246:	3730      	adds	r7, #48	@ 0x30
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	e000ed04 	.word	0xe000ed04

08008250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10d      	bne.n	800828a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d14d      	bne.n	8008312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 ff3a 	bl	80090f4 <xTaskPriorityDisinherit>
 8008280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	609a      	str	r2, [r3, #8]
 8008288:	e043      	b.n	8008312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d119      	bne.n	80082c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6858      	ldr	r0, [r3, #4]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008298:	461a      	mov	r2, r3
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	f002 fd33 	bl	800ad06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a8:	441a      	add	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d32b      	bcc.n	8008312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	605a      	str	r2, [r3, #4]
 80082c2:	e026      	b.n	8008312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68d8      	ldr	r0, [r3, #12]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082cc:	461a      	mov	r2, r3
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	f002 fd19 	bl	800ad06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082dc:	425b      	negs	r3, r3
 80082de:	441a      	add	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d207      	bcs.n	8008300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f8:	425b      	negs	r3, r3
 80082fa:	441a      	add	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d105      	bne.n	8008312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	3b01      	subs	r3, #1
 8008310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800831a:	697b      	ldr	r3, [r7, #20]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d018      	beq.n	8008368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	441a      	add	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	429a      	cmp	r2, r3
 800834e:	d303      	bcc.n	8008358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68d9      	ldr	r1, [r3, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	461a      	mov	r2, r3
 8008362:	6838      	ldr	r0, [r7, #0]
 8008364:	f002 fccf 	bl	800ad06 <memcpy>
	}
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008378:	f001 fa70 	bl	800985c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008384:	e011      	b.n	80083aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d012      	beq.n	80083b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3324      	adds	r3, #36	@ 0x24
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fcc2 	bl	8008d1c <xTaskRemoveFromEventList>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800839e:	f000 fda1 	bl	8008ee4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	dce9      	bgt.n	8008386 <prvUnlockQueue+0x16>
 80083b2:	e000      	b.n	80083b6 <prvUnlockQueue+0x46>
					break;
 80083b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	22ff      	movs	r2, #255	@ 0xff
 80083ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80083be:	f001 fa83 	bl	80098c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083c2:	f001 fa4b 	bl	800985c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083ce:	e011      	b.n	80083f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d012      	beq.n	80083fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3310      	adds	r3, #16
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fc9d 	bl	8008d1c <xTaskRemoveFromEventList>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083e8:	f000 fd7c 	bl	8008ee4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dce9      	bgt.n	80083d0 <prvUnlockQueue+0x60>
 80083fc:	e000      	b.n	8008400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	22ff      	movs	r2, #255	@ 0xff
 8008404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008408:	f001 fa5e 	bl	80098c8 <vPortExitCritical>
}
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800841c:	f001 fa1e 	bl	800985c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	e001      	b.n	8008432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008432:	f001 fa49 	bl	80098c8 <vPortExitCritical>

	return xReturn;
 8008436:	68fb      	ldr	r3, [r7, #12]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008448:	f001 fa08 	bl	800985c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008454:	429a      	cmp	r2, r3
 8008456:	d102      	bne.n	800845e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008458:	2301      	movs	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	e001      	b.n	8008462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008462:	f001 fa31 	bl	80098c8 <vPortExitCritical>

	return xReturn;
 8008466:	68fb      	ldr	r3, [r7, #12]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08e      	sub	sp, #56	@ 0x38
 8008474:	af04      	add	r7, sp, #16
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800847e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10d      	bne.n	80084a0 <xTaskCreateStatic+0x30>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	b672      	cpsid	i
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	b662      	cpsie	i
 8008498:	623b      	str	r3, [r7, #32]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10d      	bne.n	80084c2 <xTaskCreateStatic+0x52>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084aa:	b672      	cpsid	i
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	b662      	cpsie	i
 80084ba:	61fb      	str	r3, [r7, #28]
}
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
 80084c0:	e7fd      	b.n	80084be <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084c2:	23a0      	movs	r3, #160	@ 0xa0
 80084c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80084ca:	d00d      	beq.n	80084e8 <xTaskCreateStatic+0x78>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	b672      	cpsid	i
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	b662      	cpsie	i
 80084e0:	61bb      	str	r3, [r7, #24]
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01e      	beq.n	800852e <xTaskCreateStatic+0xbe>
 80084f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d01b      	beq.n	800852e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008502:	2202      	movs	r2, #2
 8008504:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008508:	2300      	movs	r3, #0
 800850a:	9303      	str	r3, [sp, #12]
 800850c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850e:	9302      	str	r3, [sp, #8]
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f851 	bl	80085c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008528:	f000 f8f0 	bl	800870c <prvAddNewTaskToReadyList>
 800852c:	e001      	b.n	8008532 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008532:	697b      	ldr	r3, [r7, #20]
	}
 8008534:	4618      	mov	r0, r3
 8008536:	3728      	adds	r7, #40	@ 0x28
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08c      	sub	sp, #48	@ 0x30
 8008540:	af04      	add	r7, sp, #16
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	4613      	mov	r3, r2
 800854a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800854c:	88fb      	ldrh	r3, [r7, #6]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4618      	mov	r0, r3
 8008552:	f001 fab1 	bl	8009ab8 <pvPortMalloc>
 8008556:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00e      	beq.n	800857c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800855e:	20a0      	movs	r0, #160	@ 0xa0
 8008560:	f001 faaa 	bl	8009ab8 <pvPortMalloc>
 8008564:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	631a      	str	r2, [r3, #48]	@ 0x30
 8008572:	e005      	b.n	8008580 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008574:	6978      	ldr	r0, [r7, #20]
 8008576:	f001 fb6d 	bl	8009c54 <vPortFree>
 800857a:	e001      	b.n	8008580 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d017      	beq.n	80085b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800858e:	88fa      	ldrh	r2, [r7, #6]
 8008590:	2300      	movs	r3, #0
 8008592:	9303      	str	r3, [sp, #12]
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f80f 	bl	80085c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085aa:	69f8      	ldr	r0, [r7, #28]
 80085ac:	f000 f8ae 	bl	800870c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085b0:	2301      	movs	r3, #1
 80085b2:	61bb      	str	r3, [r7, #24]
 80085b4:	e002      	b.n	80085bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085b6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085bc:	69bb      	ldr	r3, [r7, #24]
	}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80085e0:	440b      	add	r3, r1
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	f023 0307 	bic.w	r3, r3, #7
 80085ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00d      	beq.n	8008616 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	b672      	cpsid	i
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	b662      	cpsie	i
 800860e:	617b      	str	r3, [r7, #20]
}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	e7fd      	b.n	8008612 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01f      	beq.n	800865c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800861c:	2300      	movs	r3, #0
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e012      	b.n	8008648 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	4413      	add	r3, r2
 8008628:	7819      	ldrb	r1, [r3, #0]
 800862a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	3334      	adds	r3, #52	@ 0x34
 8008632:	460a      	mov	r2, r1
 8008634:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d006      	beq.n	8008650 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	3301      	adds	r3, #1
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	2b0f      	cmp	r3, #15
 800864c:	d9e9      	bls.n	8008622 <prvInitialiseNewTask+0x5a>
 800864e:	e000      	b.n	8008652 <prvInitialiseNewTask+0x8a>
			{
				break;
 8008650:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800865a:	e003      	b.n	8008664 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008666:	2b06      	cmp	r3, #6
 8008668:	d901      	bls.n	800866e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800866a:	2306      	movs	r3, #6
 800866c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008672:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008678:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2200      	movs	r2, #0
 800867e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	3304      	adds	r3, #4
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fa8e 	bl	8007ba6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	3318      	adds	r3, #24
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fa89 	bl	8007ba6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008698:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869c:	f1c3 0207 	rsb	r2, r3, #7
 80086a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	334c      	adds	r3, #76	@ 0x4c
 80086be:	224c      	movs	r2, #76	@ 0x4c
 80086c0:	2100      	movs	r1, #0
 80086c2:	4618      	mov	r0, r3
 80086c4:	f002 fa42 	bl	800ab4c <memset>
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	4a0d      	ldr	r2, [pc, #52]	@ (8008700 <prvInitialiseNewTask+0x138>)
 80086cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008704 <prvInitialiseNewTask+0x13c>)
 80086d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80086d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008708 <prvInitialiseNewTask+0x140>)
 80086d8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	69b8      	ldr	r0, [r7, #24]
 80086e0:	f000 ffaa 	bl	8009638 <pxPortInitialiseStack>
 80086e4:	4602      	mov	r2, r0
 80086e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086f6:	bf00      	nop
 80086f8:	3720      	adds	r7, #32
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20004dd8 	.word	0x20004dd8
 8008704:	20004e40 	.word	0x20004e40
 8008708:	20004ea8 	.word	0x20004ea8

0800870c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008714:	f001 f8a2 	bl	800985c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008718:	4b2a      	ldr	r3, [pc, #168]	@ (80087c4 <prvAddNewTaskToReadyList+0xb8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	4a29      	ldr	r2, [pc, #164]	@ (80087c4 <prvAddNewTaskToReadyList+0xb8>)
 8008720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008722:	4b29      	ldr	r3, [pc, #164]	@ (80087c8 <prvAddNewTaskToReadyList+0xbc>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800872a:	4a27      	ldr	r2, [pc, #156]	@ (80087c8 <prvAddNewTaskToReadyList+0xbc>)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008730:	4b24      	ldr	r3, [pc, #144]	@ (80087c4 <prvAddNewTaskToReadyList+0xb8>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d110      	bne.n	800875a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008738:	f000 fbf8 	bl	8008f2c <prvInitialiseTaskLists>
 800873c:	e00d      	b.n	800875a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800873e:	4b23      	ldr	r3, [pc, #140]	@ (80087cc <prvAddNewTaskToReadyList+0xc0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008746:	4b20      	ldr	r3, [pc, #128]	@ (80087c8 <prvAddNewTaskToReadyList+0xbc>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008750:	429a      	cmp	r2, r3
 8008752:	d802      	bhi.n	800875a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008754:	4a1c      	ldr	r2, [pc, #112]	@ (80087c8 <prvAddNewTaskToReadyList+0xbc>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800875a:	4b1d      	ldr	r3, [pc, #116]	@ (80087d0 <prvAddNewTaskToReadyList+0xc4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	4a1b      	ldr	r2, [pc, #108]	@ (80087d0 <prvAddNewTaskToReadyList+0xc4>)
 8008762:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008768:	2201      	movs	r2, #1
 800876a:	409a      	lsls	r2, r3
 800876c:	4b19      	ldr	r3, [pc, #100]	@ (80087d4 <prvAddNewTaskToReadyList+0xc8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4313      	orrs	r3, r2
 8008772:	4a18      	ldr	r2, [pc, #96]	@ (80087d4 <prvAddNewTaskToReadyList+0xc8>)
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4a15      	ldr	r2, [pc, #84]	@ (80087d8 <prvAddNewTaskToReadyList+0xcc>)
 8008784:	441a      	add	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3304      	adds	r3, #4
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7ff fa17 	bl	8007bc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008792:	f001 f899 	bl	80098c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008796:	4b0d      	ldr	r3, [pc, #52]	@ (80087cc <prvAddNewTaskToReadyList+0xc0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00e      	beq.n	80087bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800879e:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <prvAddNewTaskToReadyList+0xbc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d207      	bcs.n	80087bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087ac:	4b0b      	ldr	r3, [pc, #44]	@ (80087dc <prvAddNewTaskToReadyList+0xd0>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	2000118c 	.word	0x2000118c
 80087c8:	2000108c 	.word	0x2000108c
 80087cc:	20001198 	.word	0x20001198
 80087d0:	200011a8 	.word	0x200011a8
 80087d4:	20001194 	.word	0x20001194
 80087d8:	20001090 	.word	0x20001090
 80087dc:	e000ed04 	.word	0xe000ed04

080087e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01a      	beq.n	8008828 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087f2:	4b15      	ldr	r3, [pc, #84]	@ (8008848 <vTaskDelay+0x68>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00d      	beq.n	8008816 <vTaskDelay+0x36>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fe:	b672      	cpsid	i
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	b662      	cpsie	i
 800880e:	60bb      	str	r3, [r7, #8]
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	e7fd      	b.n	8008812 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008816:	f000 f889 	bl	800892c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800881a:	2100      	movs	r1, #0
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fea5 	bl	800956c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008822:	f000 f891 	bl	8008948 <xTaskResumeAll>
 8008826:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d107      	bne.n	800883e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800882e:	4b07      	ldr	r3, [pc, #28]	@ (800884c <vTaskDelay+0x6c>)
 8008830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	200011b4 	.word	0x200011b4
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	@ 0x28
 8008854:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800885e:	463a      	mov	r2, r7
 8008860:	1d39      	adds	r1, r7, #4
 8008862:	f107 0308 	add.w	r3, r7, #8
 8008866:	4618      	mov	r0, r3
 8008868:	f7f7 fff8 	bl	800085c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	9202      	str	r2, [sp, #8]
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	2300      	movs	r3, #0
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	2300      	movs	r3, #0
 800887c:	460a      	mov	r2, r1
 800887e:	4923      	ldr	r1, [pc, #140]	@ (800890c <vTaskStartScheduler+0xbc>)
 8008880:	4823      	ldr	r0, [pc, #140]	@ (8008910 <vTaskStartScheduler+0xc0>)
 8008882:	f7ff fdf5 	bl	8008470 <xTaskCreateStatic>
 8008886:	4603      	mov	r3, r0
 8008888:	4a22      	ldr	r2, [pc, #136]	@ (8008914 <vTaskStartScheduler+0xc4>)
 800888a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800888c:	4b21      	ldr	r3, [pc, #132]	@ (8008914 <vTaskStartScheduler+0xc4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008894:	2301      	movs	r3, #1
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	e001      	b.n	800889e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d11d      	bne.n	80088e0 <vTaskStartScheduler+0x90>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	b672      	cpsid	i
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	b662      	cpsie	i
 80088b8:	613b      	str	r3, [r7, #16]
}
 80088ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088bc:	4b16      	ldr	r3, [pc, #88]	@ (8008918 <vTaskStartScheduler+0xc8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	334c      	adds	r3, #76	@ 0x4c
 80088c2:	4a16      	ldr	r2, [pc, #88]	@ (800891c <vTaskStartScheduler+0xcc>)
 80088c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088c6:	4b16      	ldr	r3, [pc, #88]	@ (8008920 <vTaskStartScheduler+0xd0>)
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ce:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <vTaskStartScheduler+0xd4>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088d4:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <vTaskStartScheduler+0xd8>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088da:	f000 ff41 	bl	8009760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088de:	e011      	b.n	8008904 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d10d      	bne.n	8008904 <vTaskStartScheduler+0xb4>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	b672      	cpsid	i
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	b662      	cpsie	i
 80088fc:	60fb      	str	r3, [r7, #12]
}
 80088fe:	bf00      	nop
 8008900:	bf00      	nop
 8008902:	e7fd      	b.n	8008900 <vTaskStartScheduler+0xb0>
}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	0800ce6c 	.word	0x0800ce6c
 8008910:	08008efd 	.word	0x08008efd
 8008914:	200011b0 	.word	0x200011b0
 8008918:	2000108c 	.word	0x2000108c
 800891c:	2000001c 	.word	0x2000001c
 8008920:	200011ac 	.word	0x200011ac
 8008924:	20001198 	.word	0x20001198
 8008928:	20001190 	.word	0x20001190

0800892c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008930:	4b04      	ldr	r3, [pc, #16]	@ (8008944 <vTaskSuspendAll+0x18>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a03      	ldr	r2, [pc, #12]	@ (8008944 <vTaskSuspendAll+0x18>)
 8008938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800893a:	bf00      	nop
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	200011b4 	.word	0x200011b4

08008948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008956:	4b43      	ldr	r3, [pc, #268]	@ (8008a64 <xTaskResumeAll+0x11c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10d      	bne.n	800897a <xTaskResumeAll+0x32>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	b672      	cpsid	i
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	b662      	cpsie	i
 8008972:	603b      	str	r3, [r7, #0]
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	e7fd      	b.n	8008976 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800897a:	f000 ff6f 	bl	800985c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800897e:	4b39      	ldr	r3, [pc, #228]	@ (8008a64 <xTaskResumeAll+0x11c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3b01      	subs	r3, #1
 8008984:	4a37      	ldr	r2, [pc, #220]	@ (8008a64 <xTaskResumeAll+0x11c>)
 8008986:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008988:	4b36      	ldr	r3, [pc, #216]	@ (8008a64 <xTaskResumeAll+0x11c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d161      	bne.n	8008a54 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008990:	4b35      	ldr	r3, [pc, #212]	@ (8008a68 <xTaskResumeAll+0x120>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d05d      	beq.n	8008a54 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008998:	e02e      	b.n	80089f8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800899a:	4b34      	ldr	r3, [pc, #208]	@ (8008a6c <xTaskResumeAll+0x124>)
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3318      	adds	r3, #24
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff f967 	bl	8007c7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3304      	adds	r3, #4
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7ff f962 	bl	8007c7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ba:	2201      	movs	r2, #1
 80089bc:	409a      	lsls	r2, r3
 80089be:	4b2c      	ldr	r3, [pc, #176]	@ (8008a70 <xTaskResumeAll+0x128>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008a70 <xTaskResumeAll+0x128>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4a27      	ldr	r2, [pc, #156]	@ (8008a74 <xTaskResumeAll+0x12c>)
 80089d6:	441a      	add	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7ff f8ee 	bl	8007bc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e8:	4b23      	ldr	r3, [pc, #140]	@ (8008a78 <xTaskResumeAll+0x130>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d302      	bcc.n	80089f8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80089f2:	4b22      	ldr	r3, [pc, #136]	@ (8008a7c <xTaskResumeAll+0x134>)
 80089f4:	2201      	movs	r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089f8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a6c <xTaskResumeAll+0x124>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1cc      	bne.n	800899a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a06:	f000 fb37 	bl	8009078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8008a80 <xTaskResumeAll+0x138>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d010      	beq.n	8008a38 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a16:	f000 f837 	bl	8008a88 <xTaskIncrementTick>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008a20:	4b16      	ldr	r3, [pc, #88]	@ (8008a7c <xTaskResumeAll+0x134>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f1      	bne.n	8008a16 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008a32:	4b13      	ldr	r3, [pc, #76]	@ (8008a80 <xTaskResumeAll+0x138>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a38:	4b10      	ldr	r3, [pc, #64]	@ (8008a7c <xTaskResumeAll+0x134>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a44:	4b0f      	ldr	r3, [pc, #60]	@ (8008a84 <xTaskResumeAll+0x13c>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a54:	f000 ff38 	bl	80098c8 <vPortExitCritical>

	return xAlreadyYielded;
 8008a58:	68bb      	ldr	r3, [r7, #8]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	200011b4 	.word	0x200011b4
 8008a68:	2000118c 	.word	0x2000118c
 8008a6c:	2000114c 	.word	0x2000114c
 8008a70:	20001194 	.word	0x20001194
 8008a74:	20001090 	.word	0x20001090
 8008a78:	2000108c 	.word	0x2000108c
 8008a7c:	200011a0 	.word	0x200011a0
 8008a80:	2000119c 	.word	0x2000119c
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a92:	4b50      	ldr	r3, [pc, #320]	@ (8008bd4 <xTaskIncrementTick+0x14c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f040 808b 	bne.w	8008bb2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8008bd8 <xTaskIncrementTick+0x150>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8008bd8 <xTaskIncrementTick+0x150>)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d123      	bne.n	8008af8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00d      	beq.n	8008ad6 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	b672      	cpsid	i
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	b662      	cpsie	i
 8008ace:	603b      	str	r3, [r7, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	e7fd      	b.n	8008ad2 <xTaskIncrementTick+0x4a>
 8008ad6:	4b41      	ldr	r3, [pc, #260]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	4b40      	ldr	r3, [pc, #256]	@ (8008be0 <xTaskIncrementTick+0x158>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8008be0 <xTaskIncrementTick+0x158>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	4b3e      	ldr	r3, [pc, #248]	@ (8008be4 <xTaskIncrementTick+0x15c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3301      	adds	r3, #1
 8008af0:	4a3c      	ldr	r2, [pc, #240]	@ (8008be4 <xTaskIncrementTick+0x15c>)
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	f000 fac0 	bl	8009078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008af8:	4b3b      	ldr	r3, [pc, #236]	@ (8008be8 <xTaskIncrementTick+0x160>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d348      	bcc.n	8008b94 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b02:	4b36      	ldr	r3, [pc, #216]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b0c:	4b36      	ldr	r3, [pc, #216]	@ (8008be8 <xTaskIncrementTick+0x160>)
 8008b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b12:	601a      	str	r2, [r3, #0]
					break;
 8008b14:	e03e      	b.n	8008b94 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b16:	4b31      	ldr	r3, [pc, #196]	@ (8008bdc <xTaskIncrementTick+0x154>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d203      	bcs.n	8008b36 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8008be8 <xTaskIncrementTick+0x160>)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b34:	e02e      	b.n	8008b94 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff f89d 	bl	8007c7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3318      	adds	r3, #24
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff f894 	bl	8007c7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b56:	2201      	movs	r2, #1
 8008b58:	409a      	lsls	r2, r3
 8008b5a:	4b24      	ldr	r3, [pc, #144]	@ (8008bec <xTaskIncrementTick+0x164>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	4a22      	ldr	r2, [pc, #136]	@ (8008bec <xTaskIncrementTick+0x164>)
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4a1f      	ldr	r2, [pc, #124]	@ (8008bf0 <xTaskIncrementTick+0x168>)
 8008b72:	441a      	add	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f7ff f820 	bl	8007bc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b84:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf4 <xTaskIncrementTick+0x16c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d3b9      	bcc.n	8008b02 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b92:	e7b6      	b.n	8008b02 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b94:	4b17      	ldr	r3, [pc, #92]	@ (8008bf4 <xTaskIncrementTick+0x16c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9a:	4915      	ldr	r1, [pc, #84]	@ (8008bf0 <xTaskIncrementTick+0x168>)
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d907      	bls.n	8008bbc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008bac:	2301      	movs	r3, #1
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	e004      	b.n	8008bbc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bb2:	4b11      	ldr	r3, [pc, #68]	@ (8008bf8 <xTaskIncrementTick+0x170>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf8 <xTaskIncrementTick+0x170>)
 8008bba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008bfc <xTaskIncrementTick+0x174>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008bc8:	697b      	ldr	r3, [r7, #20]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	200011b4 	.word	0x200011b4
 8008bd8:	20001190 	.word	0x20001190
 8008bdc:	20001144 	.word	0x20001144
 8008be0:	20001148 	.word	0x20001148
 8008be4:	200011a4 	.word	0x200011a4
 8008be8:	200011ac 	.word	0x200011ac
 8008bec:	20001194 	.word	0x20001194
 8008bf0:	20001090 	.word	0x20001090
 8008bf4:	2000108c 	.word	0x2000108c
 8008bf8:	2000119c 	.word	0x2000119c
 8008bfc:	200011a0 	.word	0x200011a0

08008c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c06:	4b2b      	ldr	r3, [pc, #172]	@ (8008cb4 <vTaskSwitchContext+0xb4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb8 <vTaskSwitchContext+0xb8>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c14:	e047      	b.n	8008ca6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008c16:	4b28      	ldr	r3, [pc, #160]	@ (8008cb8 <vTaskSwitchContext+0xb8>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1c:	4b27      	ldr	r3, [pc, #156]	@ (8008cbc <vTaskSwitchContext+0xbc>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	fab3 f383 	clz	r3, r3
 8008c28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008c2a:	7afb      	ldrb	r3, [r7, #11]
 8008c2c:	f1c3 031f 	rsb	r3, r3, #31
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	4923      	ldr	r1, [pc, #140]	@ (8008cc0 <vTaskSwitchContext+0xc0>)
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10d      	bne.n	8008c62 <vTaskSwitchContext+0x62>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4a:	b672      	cpsid	i
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	b662      	cpsie	i
 8008c5a:	607b      	str	r3, [r7, #4]
}
 8008c5c:	bf00      	nop
 8008c5e:	bf00      	nop
 8008c60:	e7fd      	b.n	8008c5e <vTaskSwitchContext+0x5e>
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4a14      	ldr	r2, [pc, #80]	@ (8008cc0 <vTaskSwitchContext+0xc0>)
 8008c6e:	4413      	add	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	605a      	str	r2, [r3, #4]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	3308      	adds	r3, #8
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d104      	bne.n	8008c92 <vTaskSwitchContext+0x92>
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	605a      	str	r2, [r3, #4]
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc4 <vTaskSwitchContext+0xc4>)
 8008c9a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c9c:	4b09      	ldr	r3, [pc, #36]	@ (8008cc4 <vTaskSwitchContext+0xc4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	334c      	adds	r3, #76	@ 0x4c
 8008ca2:	4a09      	ldr	r2, [pc, #36]	@ (8008cc8 <vTaskSwitchContext+0xc8>)
 8008ca4:	6013      	str	r3, [r2, #0]
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	200011b4 	.word	0x200011b4
 8008cb8:	200011a0 	.word	0x200011a0
 8008cbc:	20001194 	.word	0x20001194
 8008cc0:	20001090 	.word	0x20001090
 8008cc4:	2000108c 	.word	0x2000108c
 8008cc8:	2000001c 	.word	0x2000001c

08008ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10d      	bne.n	8008cf8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	b672      	cpsid	i
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	b662      	cpsie	i
 8008cf0:	60fb      	str	r3, [r7, #12]
}
 8008cf2:	bf00      	nop
 8008cf4:	bf00      	nop
 8008cf6:	e7fd      	b.n	8008cf4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cf8:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <vTaskPlaceOnEventList+0x4c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3318      	adds	r3, #24
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fe ff81 	bl	8007c08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d06:	2101      	movs	r1, #1
 8008d08:	6838      	ldr	r0, [r7, #0]
 8008d0a:	f000 fc2f 	bl	800956c <prvAddCurrentTaskToDelayedList>
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	2000108c 	.word	0x2000108c

08008d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10d      	bne.n	8008d4e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	b672      	cpsid	i
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	b662      	cpsie	i
 8008d46:	60fb      	str	r3, [r7, #12]
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	e7fd      	b.n	8008d4a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3318      	adds	r3, #24
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe ff91 	bl	8007c7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d58:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd0 <xTaskRemoveFromEventList+0xb4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11c      	bne.n	8008d9a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe ff88 	bl	8007c7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6e:	2201      	movs	r2, #1
 8008d70:	409a      	lsls	r2, r3
 8008d72:	4b18      	ldr	r3, [pc, #96]	@ (8008dd4 <xTaskRemoveFromEventList+0xb8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	4a16      	ldr	r2, [pc, #88]	@ (8008dd4 <xTaskRemoveFromEventList+0xb8>)
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4a13      	ldr	r2, [pc, #76]	@ (8008dd8 <xTaskRemoveFromEventList+0xbc>)
 8008d8a:	441a      	add	r2, r3
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	3304      	adds	r3, #4
 8008d90:	4619      	mov	r1, r3
 8008d92:	4610      	mov	r0, r2
 8008d94:	f7fe ff14 	bl	8007bc0 <vListInsertEnd>
 8008d98:	e005      	b.n	8008da6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	3318      	adds	r3, #24
 8008d9e:	4619      	mov	r1, r3
 8008da0:	480e      	ldr	r0, [pc, #56]	@ (8008ddc <xTaskRemoveFromEventList+0xc0>)
 8008da2:	f7fe ff0d 	bl	8007bc0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008daa:	4b0d      	ldr	r3, [pc, #52]	@ (8008de0 <xTaskRemoveFromEventList+0xc4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d905      	bls.n	8008dc0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008db4:	2301      	movs	r3, #1
 8008db6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008db8:	4b0a      	ldr	r3, [pc, #40]	@ (8008de4 <xTaskRemoveFromEventList+0xc8>)
 8008dba:	2201      	movs	r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e001      	b.n	8008dc4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dc4:	697b      	ldr	r3, [r7, #20]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	200011b4 	.word	0x200011b4
 8008dd4:	20001194 	.word	0x20001194
 8008dd8:	20001090 	.word	0x20001090
 8008ddc:	2000114c 	.word	0x2000114c
 8008de0:	2000108c 	.word	0x2000108c
 8008de4:	200011a0 	.word	0x200011a0

08008de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008df0:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <vTaskInternalSetTimeOutState+0x24>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <vTaskInternalSetTimeOutState+0x28>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	605a      	str	r2, [r3, #4]
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	200011a4 	.word	0x200011a4
 8008e10:	20001190 	.word	0x20001190

08008e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10d      	bne.n	8008e40 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
 8008e38:	613b      	str	r3, [r7, #16]
}
 8008e3a:	bf00      	nop
 8008e3c:	bf00      	nop
 8008e3e:	e7fd      	b.n	8008e3c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10d      	bne.n	8008e62 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	b672      	cpsid	i
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	b662      	cpsie	i
 8008e5a:	60fb      	str	r3, [r7, #12]
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	e7fd      	b.n	8008e5e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008e62:	f000 fcfb 	bl	800985c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e66:	4b1d      	ldr	r3, [pc, #116]	@ (8008edc <xTaskCheckForTimeOut+0xc8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d102      	bne.n	8008e86 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
 8008e84:	e023      	b.n	8008ece <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ee0 <xTaskCheckForTimeOut+0xcc>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d007      	beq.n	8008ea2 <xTaskCheckForTimeOut+0x8e>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d302      	bcc.n	8008ea2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	e015      	b.n	8008ece <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d20b      	bcs.n	8008ec4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	1ad2      	subs	r2, r2, r3
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff ff95 	bl	8008de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	e004      	b.n	8008ece <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ece:	f000 fcfb 	bl	80098c8 <vPortExitCritical>

	return xReturn;
 8008ed2:	69fb      	ldr	r3, [r7, #28]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20001190 	.word	0x20001190
 8008ee0:	200011a4 	.word	0x200011a4

08008ee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ee8:	4b03      	ldr	r3, [pc, #12]	@ (8008ef8 <vTaskMissedYield+0x14>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	601a      	str	r2, [r3, #0]
}
 8008eee:	bf00      	nop
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	200011a0 	.word	0x200011a0

08008efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f04:	f000 f852 	bl	8008fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f08:	4b06      	ldr	r3, [pc, #24]	@ (8008f24 <prvIdleTask+0x28>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d9f9      	bls.n	8008f04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f10:	4b05      	ldr	r3, [pc, #20]	@ (8008f28 <prvIdleTask+0x2c>)
 8008f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f20:	e7f0      	b.n	8008f04 <prvIdleTask+0x8>
 8008f22:	bf00      	nop
 8008f24:	20001090 	.word	0x20001090
 8008f28:	e000ed04 	.word	0xe000ed04

08008f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f32:	2300      	movs	r3, #0
 8008f34:	607b      	str	r3, [r7, #4]
 8008f36:	e00c      	b.n	8008f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4a12      	ldr	r2, [pc, #72]	@ (8008f8c <prvInitialiseTaskLists+0x60>)
 8008f44:	4413      	add	r3, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fe0d 	bl	8007b66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	607b      	str	r3, [r7, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b06      	cmp	r3, #6
 8008f56:	d9ef      	bls.n	8008f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f58:	480d      	ldr	r0, [pc, #52]	@ (8008f90 <prvInitialiseTaskLists+0x64>)
 8008f5a:	f7fe fe04 	bl	8007b66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f5e:	480d      	ldr	r0, [pc, #52]	@ (8008f94 <prvInitialiseTaskLists+0x68>)
 8008f60:	f7fe fe01 	bl	8007b66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f64:	480c      	ldr	r0, [pc, #48]	@ (8008f98 <prvInitialiseTaskLists+0x6c>)
 8008f66:	f7fe fdfe 	bl	8007b66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f6a:	480c      	ldr	r0, [pc, #48]	@ (8008f9c <prvInitialiseTaskLists+0x70>)
 8008f6c:	f7fe fdfb 	bl	8007b66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f70:	480b      	ldr	r0, [pc, #44]	@ (8008fa0 <prvInitialiseTaskLists+0x74>)
 8008f72:	f7fe fdf8 	bl	8007b66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa4 <prvInitialiseTaskLists+0x78>)
 8008f78:	4a05      	ldr	r2, [pc, #20]	@ (8008f90 <prvInitialiseTaskLists+0x64>)
 8008f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <prvInitialiseTaskLists+0x7c>)
 8008f7e:	4a05      	ldr	r2, [pc, #20]	@ (8008f94 <prvInitialiseTaskLists+0x68>)
 8008f80:	601a      	str	r2, [r3, #0]
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20001090 	.word	0x20001090
 8008f90:	2000111c 	.word	0x2000111c
 8008f94:	20001130 	.word	0x20001130
 8008f98:	2000114c 	.word	0x2000114c
 8008f9c:	20001160 	.word	0x20001160
 8008fa0:	20001178 	.word	0x20001178
 8008fa4:	20001144 	.word	0x20001144
 8008fa8:	20001148 	.word	0x20001148

08008fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fb2:	e019      	b.n	8008fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fb4:	f000 fc52 	bl	800985c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb8:	4b10      	ldr	r3, [pc, #64]	@ (8008ffc <prvCheckTasksWaitingTermination+0x50>)
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe fe58 	bl	8007c7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fca:	4b0d      	ldr	r3, [pc, #52]	@ (8009000 <prvCheckTasksWaitingTermination+0x54>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8009000 <prvCheckTasksWaitingTermination+0x54>)
 8008fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8009004 <prvCheckTasksWaitingTermination+0x58>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	4a0a      	ldr	r2, [pc, #40]	@ (8009004 <prvCheckTasksWaitingTermination+0x58>)
 8008fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fde:	f000 fc73 	bl	80098c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f810 	bl	8009008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fe8:	4b06      	ldr	r3, [pc, #24]	@ (8009004 <prvCheckTasksWaitingTermination+0x58>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e1      	bne.n	8008fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20001160 	.word	0x20001160
 8009000:	2000118c 	.word	0x2000118c
 8009004:	20001174 	.word	0x20001174

08009008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	334c      	adds	r3, #76	@ 0x4c
 8009014:	4618      	mov	r0, r3
 8009016:	f001 fdb5 	bl	800ab84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009020:	2b00      	cmp	r3, #0
 8009022:	d108      	bne.n	8009036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fe13 	bl	8009c54 <vPortFree>
				vPortFree( pxTCB );
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fe10 	bl	8009c54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009034:	e01b      	b.n	800906e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800903c:	2b01      	cmp	r3, #1
 800903e:	d103      	bne.n	8009048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fe07 	bl	8009c54 <vPortFree>
	}
 8009046:	e012      	b.n	800906e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800904e:	2b02      	cmp	r3, #2
 8009050:	d00d      	beq.n	800906e <prvDeleteTCB+0x66>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009056:	b672      	cpsid	i
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	b662      	cpsie	i
 8009066:	60fb      	str	r3, [r7, #12]
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	e7fd      	b.n	800906a <prvDeleteTCB+0x62>
	}
 800906e:	bf00      	nop
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800907e:	4b0c      	ldr	r3, [pc, #48]	@ (80090b0 <prvResetNextTaskUnblockTime+0x38>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d104      	bne.n	8009092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009088:	4b0a      	ldr	r3, [pc, #40]	@ (80090b4 <prvResetNextTaskUnblockTime+0x3c>)
 800908a:	f04f 32ff 	mov.w	r2, #4294967295
 800908e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009090:	e008      	b.n	80090a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009092:	4b07      	ldr	r3, [pc, #28]	@ (80090b0 <prvResetNextTaskUnblockTime+0x38>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	4a04      	ldr	r2, [pc, #16]	@ (80090b4 <prvResetNextTaskUnblockTime+0x3c>)
 80090a2:	6013      	str	r3, [r2, #0]
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	20001144 	.word	0x20001144
 80090b4:	200011ac 	.word	0x200011ac

080090b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090be:	4b0b      	ldr	r3, [pc, #44]	@ (80090ec <xTaskGetSchedulerState+0x34>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d102      	bne.n	80090cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090c6:	2301      	movs	r3, #1
 80090c8:	607b      	str	r3, [r7, #4]
 80090ca:	e008      	b.n	80090de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090cc:	4b08      	ldr	r3, [pc, #32]	@ (80090f0 <xTaskGetSchedulerState+0x38>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d102      	bne.n	80090da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090d4:	2302      	movs	r3, #2
 80090d6:	607b      	str	r3, [r7, #4]
 80090d8:	e001      	b.n	80090de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090da:	2300      	movs	r3, #0
 80090dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090de:	687b      	ldr	r3, [r7, #4]
	}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	20001198 	.word	0x20001198
 80090f0:	200011b4 	.word	0x200011b4

080090f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d074      	beq.n	80091f4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800910a:	4b3d      	ldr	r3, [pc, #244]	@ (8009200 <xTaskPriorityDisinherit+0x10c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	429a      	cmp	r2, r3
 8009112:	d00d      	beq.n	8009130 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	b672      	cpsid	i
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	b662      	cpsie	i
 8009128:	60fb      	str	r3, [r7, #12]
}
 800912a:	bf00      	nop
 800912c:	bf00      	nop
 800912e:	e7fd      	b.n	800912c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10d      	bne.n	8009154 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913c:	b672      	cpsid	i
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	b662      	cpsie	i
 800914c:	60bb      	str	r3, [r7, #8]
}
 800914e:	bf00      	nop
 8009150:	bf00      	nop
 8009152:	e7fd      	b.n	8009150 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009158:	1e5a      	subs	r2, r3, #1
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009166:	429a      	cmp	r2, r3
 8009168:	d044      	beq.n	80091f4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916e:	2b00      	cmp	r3, #0
 8009170:	d140      	bne.n	80091f4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	3304      	adds	r3, #4
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe fd7f 	bl	8007c7a <uxListRemove>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d115      	bne.n	80091ae <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009186:	491f      	ldr	r1, [pc, #124]	@ (8009204 <xTaskPriorityDisinherit+0x110>)
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <xTaskPriorityDisinherit+0xba>
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919c:	2201      	movs	r2, #1
 800919e:	fa02 f303 	lsl.w	r3, r2, r3
 80091a2:	43da      	mvns	r2, r3
 80091a4:	4b18      	ldr	r3, [pc, #96]	@ (8009208 <xTaskPriorityDisinherit+0x114>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4013      	ands	r3, r2
 80091aa:	4a17      	ldr	r2, [pc, #92]	@ (8009208 <xTaskPriorityDisinherit+0x114>)
 80091ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ba:	f1c3 0207 	rsb	r2, r3, #7
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c6:	2201      	movs	r2, #1
 80091c8:	409a      	lsls	r2, r3
 80091ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009208 <xTaskPriorityDisinherit+0x114>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	4a0d      	ldr	r2, [pc, #52]	@ (8009208 <xTaskPriorityDisinherit+0x114>)
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4a08      	ldr	r2, [pc, #32]	@ (8009204 <xTaskPriorityDisinherit+0x110>)
 80091e2:	441a      	add	r2, r3
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4610      	mov	r0, r2
 80091ec:	f7fe fce8 	bl	8007bc0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091f0:	2301      	movs	r3, #1
 80091f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091f4:	697b      	ldr	r3, [r7, #20]
	}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	2000108c 	.word	0x2000108c
 8009204:	20001090 	.word	0x20001090
 8009208:	20001194 	.word	0x20001194

0800920c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009216:	f000 fb21 	bl	800985c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800921a:	4b20      	ldr	r3, [pc, #128]	@ (800929c <ulTaskNotifyTake+0x90>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009222:	2b00      	cmp	r3, #0
 8009224:	d113      	bne.n	800924e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009226:	4b1d      	ldr	r3, [pc, #116]	@ (800929c <ulTaskNotifyTake+0x90>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00b      	beq.n	800924e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009236:	2101      	movs	r1, #1
 8009238:	6838      	ldr	r0, [r7, #0]
 800923a:	f000 f997 	bl	800956c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800923e:	4b18      	ldr	r3, [pc, #96]	@ (80092a0 <ulTaskNotifyTake+0x94>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800924e:	f000 fb3b 	bl	80098c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009252:	f000 fb03 	bl	800985c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009256:	4b11      	ldr	r3, [pc, #68]	@ (800929c <ulTaskNotifyTake+0x90>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800925e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00e      	beq.n	8009284 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d005      	beq.n	8009278 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800926c:	4b0b      	ldr	r3, [pc, #44]	@ (800929c <ulTaskNotifyTake+0x90>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009276:	e005      	b.n	8009284 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009278:	4b08      	ldr	r3, [pc, #32]	@ (800929c <ulTaskNotifyTake+0x90>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	3a01      	subs	r2, #1
 8009280:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009284:	4b05      	ldr	r3, [pc, #20]	@ (800929c <ulTaskNotifyTake+0x90>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800928e:	f000 fb1b 	bl	80098c8 <vPortExitCritical>

		return ulReturn;
 8009292:	68fb      	ldr	r3, [r7, #12]
	}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	2000108c 	.word	0x2000108c
 80092a0:	e000ed04 	.word	0xe000ed04

080092a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08a      	sub	sp, #40	@ 0x28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80092b4:	2301      	movs	r3, #1
 80092b6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10d      	bne.n	80092da <xTaskGenericNotify+0x36>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c2:	b672      	cpsid	i
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	b662      	cpsie	i
 80092d2:	61bb      	str	r3, [r7, #24]
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
 80092d8:	e7fd      	b.n	80092d6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80092de:	f000 fabd 	bl	800985c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d004      	beq.n	80092f2 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80092f8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	2202      	movs	r2, #2
 80092fe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	2b04      	cmp	r3, #4
 8009306:	d82e      	bhi.n	8009366 <xTaskGenericNotify+0xc2>
 8009308:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <xTaskGenericNotify+0x6c>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	0800938f 	.word	0x0800938f
 8009314:	08009325 	.word	0x08009325
 8009318:	08009337 	.word	0x08009337
 800931c:	08009347 	.word	0x08009347
 8009320:	08009351 	.word	0x08009351
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	431a      	orrs	r2, r3
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009334:	e02e      	b.n	8009394 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009344:	e026      	b.n	8009394 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800934e:	e021      	b.n	8009394 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009350:	7ffb      	ldrb	r3, [r7, #31]
 8009352:	2b02      	cmp	r3, #2
 8009354:	d004      	beq.n	8009360 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800935e:	e019      	b.n	8009394 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8009360:	2300      	movs	r3, #0
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009364:	e016      	b.n	8009394 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009370:	d00f      	beq.n	8009392 <xTaskGenericNotify+0xee>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009376:	b672      	cpsid	i
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	b662      	cpsie	i
 8009386:	617b      	str	r3, [r7, #20]
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	e7fd      	b.n	800938a <xTaskGenericNotify+0xe6>
					break;
 800938e:	bf00      	nop
 8009390:	e000      	b.n	8009394 <xTaskGenericNotify+0xf0>

					break;
 8009392:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009394:	7ffb      	ldrb	r3, [r7, #31]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d13c      	bne.n	8009414 <xTaskGenericNotify+0x170>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	3304      	adds	r3, #4
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fc6b 	bl	8007c7a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a8:	2201      	movs	r2, #1
 80093aa:	409a      	lsls	r2, r3
 80093ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009424 <xTaskGenericNotify+0x180>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009424 <xTaskGenericNotify+0x180>)
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4a19      	ldr	r2, [pc, #100]	@ (8009428 <xTaskGenericNotify+0x184>)
 80093c4:	441a      	add	r2, r3
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f7fe fbf7 	bl	8007bc0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <xTaskGenericNotify+0x152>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093de:	b672      	cpsid	i
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	b662      	cpsie	i
 80093ee:	613b      	str	r3, [r7, #16]
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	e7fd      	b.n	80093f2 <xTaskGenericNotify+0x14e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fa:	4b0c      	ldr	r3, [pc, #48]	@ (800942c <xTaskGenericNotify+0x188>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009400:	429a      	cmp	r2, r3
 8009402:	d907      	bls.n	8009414 <xTaskGenericNotify+0x170>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009404:	4b0a      	ldr	r3, [pc, #40]	@ (8009430 <xTaskGenericNotify+0x18c>)
 8009406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009414:	f000 fa58 	bl	80098c8 <vPortExitCritical>

		return xReturn;
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800941a:	4618      	mov	r0, r3
 800941c:	3728      	adds	r7, #40	@ 0x28
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20001194 	.word	0x20001194
 8009428:	20001090 	.word	0x20001090
 800942c:	2000108c 	.word	0x2000108c
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08a      	sub	sp, #40	@ 0x28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10d      	bne.n	8009460 <vTaskNotifyGiveFromISR+0x2c>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009448:	b672      	cpsid	i
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	b662      	cpsie	i
 8009458:	61bb      	str	r3, [r7, #24]
}
 800945a:	bf00      	nop
 800945c:	bf00      	nop
 800945e:	e7fd      	b.n	800945c <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009460:	f000 fae4 	bl	8009a2c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009468:	f3ef 8211 	mrs	r2, BASEPRI
 800946c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009470:	b672      	cpsid	i
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	b662      	cpsie	i
 8009480:	617a      	str	r2, [r7, #20]
 8009482:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009484:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009486:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800948e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009492:	2202      	movs	r2, #2
 8009494:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80094a6:	7ffb      	ldrb	r3, [r7, #31]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d148      	bne.n	800953e <vTaskNotifyGiveFromISR+0x10a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00d      	beq.n	80094d0 <vTaskNotifyGiveFromISR+0x9c>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	b672      	cpsid	i
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	b662      	cpsie	i
 80094c8:	60fb      	str	r3, [r7, #12]
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <vTaskNotifyGiveFromISR+0x98>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d0:	4b20      	ldr	r3, [pc, #128]	@ (8009554 <vTaskNotifyGiveFromISR+0x120>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d11c      	bne.n	8009512 <vTaskNotifyGiveFromISR+0xde>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	3304      	adds	r3, #4
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fe fbcc 	bl	8007c7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e6:	2201      	movs	r2, #1
 80094e8:	409a      	lsls	r2, r3
 80094ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009558 <vTaskNotifyGiveFromISR+0x124>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	4a19      	ldr	r2, [pc, #100]	@ (8009558 <vTaskNotifyGiveFromISR+0x124>)
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4a16      	ldr	r2, [pc, #88]	@ (800955c <vTaskNotifyGiveFromISR+0x128>)
 8009502:	441a      	add	r2, r3
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	3304      	adds	r3, #4
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7fe fb58 	bl	8007bc0 <vListInsertEnd>
 8009510:	e005      	b.n	800951e <vTaskNotifyGiveFromISR+0xea>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009514:	3318      	adds	r3, #24
 8009516:	4619      	mov	r1, r3
 8009518:	4811      	ldr	r0, [pc, #68]	@ (8009560 <vTaskNotifyGiveFromISR+0x12c>)
 800951a:	f7fe fb51 	bl	8007bc0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009522:	4b10      	ldr	r3, [pc, #64]	@ (8009564 <vTaskNotifyGiveFromISR+0x130>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009528:	429a      	cmp	r2, r3
 800952a:	d908      	bls.n	800953e <vTaskNotifyGiveFromISR+0x10a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <vTaskNotifyGiveFromISR+0x104>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2201      	movs	r2, #1
 8009536:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009538:	4b0b      	ldr	r3, [pc, #44]	@ (8009568 <vTaskNotifyGiveFromISR+0x134>)
 800953a:	2201      	movs	r2, #1
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009548:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800954a:	bf00      	nop
 800954c:	3728      	adds	r7, #40	@ 0x28
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200011b4 	.word	0x200011b4
 8009558:	20001194 	.word	0x20001194
 800955c:	20001090 	.word	0x20001090
 8009560:	2000114c 	.word	0x2000114c
 8009564:	2000108c 	.word	0x2000108c
 8009568:	200011a0 	.word	0x200011a0

0800956c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009576:	4b29      	ldr	r3, [pc, #164]	@ (800961c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800957c:	4b28      	ldr	r3, [pc, #160]	@ (8009620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3304      	adds	r3, #4
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe fb79 	bl	8007c7a <uxListRemove>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10b      	bne.n	80095a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800958e:	4b24      	ldr	r3, [pc, #144]	@ (8009620 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009594:	2201      	movs	r2, #1
 8009596:	fa02 f303 	lsl.w	r3, r2, r3
 800959a:	43da      	mvns	r2, r3
 800959c:	4b21      	ldr	r3, [pc, #132]	@ (8009624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4013      	ands	r3, r2
 80095a2:	4a20      	ldr	r2, [pc, #128]	@ (8009624 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ac:	d10a      	bne.n	80095c4 <prvAddCurrentTaskToDelayedList+0x58>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d007      	beq.n	80095c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3304      	adds	r3, #4
 80095ba:	4619      	mov	r1, r3
 80095bc:	481a      	ldr	r0, [pc, #104]	@ (8009628 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095be:	f7fe faff 	bl	8007bc0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095c2:	e026      	b.n	8009612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4413      	add	r3, r2
 80095ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095cc:	4b14      	ldr	r3, [pc, #80]	@ (8009620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d209      	bcs.n	80095f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095dc:	4b13      	ldr	r3, [pc, #76]	@ (800962c <prvAddCurrentTaskToDelayedList+0xc0>)
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4619      	mov	r1, r3
 80095e8:	4610      	mov	r0, r2
 80095ea:	f7fe fb0d 	bl	8007c08 <vListInsert>
}
 80095ee:	e010      	b.n	8009612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009630 <prvAddCurrentTaskToDelayedList+0xc4>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7fe fb03 	bl	8007c08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009602:	4b0c      	ldr	r3, [pc, #48]	@ (8009634 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	429a      	cmp	r2, r3
 800960a:	d202      	bcs.n	8009612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800960c:	4a09      	ldr	r2, [pc, #36]	@ (8009634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6013      	str	r3, [r2, #0]
}
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20001190 	.word	0x20001190
 8009620:	2000108c 	.word	0x2000108c
 8009624:	20001194 	.word	0x20001194
 8009628:	20001178 	.word	0x20001178
 800962c:	20001148 	.word	0x20001148
 8009630:	20001144 	.word	0x20001144
 8009634:	200011ac 	.word	0x200011ac

08009638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3b04      	subs	r3, #4
 8009648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3b04      	subs	r3, #4
 8009656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f023 0201 	bic.w	r2, r3, #1
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3b04      	subs	r3, #4
 8009666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009668:	4a0c      	ldr	r2, [pc, #48]	@ (800969c <pxPortInitialiseStack+0x64>)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3b14      	subs	r3, #20
 8009672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3b04      	subs	r3, #4
 800967e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f06f 0202 	mvn.w	r2, #2
 8009686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3b20      	subs	r3, #32
 800968c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800968e:	68fb      	ldr	r3, [r7, #12]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	080096a1 	.word	0x080096a1

080096a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096aa:	4b15      	ldr	r3, [pc, #84]	@ (8009700 <prvTaskExitError+0x60>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b2:	d00d      	beq.n	80096d0 <prvTaskExitError+0x30>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b8:	b672      	cpsid	i
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	b662      	cpsie	i
 80096c8:	60fb      	str	r3, [r7, #12]
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	e7fd      	b.n	80096cc <prvTaskExitError+0x2c>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	b672      	cpsid	i
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	b662      	cpsie	i
 80096e4:	60bb      	str	r3, [r7, #8]
}
 80096e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096e8:	bf00      	nop
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0fc      	beq.n	80096ea <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096f0:	bf00      	nop
 80096f2:	bf00      	nop
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	2000000c 	.word	0x2000000c
	...

08009710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009710:	4b07      	ldr	r3, [pc, #28]	@ (8009730 <pxCurrentTCBConst2>)
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	6808      	ldr	r0, [r1, #0]
 8009716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971a:	f380 8809 	msr	PSP, r0
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f04f 0000 	mov.w	r0, #0
 8009726:	f380 8811 	msr	BASEPRI, r0
 800972a:	4770      	bx	lr
 800972c:	f3af 8000 	nop.w

08009730 <pxCurrentTCBConst2>:
 8009730:	2000108c 	.word	0x2000108c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop

08009738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009738:	4808      	ldr	r0, [pc, #32]	@ (800975c <prvPortStartFirstTask+0x24>)
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	6800      	ldr	r0, [r0, #0]
 800973e:	f380 8808 	msr	MSP, r0
 8009742:	f04f 0000 	mov.w	r0, #0
 8009746:	f380 8814 	msr	CONTROL, r0
 800974a:	b662      	cpsie	i
 800974c:	b661      	cpsie	f
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	df00      	svc	0
 8009758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800975a:	bf00      	nop
 800975c:	e000ed08 	.word	0xe000ed08

08009760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009766:	4b37      	ldr	r3, [pc, #220]	@ (8009844 <xPortStartScheduler+0xe4>)
 8009768:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	22ff      	movs	r2, #255	@ 0xff
 8009776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4b2f      	ldr	r3, [pc, #188]	@ (8009848 <xPortStartScheduler+0xe8>)
 800978c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800978e:	4b2f      	ldr	r3, [pc, #188]	@ (800984c <xPortStartScheduler+0xec>)
 8009790:	2207      	movs	r2, #7
 8009792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009794:	e009      	b.n	80097aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009796:	4b2d      	ldr	r3, [pc, #180]	@ (800984c <xPortStartScheduler+0xec>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3b01      	subs	r3, #1
 800979c:	4a2b      	ldr	r2, [pc, #172]	@ (800984c <xPortStartScheduler+0xec>)
 800979e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b2:	2b80      	cmp	r3, #128	@ 0x80
 80097b4:	d0ef      	beq.n	8009796 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097b6:	4b25      	ldr	r3, [pc, #148]	@ (800984c <xPortStartScheduler+0xec>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f1c3 0307 	rsb	r3, r3, #7
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d00d      	beq.n	80097de <xPortStartScheduler+0x7e>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	b672      	cpsid	i
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	b662      	cpsie	i
 80097d6:	60bb      	str	r3, [r7, #8]
}
 80097d8:	bf00      	nop
 80097da:	bf00      	nop
 80097dc:	e7fd      	b.n	80097da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097de:	4b1b      	ldr	r3, [pc, #108]	@ (800984c <xPortStartScheduler+0xec>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	021b      	lsls	r3, r3, #8
 80097e4:	4a19      	ldr	r2, [pc, #100]	@ (800984c <xPortStartScheduler+0xec>)
 80097e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097e8:	4b18      	ldr	r3, [pc, #96]	@ (800984c <xPortStartScheduler+0xec>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097f0:	4a16      	ldr	r2, [pc, #88]	@ (800984c <xPortStartScheduler+0xec>)
 80097f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097fc:	4b14      	ldr	r3, [pc, #80]	@ (8009850 <xPortStartScheduler+0xf0>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a13      	ldr	r2, [pc, #76]	@ (8009850 <xPortStartScheduler+0xf0>)
 8009802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009808:	4b11      	ldr	r3, [pc, #68]	@ (8009850 <xPortStartScheduler+0xf0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a10      	ldr	r2, [pc, #64]	@ (8009850 <xPortStartScheduler+0xf0>)
 800980e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009814:	f000 f8dc 	bl	80099d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009818:	4b0e      	ldr	r3, [pc, #56]	@ (8009854 <xPortStartScheduler+0xf4>)
 800981a:	2200      	movs	r2, #0
 800981c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800981e:	f000 f8fb 	bl	8009a18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009822:	4b0d      	ldr	r3, [pc, #52]	@ (8009858 <xPortStartScheduler+0xf8>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a0c      	ldr	r2, [pc, #48]	@ (8009858 <xPortStartScheduler+0xf8>)
 8009828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800982c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800982e:	f7ff ff83 	bl	8009738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009832:	f7ff f9e5 	bl	8008c00 <vTaskSwitchContext>
	prvTaskExitError();
 8009836:	f7ff ff33 	bl	80096a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	e000e400 	.word	0xe000e400
 8009848:	200011b8 	.word	0x200011b8
 800984c:	200011bc 	.word	0x200011bc
 8009850:	e000ed20 	.word	0xe000ed20
 8009854:	2000000c 	.word	0x2000000c
 8009858:	e000ef34 	.word	0xe000ef34

0800985c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	b672      	cpsid	i
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	b662      	cpsie	i
 8009876:	607b      	str	r3, [r7, #4]
}
 8009878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800987a:	4b11      	ldr	r3, [pc, #68]	@ (80098c0 <vPortEnterCritical+0x64>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3301      	adds	r3, #1
 8009880:	4a0f      	ldr	r2, [pc, #60]	@ (80098c0 <vPortEnterCritical+0x64>)
 8009882:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009884:	4b0e      	ldr	r3, [pc, #56]	@ (80098c0 <vPortEnterCritical+0x64>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d112      	bne.n	80098b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800988c:	4b0d      	ldr	r3, [pc, #52]	@ (80098c4 <vPortEnterCritical+0x68>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00d      	beq.n	80098b2 <vPortEnterCritical+0x56>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	b672      	cpsid	i
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	b662      	cpsie	i
 80098aa:	603b      	str	r3, [r7, #0]
}
 80098ac:	bf00      	nop
 80098ae:	bf00      	nop
 80098b0:	e7fd      	b.n	80098ae <vPortEnterCritical+0x52>
	}
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	2000000c 	.word	0x2000000c
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ce:	4b13      	ldr	r3, [pc, #76]	@ (800991c <vPortExitCritical+0x54>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10d      	bne.n	80098f2 <vPortExitCritical+0x2a>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098da:	b672      	cpsid	i
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	b662      	cpsie	i
 80098ea:	607b      	str	r3, [r7, #4]
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80098f2:	4b0a      	ldr	r3, [pc, #40]	@ (800991c <vPortExitCritical+0x54>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	4a08      	ldr	r2, [pc, #32]	@ (800991c <vPortExitCritical+0x54>)
 80098fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098fc:	4b07      	ldr	r3, [pc, #28]	@ (800991c <vPortExitCritical+0x54>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d105      	bne.n	8009910 <vPortExitCritical+0x48>
 8009904:	2300      	movs	r3, #0
 8009906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f383 8811 	msr	BASEPRI, r3
}
 800990e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	2000000c 	.word	0x2000000c

08009920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009920:	f3ef 8009 	mrs	r0, PSP
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4b15      	ldr	r3, [pc, #84]	@ (8009980 <pxCurrentTCBConst>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f01e 0f10 	tst.w	lr, #16
 8009930:	bf08      	it	eq
 8009932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993a:	6010      	str	r0, [r2, #0]
 800993c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009944:	b672      	cpsid	i
 8009946:	f380 8811 	msr	BASEPRI, r0
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	b662      	cpsie	i
 8009954:	f7ff f954 	bl	8008c00 <vTaskSwitchContext>
 8009958:	f04f 0000 	mov.w	r0, #0
 800995c:	f380 8811 	msr	BASEPRI, r0
 8009960:	bc09      	pop	{r0, r3}
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f01e 0f10 	tst.w	lr, #16
 800996e:	bf08      	it	eq
 8009970:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009974:	f380 8809 	msr	PSP, r0
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop

08009980 <pxCurrentTCBConst>:
 8009980:	2000108c 	.word	0x2000108c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	b672      	cpsid	i
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	b662      	cpsie	i
 80099a2:	607b      	str	r3, [r7, #4]
}
 80099a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099a6:	f7ff f86f 	bl	8008a88 <xTaskIncrementTick>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099b0:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <SysTick_Handler+0x44>)
 80099b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	2300      	movs	r3, #0
 80099ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f383 8811 	msr	BASEPRI, r3
}
 80099c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	e000ed04 	.word	0xe000ed04

080099d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099d0:	b480      	push	{r7}
 80099d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009a04 <vPortSetupTimerInterrupt+0x34>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099da:	4b0b      	ldr	r3, [pc, #44]	@ (8009a08 <vPortSetupTimerInterrupt+0x38>)
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099e0:	4b0a      	ldr	r3, [pc, #40]	@ (8009a0c <vPortSetupTimerInterrupt+0x3c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a0a      	ldr	r2, [pc, #40]	@ (8009a10 <vPortSetupTimerInterrupt+0x40>)
 80099e6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ea:	099b      	lsrs	r3, r3, #6
 80099ec:	4a09      	ldr	r2, [pc, #36]	@ (8009a14 <vPortSetupTimerInterrupt+0x44>)
 80099ee:	3b01      	subs	r3, #1
 80099f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099f2:	4b04      	ldr	r3, [pc, #16]	@ (8009a04 <vPortSetupTimerInterrupt+0x34>)
 80099f4:	2207      	movs	r2, #7
 80099f6:	601a      	str	r2, [r3, #0]
}
 80099f8:	bf00      	nop
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	e000e010 	.word	0xe000e010
 8009a08:	e000e018 	.word	0xe000e018
 8009a0c:	20000000 	.word	0x20000000
 8009a10:	10624dd3 	.word	0x10624dd3
 8009a14:	e000e014 	.word	0xe000e014

08009a18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a28 <vPortEnableVFP+0x10>
 8009a1c:	6801      	ldr	r1, [r0, #0]
 8009a1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a22:	6001      	str	r1, [r0, #0]
 8009a24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a26:	bf00      	nop
 8009a28:	e000ed88 	.word	0xe000ed88

08009a2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a32:	f3ef 8305 	mrs	r3, IPSR
 8009a36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b0f      	cmp	r3, #15
 8009a3c:	d917      	bls.n	8009a6e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009aa8 <vPortValidateInterruptPriority+0x7c>)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a48:	4b18      	ldr	r3, [pc, #96]	@ (8009aac <vPortValidateInterruptPriority+0x80>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	7afa      	ldrb	r2, [r7, #11]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d20d      	bcs.n	8009a6e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a56:	b672      	cpsid	i
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	b662      	cpsie	i
 8009a66:	607b      	str	r3, [r7, #4]
}
 8009a68:	bf00      	nop
 8009a6a:	bf00      	nop
 8009a6c:	e7fd      	b.n	8009a6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a6e:	4b10      	ldr	r3, [pc, #64]	@ (8009ab0 <vPortValidateInterruptPriority+0x84>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a76:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab4 <vPortValidateInterruptPriority+0x88>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d90d      	bls.n	8009a9a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	b672      	cpsid	i
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	b662      	cpsie	i
 8009a92:	603b      	str	r3, [r7, #0]
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	e7fd      	b.n	8009a96 <vPortValidateInterruptPriority+0x6a>
	}
 8009a9a:	bf00      	nop
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	e000e3f0 	.word	0xe000e3f0
 8009aac:	200011b8 	.word	0x200011b8
 8009ab0:	e000ed0c 	.word	0xe000ed0c
 8009ab4:	200011bc 	.word	0x200011bc

08009ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08a      	sub	sp, #40	@ 0x28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ac4:	f7fe ff32 	bl	800892c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8009c40 <pvPortMalloc+0x188>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ad0:	f000 f920 	bl	8009d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8009c44 <pvPortMalloc+0x18c>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4013      	ands	r3, r2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f040 8094 	bne.w	8009c0a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d020      	beq.n	8009b2a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009ae8:	2208      	movs	r2, #8
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f003 0307 	and.w	r3, r3, #7
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d017      	beq.n	8009b2a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f023 0307 	bic.w	r3, r3, #7
 8009b00:	3308      	adds	r3, #8
 8009b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00d      	beq.n	8009b2a <pvPortMalloc+0x72>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	b672      	cpsid	i
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	b662      	cpsie	i
 8009b22:	617b      	str	r3, [r7, #20]
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	e7fd      	b.n	8009b26 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d06c      	beq.n	8009c0a <pvPortMalloc+0x152>
 8009b30:	4b45      	ldr	r3, [pc, #276]	@ (8009c48 <pvPortMalloc+0x190>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d867      	bhi.n	8009c0a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b3a:	4b44      	ldr	r3, [pc, #272]	@ (8009c4c <pvPortMalloc+0x194>)
 8009b3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b3e:	4b43      	ldr	r3, [pc, #268]	@ (8009c4c <pvPortMalloc+0x194>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b44:	e004      	b.n	8009b50 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d903      	bls.n	8009b62 <pvPortMalloc+0xaa>
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f1      	bne.n	8009b46 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b62:	4b37      	ldr	r3, [pc, #220]	@ (8009c40 <pvPortMalloc+0x188>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d04e      	beq.n	8009c0a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2208      	movs	r2, #8
 8009b72:	4413      	add	r3, r2
 8009b74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	1ad2      	subs	r2, r2, r3
 8009b86:	2308      	movs	r3, #8
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d922      	bls.n	8009bd4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00d      	beq.n	8009bbc <pvPortMalloc+0x104>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	b672      	cpsid	i
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	b662      	cpsie	i
 8009bb4:	613b      	str	r3, [r7, #16]
}
 8009bb6:	bf00      	nop
 8009bb8:	bf00      	nop
 8009bba:	e7fd      	b.n	8009bb8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	1ad2      	subs	r2, r2, r3
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bce:	69b8      	ldr	r0, [r7, #24]
 8009bd0:	f000 f902 	bl	8009dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c48 <pvPortMalloc+0x190>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	4a1a      	ldr	r2, [pc, #104]	@ (8009c48 <pvPortMalloc+0x190>)
 8009be0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009be2:	4b19      	ldr	r3, [pc, #100]	@ (8009c48 <pvPortMalloc+0x190>)
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	4b1a      	ldr	r3, [pc, #104]	@ (8009c50 <pvPortMalloc+0x198>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d203      	bcs.n	8009bf6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bee:	4b16      	ldr	r3, [pc, #88]	@ (8009c48 <pvPortMalloc+0x190>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a17      	ldr	r2, [pc, #92]	@ (8009c50 <pvPortMalloc+0x198>)
 8009bf4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	4b12      	ldr	r3, [pc, #72]	@ (8009c44 <pvPortMalloc+0x18c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c0a:	f7fe fe9d 	bl	8008948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	f003 0307 	and.w	r3, r3, #7
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00d      	beq.n	8009c34 <pvPortMalloc+0x17c>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	b672      	cpsid	i
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	b662      	cpsie	i
 8009c2c:	60fb      	str	r3, [r7, #12]
}
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
 8009c32:	e7fd      	b.n	8009c30 <pvPortMalloc+0x178>
	return pvReturn;
 8009c34:	69fb      	ldr	r3, [r7, #28]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3728      	adds	r7, #40	@ 0x28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20004dc8 	.word	0x20004dc8
 8009c44:	20004dd4 	.word	0x20004dd4
 8009c48:	20004dcc 	.word	0x20004dcc
 8009c4c:	20004dc0 	.word	0x20004dc0
 8009c50:	20004dd0 	.word	0x20004dd0

08009c54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d04e      	beq.n	8009d04 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c66:	2308      	movs	r3, #8
 8009c68:	425b      	negs	r3, r3
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	4b24      	ldr	r3, [pc, #144]	@ (8009d0c <vPortFree+0xb8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10d      	bne.n	8009c9e <vPortFree+0x4a>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	b672      	cpsid	i
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	b662      	cpsie	i
 8009c96:	60fb      	str	r3, [r7, #12]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00d      	beq.n	8009cc2 <vPortFree+0x6e>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009caa:	b672      	cpsid	i
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	b662      	cpsie	i
 8009cba:	60bb      	str	r3, [r7, #8]
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	e7fd      	b.n	8009cbe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	4b11      	ldr	r3, [pc, #68]	@ (8009d0c <vPortFree+0xb8>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d019      	beq.n	8009d04 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d115      	bne.n	8009d04 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8009d0c <vPortFree+0xb8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	401a      	ands	r2, r3
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ce8:	f7fe fe20 	bl	800892c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	4b07      	ldr	r3, [pc, #28]	@ (8009d10 <vPortFree+0xbc>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4a06      	ldr	r2, [pc, #24]	@ (8009d10 <vPortFree+0xbc>)
 8009cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cfa:	6938      	ldr	r0, [r7, #16]
 8009cfc:	f000 f86c 	bl	8009dd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d00:	f7fe fe22 	bl	8008948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d04:	bf00      	nop
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20004dd4 	.word	0x20004dd4
 8009d10:	20004dcc 	.word	0x20004dcc

08009d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d1a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d20:	4b27      	ldr	r3, [pc, #156]	@ (8009dc0 <prvHeapInit+0xac>)
 8009d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00c      	beq.n	8009d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3307      	adds	r3, #7
 8009d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0307 	bic.w	r3, r3, #7
 8009d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	4a1f      	ldr	r2, [pc, #124]	@ (8009dc0 <prvHeapInit+0xac>)
 8009d44:	4413      	add	r3, r2
 8009d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009dc4 <prvHeapInit+0xb0>)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d52:	4b1c      	ldr	r3, [pc, #112]	@ (8009dc4 <prvHeapInit+0xb0>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d60:	2208      	movs	r2, #8
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 0307 	bic.w	r3, r3, #7
 8009d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4a15      	ldr	r2, [pc, #84]	@ (8009dc8 <prvHeapInit+0xb4>)
 8009d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d76:	4b14      	ldr	r3, [pc, #80]	@ (8009dc8 <prvHeapInit+0xb4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d7e:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <prvHeapInit+0xb4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d94:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc8 <prvHeapInit+0xb4>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dcc <prvHeapInit+0xb8>)
 8009da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	4a09      	ldr	r2, [pc, #36]	@ (8009dd0 <prvHeapInit+0xbc>)
 8009daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dac:	4b09      	ldr	r3, [pc, #36]	@ (8009dd4 <prvHeapInit+0xc0>)
 8009dae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009db2:	601a      	str	r2, [r3, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	200011c0 	.word	0x200011c0
 8009dc4:	20004dc0 	.word	0x20004dc0
 8009dc8:	20004dc8 	.word	0x20004dc8
 8009dcc:	20004dd0 	.word	0x20004dd0
 8009dd0:	20004dcc 	.word	0x20004dcc
 8009dd4:	20004dd4 	.word	0x20004dd4

08009dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009de0:	4b28      	ldr	r3, [pc, #160]	@ (8009e84 <prvInsertBlockIntoFreeList+0xac>)
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	e002      	b.n	8009dec <prvInsertBlockIntoFreeList+0x14>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d8f7      	bhi.n	8009de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	4413      	add	r3, r2
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d108      	bne.n	8009e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	441a      	add	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	441a      	add	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d118      	bne.n	8009e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	4b15      	ldr	r3, [pc, #84]	@ (8009e88 <prvInsertBlockIntoFreeList+0xb0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d00d      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	441a      	add	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e008      	b.n	8009e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e56:	4b0c      	ldr	r3, [pc, #48]	@ (8009e88 <prvInsertBlockIntoFreeList+0xb0>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e003      	b.n	8009e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d002      	beq.n	8009e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20004dc0 	.word	0x20004dc0
 8009e88:	20004dc8 	.word	0x20004dc8

08009e8c <__cvt>:
 8009e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8e:	ed2d 8b02 	vpush	{d8}
 8009e92:	eeb0 8b40 	vmov.f64	d8, d0
 8009e96:	b085      	sub	sp, #20
 8009e98:	4617      	mov	r7, r2
 8009e9a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009e9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e9e:	ee18 2a90 	vmov	r2, s17
 8009ea2:	f025 0520 	bic.w	r5, r5, #32
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	bfb6      	itet	lt
 8009eaa:	222d      	movlt	r2, #45	@ 0x2d
 8009eac:	2200      	movge	r2, #0
 8009eae:	eeb1 8b40 	vneglt.f64	d8, d0
 8009eb2:	2d46      	cmp	r5, #70	@ 0x46
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	d004      	beq.n	8009ec4 <__cvt+0x38>
 8009eba:	2d45      	cmp	r5, #69	@ 0x45
 8009ebc:	d100      	bne.n	8009ec0 <__cvt+0x34>
 8009ebe:	3401      	adds	r4, #1
 8009ec0:	2102      	movs	r1, #2
 8009ec2:	e000      	b.n	8009ec6 <__cvt+0x3a>
 8009ec4:	2103      	movs	r1, #3
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	ab02      	add	r3, sp, #8
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	4622      	mov	r2, r4
 8009ed0:	4633      	mov	r3, r6
 8009ed2:	eeb0 0b48 	vmov.f64	d0, d8
 8009ed6:	f000 ffaf 	bl	800ae38 <_dtoa_r>
 8009eda:	2d47      	cmp	r5, #71	@ 0x47
 8009edc:	d114      	bne.n	8009f08 <__cvt+0x7c>
 8009ede:	07fb      	lsls	r3, r7, #31
 8009ee0:	d50a      	bpl.n	8009ef8 <__cvt+0x6c>
 8009ee2:	1902      	adds	r2, r0, r4
 8009ee4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eec:	bf08      	it	eq
 8009eee:	9203      	streq	r2, [sp, #12]
 8009ef0:	2130      	movs	r1, #48	@ 0x30
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d319      	bcc.n	8009f2c <__cvt+0xa0>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009efc:	1a1b      	subs	r3, r3, r0
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	b005      	add	sp, #20
 8009f02:	ecbd 8b02 	vpop	{d8}
 8009f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f08:	2d46      	cmp	r5, #70	@ 0x46
 8009f0a:	eb00 0204 	add.w	r2, r0, r4
 8009f0e:	d1e9      	bne.n	8009ee4 <__cvt+0x58>
 8009f10:	7803      	ldrb	r3, [r0, #0]
 8009f12:	2b30      	cmp	r3, #48	@ 0x30
 8009f14:	d107      	bne.n	8009f26 <__cvt+0x9a>
 8009f16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1e:	bf1c      	itt	ne
 8009f20:	f1c4 0401 	rsbne	r4, r4, #1
 8009f24:	6034      	strne	r4, [r6, #0]
 8009f26:	6833      	ldr	r3, [r6, #0]
 8009f28:	441a      	add	r2, r3
 8009f2a:	e7db      	b.n	8009ee4 <__cvt+0x58>
 8009f2c:	1c5c      	adds	r4, r3, #1
 8009f2e:	9403      	str	r4, [sp, #12]
 8009f30:	7019      	strb	r1, [r3, #0]
 8009f32:	e7de      	b.n	8009ef2 <__cvt+0x66>

08009f34 <__exponent>:
 8009f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f36:	2900      	cmp	r1, #0
 8009f38:	bfba      	itte	lt
 8009f3a:	4249      	neglt	r1, r1
 8009f3c:	232d      	movlt	r3, #45	@ 0x2d
 8009f3e:	232b      	movge	r3, #43	@ 0x2b
 8009f40:	2909      	cmp	r1, #9
 8009f42:	7002      	strb	r2, [r0, #0]
 8009f44:	7043      	strb	r3, [r0, #1]
 8009f46:	dd29      	ble.n	8009f9c <__exponent+0x68>
 8009f48:	f10d 0307 	add.w	r3, sp, #7
 8009f4c:	461d      	mov	r5, r3
 8009f4e:	270a      	movs	r7, #10
 8009f50:	461a      	mov	r2, r3
 8009f52:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f56:	fb07 1416 	mls	r4, r7, r6, r1
 8009f5a:	3430      	adds	r4, #48	@ 0x30
 8009f5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f60:	460c      	mov	r4, r1
 8009f62:	2c63      	cmp	r4, #99	@ 0x63
 8009f64:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f68:	4631      	mov	r1, r6
 8009f6a:	dcf1      	bgt.n	8009f50 <__exponent+0x1c>
 8009f6c:	3130      	adds	r1, #48	@ 0x30
 8009f6e:	1e94      	subs	r4, r2, #2
 8009f70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f74:	1c41      	adds	r1, r0, #1
 8009f76:	4623      	mov	r3, r4
 8009f78:	42ab      	cmp	r3, r5
 8009f7a:	d30a      	bcc.n	8009f92 <__exponent+0x5e>
 8009f7c:	f10d 0309 	add.w	r3, sp, #9
 8009f80:	1a9b      	subs	r3, r3, r2
 8009f82:	42ac      	cmp	r4, r5
 8009f84:	bf88      	it	hi
 8009f86:	2300      	movhi	r3, #0
 8009f88:	3302      	adds	r3, #2
 8009f8a:	4403      	add	r3, r0
 8009f8c:	1a18      	subs	r0, r3, r0
 8009f8e:	b003      	add	sp, #12
 8009f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f9a:	e7ed      	b.n	8009f78 <__exponent+0x44>
 8009f9c:	2330      	movs	r3, #48	@ 0x30
 8009f9e:	3130      	adds	r1, #48	@ 0x30
 8009fa0:	7083      	strb	r3, [r0, #2]
 8009fa2:	70c1      	strb	r1, [r0, #3]
 8009fa4:	1d03      	adds	r3, r0, #4
 8009fa6:	e7f1      	b.n	8009f8c <__exponent+0x58>

08009fa8 <_printf_float>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	b08d      	sub	sp, #52	@ 0x34
 8009fae:	460c      	mov	r4, r1
 8009fb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fb4:	4616      	mov	r6, r2
 8009fb6:	461f      	mov	r7, r3
 8009fb8:	4605      	mov	r5, r0
 8009fba:	f000 fdcf 	bl	800ab5c <_localeconv_r>
 8009fbe:	f8d0 b000 	ldr.w	fp, [r0]
 8009fc2:	4658      	mov	r0, fp
 8009fc4:	f7f6 f98c 	bl	80002e0 <strlen>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009fd4:	6822      	ldr	r2, [r4, #0]
 8009fd6:	9005      	str	r0, [sp, #20]
 8009fd8:	3307      	adds	r3, #7
 8009fda:	f023 0307 	bic.w	r3, r3, #7
 8009fde:	f103 0108 	add.w	r1, r3, #8
 8009fe2:	f8c8 1000 	str.w	r1, [r8]
 8009fe6:	ed93 0b00 	vldr	d0, [r3]
 8009fea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a248 <_printf_float+0x2a0>
 8009fee:	eeb0 7bc0 	vabs.f64	d7, d0
 8009ff2:	eeb4 7b46 	vcmp.f64	d7, d6
 8009ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009ffe:	dd24      	ble.n	800a04a <_printf_float+0xa2>
 800a000:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a008:	d502      	bpl.n	800a010 <_printf_float+0x68>
 800a00a:	232d      	movs	r3, #45	@ 0x2d
 800a00c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a010:	498f      	ldr	r1, [pc, #572]	@ (800a250 <_printf_float+0x2a8>)
 800a012:	4b90      	ldr	r3, [pc, #576]	@ (800a254 <_printf_float+0x2ac>)
 800a014:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a018:	bf8c      	ite	hi
 800a01a:	4688      	movhi	r8, r1
 800a01c:	4698      	movls	r8, r3
 800a01e:	f022 0204 	bic.w	r2, r2, #4
 800a022:	2303      	movs	r3, #3
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	f04f 0a00 	mov.w	sl, #0
 800a02c:	9700      	str	r7, [sp, #0]
 800a02e:	4633      	mov	r3, r6
 800a030:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a032:	4621      	mov	r1, r4
 800a034:	4628      	mov	r0, r5
 800a036:	f000 f9d1 	bl	800a3dc <_printf_common>
 800a03a:	3001      	adds	r0, #1
 800a03c:	f040 8089 	bne.w	800a152 <_printf_float+0x1aa>
 800a040:	f04f 30ff 	mov.w	r0, #4294967295
 800a044:	b00d      	add	sp, #52	@ 0x34
 800a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	d709      	bvc.n	800a068 <_printf_float+0xc0>
 800a054:	ee10 3a90 	vmov	r3, s1
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bfbc      	itt	lt
 800a05c:	232d      	movlt	r3, #45	@ 0x2d
 800a05e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a062:	497d      	ldr	r1, [pc, #500]	@ (800a258 <_printf_float+0x2b0>)
 800a064:	4b7d      	ldr	r3, [pc, #500]	@ (800a25c <_printf_float+0x2b4>)
 800a066:	e7d5      	b.n	800a014 <_printf_float+0x6c>
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	1c59      	adds	r1, r3, #1
 800a06c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a070:	d139      	bne.n	800a0e6 <_printf_float+0x13e>
 800a072:	2306      	movs	r3, #6
 800a074:	6063      	str	r3, [r4, #4]
 800a076:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a07a:	2300      	movs	r3, #0
 800a07c:	6022      	str	r2, [r4, #0]
 800a07e:	9303      	str	r3, [sp, #12]
 800a080:	ab0a      	add	r3, sp, #40	@ 0x28
 800a082:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a086:	ab09      	add	r3, sp, #36	@ 0x24
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	6861      	ldr	r1, [r4, #4]
 800a08c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a090:	4628      	mov	r0, r5
 800a092:	f7ff fefb 	bl	8009e8c <__cvt>
 800a096:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a09a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a09c:	4680      	mov	r8, r0
 800a09e:	d129      	bne.n	800a0f4 <_printf_float+0x14c>
 800a0a0:	1cc8      	adds	r0, r1, #3
 800a0a2:	db02      	blt.n	800a0aa <_printf_float+0x102>
 800a0a4:	6863      	ldr	r3, [r4, #4]
 800a0a6:	4299      	cmp	r1, r3
 800a0a8:	dd41      	ble.n	800a12e <_printf_float+0x186>
 800a0aa:	f1a9 0902 	sub.w	r9, r9, #2
 800a0ae:	fa5f f989 	uxtb.w	r9, r9
 800a0b2:	3901      	subs	r1, #1
 800a0b4:	464a      	mov	r2, r9
 800a0b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0bc:	f7ff ff3a 	bl	8009f34 <__exponent>
 800a0c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0c2:	1813      	adds	r3, r2, r0
 800a0c4:	2a01      	cmp	r2, #1
 800a0c6:	4682      	mov	sl, r0
 800a0c8:	6123      	str	r3, [r4, #16]
 800a0ca:	dc02      	bgt.n	800a0d2 <_printf_float+0x12a>
 800a0cc:	6822      	ldr	r2, [r4, #0]
 800a0ce:	07d2      	lsls	r2, r2, #31
 800a0d0:	d501      	bpl.n	800a0d6 <_printf_float+0x12e>
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	6123      	str	r3, [r4, #16]
 800a0d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0a6      	beq.n	800a02c <_printf_float+0x84>
 800a0de:	232d      	movs	r3, #45	@ 0x2d
 800a0e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0e4:	e7a2      	b.n	800a02c <_printf_float+0x84>
 800a0e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0ea:	d1c4      	bne.n	800a076 <_printf_float+0xce>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1c2      	bne.n	800a076 <_printf_float+0xce>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e7bf      	b.n	800a074 <_printf_float+0xcc>
 800a0f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a0f8:	d9db      	bls.n	800a0b2 <_printf_float+0x10a>
 800a0fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a0fe:	d118      	bne.n	800a132 <_printf_float+0x18a>
 800a100:	2900      	cmp	r1, #0
 800a102:	6863      	ldr	r3, [r4, #4]
 800a104:	dd0b      	ble.n	800a11e <_printf_float+0x176>
 800a106:	6121      	str	r1, [r4, #16]
 800a108:	b913      	cbnz	r3, 800a110 <_printf_float+0x168>
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	07d0      	lsls	r0, r2, #31
 800a10e:	d502      	bpl.n	800a116 <_printf_float+0x16e>
 800a110:	3301      	adds	r3, #1
 800a112:	440b      	add	r3, r1
 800a114:	6123      	str	r3, [r4, #16]
 800a116:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a118:	f04f 0a00 	mov.w	sl, #0
 800a11c:	e7db      	b.n	800a0d6 <_printf_float+0x12e>
 800a11e:	b913      	cbnz	r3, 800a126 <_printf_float+0x17e>
 800a120:	6822      	ldr	r2, [r4, #0]
 800a122:	07d2      	lsls	r2, r2, #31
 800a124:	d501      	bpl.n	800a12a <_printf_float+0x182>
 800a126:	3302      	adds	r3, #2
 800a128:	e7f4      	b.n	800a114 <_printf_float+0x16c>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e7f2      	b.n	800a114 <_printf_float+0x16c>
 800a12e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a134:	4299      	cmp	r1, r3
 800a136:	db05      	blt.n	800a144 <_printf_float+0x19c>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	6121      	str	r1, [r4, #16]
 800a13c:	07d8      	lsls	r0, r3, #31
 800a13e:	d5ea      	bpl.n	800a116 <_printf_float+0x16e>
 800a140:	1c4b      	adds	r3, r1, #1
 800a142:	e7e7      	b.n	800a114 <_printf_float+0x16c>
 800a144:	2900      	cmp	r1, #0
 800a146:	bfd4      	ite	le
 800a148:	f1c1 0202 	rsble	r2, r1, #2
 800a14c:	2201      	movgt	r2, #1
 800a14e:	4413      	add	r3, r2
 800a150:	e7e0      	b.n	800a114 <_printf_float+0x16c>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	055a      	lsls	r2, r3, #21
 800a156:	d407      	bmi.n	800a168 <_printf_float+0x1c0>
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	4642      	mov	r2, r8
 800a15c:	4631      	mov	r1, r6
 800a15e:	4628      	mov	r0, r5
 800a160:	47b8      	blx	r7
 800a162:	3001      	adds	r0, #1
 800a164:	d12a      	bne.n	800a1bc <_printf_float+0x214>
 800a166:	e76b      	b.n	800a040 <_printf_float+0x98>
 800a168:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a16c:	f240 80e0 	bls.w	800a330 <_printf_float+0x388>
 800a170:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a174:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17c:	d133      	bne.n	800a1e6 <_printf_float+0x23e>
 800a17e:	4a38      	ldr	r2, [pc, #224]	@ (800a260 <_printf_float+0x2b8>)
 800a180:	2301      	movs	r3, #1
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	47b8      	blx	r7
 800a188:	3001      	adds	r0, #1
 800a18a:	f43f af59 	beq.w	800a040 <_printf_float+0x98>
 800a18e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a192:	4543      	cmp	r3, r8
 800a194:	db02      	blt.n	800a19c <_printf_float+0x1f4>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	07d8      	lsls	r0, r3, #31
 800a19a:	d50f      	bpl.n	800a1bc <_printf_float+0x214>
 800a19c:	9b05      	ldr	r3, [sp, #20]
 800a19e:	465a      	mov	r2, fp
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b8      	blx	r7
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f43f af4a 	beq.w	800a040 <_printf_float+0x98>
 800a1ac:	f04f 0900 	mov.w	r9, #0
 800a1b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1b4:	f104 0a1a 	add.w	sl, r4, #26
 800a1b8:	45c8      	cmp	r8, r9
 800a1ba:	dc09      	bgt.n	800a1d0 <_printf_float+0x228>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	079b      	lsls	r3, r3, #30
 800a1c0:	f100 8107 	bmi.w	800a3d2 <_printf_float+0x42a>
 800a1c4:	68e0      	ldr	r0, [r4, #12]
 800a1c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1c8:	4298      	cmp	r0, r3
 800a1ca:	bfb8      	it	lt
 800a1cc:	4618      	movlt	r0, r3
 800a1ce:	e739      	b.n	800a044 <_printf_float+0x9c>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4652      	mov	r2, sl
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	47b8      	blx	r7
 800a1da:	3001      	adds	r0, #1
 800a1dc:	f43f af30 	beq.w	800a040 <_printf_float+0x98>
 800a1e0:	f109 0901 	add.w	r9, r9, #1
 800a1e4:	e7e8      	b.n	800a1b8 <_printf_float+0x210>
 800a1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dc3b      	bgt.n	800a264 <_printf_float+0x2bc>
 800a1ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a260 <_printf_float+0x2b8>)
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	f43f af22 	beq.w	800a040 <_printf_float+0x98>
 800a1fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a200:	ea59 0303 	orrs.w	r3, r9, r3
 800a204:	d102      	bne.n	800a20c <_printf_float+0x264>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	07d9      	lsls	r1, r3, #31
 800a20a:	d5d7      	bpl.n	800a1bc <_printf_float+0x214>
 800a20c:	9b05      	ldr	r3, [sp, #20]
 800a20e:	465a      	mov	r2, fp
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f af12 	beq.w	800a040 <_printf_float+0x98>
 800a21c:	f04f 0a00 	mov.w	sl, #0
 800a220:	f104 0b1a 	add.w	fp, r4, #26
 800a224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a226:	425b      	negs	r3, r3
 800a228:	4553      	cmp	r3, sl
 800a22a:	dc01      	bgt.n	800a230 <_printf_float+0x288>
 800a22c:	464b      	mov	r3, r9
 800a22e:	e794      	b.n	800a15a <_printf_float+0x1b2>
 800a230:	2301      	movs	r3, #1
 800a232:	465a      	mov	r2, fp
 800a234:	4631      	mov	r1, r6
 800a236:	4628      	mov	r0, r5
 800a238:	47b8      	blx	r7
 800a23a:	3001      	adds	r0, #1
 800a23c:	f43f af00 	beq.w	800a040 <_printf_float+0x98>
 800a240:	f10a 0a01 	add.w	sl, sl, #1
 800a244:	e7ee      	b.n	800a224 <_printf_float+0x27c>
 800a246:	bf00      	nop
 800a248:	ffffffff 	.word	0xffffffff
 800a24c:	7fefffff 	.word	0x7fefffff
 800a250:	0800ce90 	.word	0x0800ce90
 800a254:	0800ce8c 	.word	0x0800ce8c
 800a258:	0800ce98 	.word	0x0800ce98
 800a25c:	0800ce94 	.word	0x0800ce94
 800a260:	0800ce9c 	.word	0x0800ce9c
 800a264:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a266:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a26a:	4553      	cmp	r3, sl
 800a26c:	bfa8      	it	ge
 800a26e:	4653      	movge	r3, sl
 800a270:	2b00      	cmp	r3, #0
 800a272:	4699      	mov	r9, r3
 800a274:	dc37      	bgt.n	800a2e6 <_printf_float+0x33e>
 800a276:	2300      	movs	r3, #0
 800a278:	9307      	str	r3, [sp, #28]
 800a27a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a27e:	f104 021a 	add.w	r2, r4, #26
 800a282:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a284:	9907      	ldr	r1, [sp, #28]
 800a286:	9306      	str	r3, [sp, #24]
 800a288:	eba3 0309 	sub.w	r3, r3, r9
 800a28c:	428b      	cmp	r3, r1
 800a28e:	dc31      	bgt.n	800a2f4 <_printf_float+0x34c>
 800a290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a292:	459a      	cmp	sl, r3
 800a294:	dc3b      	bgt.n	800a30e <_printf_float+0x366>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	07da      	lsls	r2, r3, #31
 800a29a:	d438      	bmi.n	800a30e <_printf_float+0x366>
 800a29c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a29e:	ebaa 0903 	sub.w	r9, sl, r3
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2a8:	4599      	cmp	r9, r3
 800a2aa:	bfa8      	it	ge
 800a2ac:	4699      	movge	r9, r3
 800a2ae:	f1b9 0f00 	cmp.w	r9, #0
 800a2b2:	dc34      	bgt.n	800a31e <_printf_float+0x376>
 800a2b4:	f04f 0800 	mov.w	r8, #0
 800a2b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2bc:	f104 0b1a 	add.w	fp, r4, #26
 800a2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c2:	ebaa 0303 	sub.w	r3, sl, r3
 800a2c6:	eba3 0309 	sub.w	r3, r3, r9
 800a2ca:	4543      	cmp	r3, r8
 800a2cc:	f77f af76 	ble.w	800a1bc <_printf_float+0x214>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	465a      	mov	r2, fp
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b8      	blx	r7
 800a2da:	3001      	adds	r0, #1
 800a2dc:	f43f aeb0 	beq.w	800a040 <_printf_float+0x98>
 800a2e0:	f108 0801 	add.w	r8, r8, #1
 800a2e4:	e7ec      	b.n	800a2c0 <_printf_float+0x318>
 800a2e6:	4642      	mov	r2, r8
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	47b8      	blx	r7
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d1c1      	bne.n	800a276 <_printf_float+0x2ce>
 800a2f2:	e6a5      	b.n	800a040 <_printf_float+0x98>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	9206      	str	r2, [sp, #24]
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	f43f ae9e 	beq.w	800a040 <_printf_float+0x98>
 800a304:	9b07      	ldr	r3, [sp, #28]
 800a306:	9a06      	ldr	r2, [sp, #24]
 800a308:	3301      	adds	r3, #1
 800a30a:	9307      	str	r3, [sp, #28]
 800a30c:	e7b9      	b.n	800a282 <_printf_float+0x2da>
 800a30e:	9b05      	ldr	r3, [sp, #20]
 800a310:	465a      	mov	r2, fp
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	d1bf      	bne.n	800a29c <_printf_float+0x2f4>
 800a31c:	e690      	b.n	800a040 <_printf_float+0x98>
 800a31e:	9a06      	ldr	r2, [sp, #24]
 800a320:	464b      	mov	r3, r9
 800a322:	4442      	add	r2, r8
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	d1c2      	bne.n	800a2b4 <_printf_float+0x30c>
 800a32e:	e687      	b.n	800a040 <_printf_float+0x98>
 800a330:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a334:	f1b9 0f01 	cmp.w	r9, #1
 800a338:	dc01      	bgt.n	800a33e <_printf_float+0x396>
 800a33a:	07db      	lsls	r3, r3, #31
 800a33c:	d536      	bpl.n	800a3ac <_printf_float+0x404>
 800a33e:	2301      	movs	r3, #1
 800a340:	4642      	mov	r2, r8
 800a342:	4631      	mov	r1, r6
 800a344:	4628      	mov	r0, r5
 800a346:	47b8      	blx	r7
 800a348:	3001      	adds	r0, #1
 800a34a:	f43f ae79 	beq.w	800a040 <_printf_float+0x98>
 800a34e:	9b05      	ldr	r3, [sp, #20]
 800a350:	465a      	mov	r2, fp
 800a352:	4631      	mov	r1, r6
 800a354:	4628      	mov	r0, r5
 800a356:	47b8      	blx	r7
 800a358:	3001      	adds	r0, #1
 800a35a:	f43f ae71 	beq.w	800a040 <_printf_float+0x98>
 800a35e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a362:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a36e:	d018      	beq.n	800a3a2 <_printf_float+0x3fa>
 800a370:	464b      	mov	r3, r9
 800a372:	f108 0201 	add.w	r2, r8, #1
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	d10c      	bne.n	800a39a <_printf_float+0x3f2>
 800a380:	e65e      	b.n	800a040 <_printf_float+0x98>
 800a382:	2301      	movs	r3, #1
 800a384:	465a      	mov	r2, fp
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	f43f ae57 	beq.w	800a040 <_printf_float+0x98>
 800a392:	f108 0801 	add.w	r8, r8, #1
 800a396:	45c8      	cmp	r8, r9
 800a398:	dbf3      	blt.n	800a382 <_printf_float+0x3da>
 800a39a:	4653      	mov	r3, sl
 800a39c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3a0:	e6dc      	b.n	800a15c <_printf_float+0x1b4>
 800a3a2:	f04f 0800 	mov.w	r8, #0
 800a3a6:	f104 0b1a 	add.w	fp, r4, #26
 800a3aa:	e7f4      	b.n	800a396 <_printf_float+0x3ee>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	e7e1      	b.n	800a376 <_printf_float+0x3ce>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	464a      	mov	r2, r9
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b8      	blx	r7
 800a3bc:	3001      	adds	r0, #1
 800a3be:	f43f ae3f 	beq.w	800a040 <_printf_float+0x98>
 800a3c2:	f108 0801 	add.w	r8, r8, #1
 800a3c6:	68e3      	ldr	r3, [r4, #12]
 800a3c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3ca:	1a5b      	subs	r3, r3, r1
 800a3cc:	4543      	cmp	r3, r8
 800a3ce:	dcf0      	bgt.n	800a3b2 <_printf_float+0x40a>
 800a3d0:	e6f8      	b.n	800a1c4 <_printf_float+0x21c>
 800a3d2:	f04f 0800 	mov.w	r8, #0
 800a3d6:	f104 0919 	add.w	r9, r4, #25
 800a3da:	e7f4      	b.n	800a3c6 <_printf_float+0x41e>

0800a3dc <_printf_common>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	4698      	mov	r8, r3
 800a3e4:	688a      	ldr	r2, [r1, #8]
 800a3e6:	690b      	ldr	r3, [r1, #16]
 800a3e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	bfb8      	it	lt
 800a3f0:	4613      	movlt	r3, r2
 800a3f2:	6033      	str	r3, [r6, #0]
 800a3f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3f8:	4607      	mov	r7, r0
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	b10a      	cbz	r2, 800a402 <_printf_common+0x26>
 800a3fe:	3301      	adds	r3, #1
 800a400:	6033      	str	r3, [r6, #0]
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	0699      	lsls	r1, r3, #26
 800a406:	bf42      	ittt	mi
 800a408:	6833      	ldrmi	r3, [r6, #0]
 800a40a:	3302      	addmi	r3, #2
 800a40c:	6033      	strmi	r3, [r6, #0]
 800a40e:	6825      	ldr	r5, [r4, #0]
 800a410:	f015 0506 	ands.w	r5, r5, #6
 800a414:	d106      	bne.n	800a424 <_printf_common+0x48>
 800a416:	f104 0a19 	add.w	sl, r4, #25
 800a41a:	68e3      	ldr	r3, [r4, #12]
 800a41c:	6832      	ldr	r2, [r6, #0]
 800a41e:	1a9b      	subs	r3, r3, r2
 800a420:	42ab      	cmp	r3, r5
 800a422:	dc26      	bgt.n	800a472 <_printf_common+0x96>
 800a424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a428:	6822      	ldr	r2, [r4, #0]
 800a42a:	3b00      	subs	r3, #0
 800a42c:	bf18      	it	ne
 800a42e:	2301      	movne	r3, #1
 800a430:	0692      	lsls	r2, r2, #26
 800a432:	d42b      	bmi.n	800a48c <_printf_common+0xb0>
 800a434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a438:	4641      	mov	r1, r8
 800a43a:	4638      	mov	r0, r7
 800a43c:	47c8      	blx	r9
 800a43e:	3001      	adds	r0, #1
 800a440:	d01e      	beq.n	800a480 <_printf_common+0xa4>
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	6922      	ldr	r2, [r4, #16]
 800a446:	f003 0306 	and.w	r3, r3, #6
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	bf02      	ittt	eq
 800a44e:	68e5      	ldreq	r5, [r4, #12]
 800a450:	6833      	ldreq	r3, [r6, #0]
 800a452:	1aed      	subeq	r5, r5, r3
 800a454:	68a3      	ldr	r3, [r4, #8]
 800a456:	bf0c      	ite	eq
 800a458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a45c:	2500      	movne	r5, #0
 800a45e:	4293      	cmp	r3, r2
 800a460:	bfc4      	itt	gt
 800a462:	1a9b      	subgt	r3, r3, r2
 800a464:	18ed      	addgt	r5, r5, r3
 800a466:	2600      	movs	r6, #0
 800a468:	341a      	adds	r4, #26
 800a46a:	42b5      	cmp	r5, r6
 800a46c:	d11a      	bne.n	800a4a4 <_printf_common+0xc8>
 800a46e:	2000      	movs	r0, #0
 800a470:	e008      	b.n	800a484 <_printf_common+0xa8>
 800a472:	2301      	movs	r3, #1
 800a474:	4652      	mov	r2, sl
 800a476:	4641      	mov	r1, r8
 800a478:	4638      	mov	r0, r7
 800a47a:	47c8      	blx	r9
 800a47c:	3001      	adds	r0, #1
 800a47e:	d103      	bne.n	800a488 <_printf_common+0xac>
 800a480:	f04f 30ff 	mov.w	r0, #4294967295
 800a484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a488:	3501      	adds	r5, #1
 800a48a:	e7c6      	b.n	800a41a <_printf_common+0x3e>
 800a48c:	18e1      	adds	r1, r4, r3
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	2030      	movs	r0, #48	@ 0x30
 800a492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a496:	4422      	add	r2, r4
 800a498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a49c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4a0:	3302      	adds	r3, #2
 800a4a2:	e7c7      	b.n	800a434 <_printf_common+0x58>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	47c8      	blx	r9
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	d0e6      	beq.n	800a480 <_printf_common+0xa4>
 800a4b2:	3601      	adds	r6, #1
 800a4b4:	e7d9      	b.n	800a46a <_printf_common+0x8e>
	...

0800a4b8 <_printf_i>:
 800a4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4bc:	7e0f      	ldrb	r7, [r1, #24]
 800a4be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4c0:	2f78      	cmp	r7, #120	@ 0x78
 800a4c2:	4691      	mov	r9, r2
 800a4c4:	4680      	mov	r8, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	469a      	mov	sl, r3
 800a4ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4ce:	d807      	bhi.n	800a4e0 <_printf_i+0x28>
 800a4d0:	2f62      	cmp	r7, #98	@ 0x62
 800a4d2:	d80a      	bhi.n	800a4ea <_printf_i+0x32>
 800a4d4:	2f00      	cmp	r7, #0
 800a4d6:	f000 80d1 	beq.w	800a67c <_printf_i+0x1c4>
 800a4da:	2f58      	cmp	r7, #88	@ 0x58
 800a4dc:	f000 80b8 	beq.w	800a650 <_printf_i+0x198>
 800a4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4e8:	e03a      	b.n	800a560 <_printf_i+0xa8>
 800a4ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4ee:	2b15      	cmp	r3, #21
 800a4f0:	d8f6      	bhi.n	800a4e0 <_printf_i+0x28>
 800a4f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a4f8 <_printf_i+0x40>)
 800a4f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4f8:	0800a551 	.word	0x0800a551
 800a4fc:	0800a565 	.word	0x0800a565
 800a500:	0800a4e1 	.word	0x0800a4e1
 800a504:	0800a4e1 	.word	0x0800a4e1
 800a508:	0800a4e1 	.word	0x0800a4e1
 800a50c:	0800a4e1 	.word	0x0800a4e1
 800a510:	0800a565 	.word	0x0800a565
 800a514:	0800a4e1 	.word	0x0800a4e1
 800a518:	0800a4e1 	.word	0x0800a4e1
 800a51c:	0800a4e1 	.word	0x0800a4e1
 800a520:	0800a4e1 	.word	0x0800a4e1
 800a524:	0800a663 	.word	0x0800a663
 800a528:	0800a58f 	.word	0x0800a58f
 800a52c:	0800a61d 	.word	0x0800a61d
 800a530:	0800a4e1 	.word	0x0800a4e1
 800a534:	0800a4e1 	.word	0x0800a4e1
 800a538:	0800a685 	.word	0x0800a685
 800a53c:	0800a4e1 	.word	0x0800a4e1
 800a540:	0800a58f 	.word	0x0800a58f
 800a544:	0800a4e1 	.word	0x0800a4e1
 800a548:	0800a4e1 	.word	0x0800a4e1
 800a54c:	0800a625 	.word	0x0800a625
 800a550:	6833      	ldr	r3, [r6, #0]
 800a552:	1d1a      	adds	r2, r3, #4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6032      	str	r2, [r6, #0]
 800a558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a55c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a560:	2301      	movs	r3, #1
 800a562:	e09c      	b.n	800a69e <_printf_i+0x1e6>
 800a564:	6833      	ldr	r3, [r6, #0]
 800a566:	6820      	ldr	r0, [r4, #0]
 800a568:	1d19      	adds	r1, r3, #4
 800a56a:	6031      	str	r1, [r6, #0]
 800a56c:	0606      	lsls	r6, r0, #24
 800a56e:	d501      	bpl.n	800a574 <_printf_i+0xbc>
 800a570:	681d      	ldr	r5, [r3, #0]
 800a572:	e003      	b.n	800a57c <_printf_i+0xc4>
 800a574:	0645      	lsls	r5, r0, #25
 800a576:	d5fb      	bpl.n	800a570 <_printf_i+0xb8>
 800a578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	da03      	bge.n	800a588 <_printf_i+0xd0>
 800a580:	232d      	movs	r3, #45	@ 0x2d
 800a582:	426d      	negs	r5, r5
 800a584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a588:	4858      	ldr	r0, [pc, #352]	@ (800a6ec <_printf_i+0x234>)
 800a58a:	230a      	movs	r3, #10
 800a58c:	e011      	b.n	800a5b2 <_printf_i+0xfa>
 800a58e:	6821      	ldr	r1, [r4, #0]
 800a590:	6833      	ldr	r3, [r6, #0]
 800a592:	0608      	lsls	r0, r1, #24
 800a594:	f853 5b04 	ldr.w	r5, [r3], #4
 800a598:	d402      	bmi.n	800a5a0 <_printf_i+0xe8>
 800a59a:	0649      	lsls	r1, r1, #25
 800a59c:	bf48      	it	mi
 800a59e:	b2ad      	uxthmi	r5, r5
 800a5a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5a2:	4852      	ldr	r0, [pc, #328]	@ (800a6ec <_printf_i+0x234>)
 800a5a4:	6033      	str	r3, [r6, #0]
 800a5a6:	bf14      	ite	ne
 800a5a8:	230a      	movne	r3, #10
 800a5aa:	2308      	moveq	r3, #8
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5b2:	6866      	ldr	r6, [r4, #4]
 800a5b4:	60a6      	str	r6, [r4, #8]
 800a5b6:	2e00      	cmp	r6, #0
 800a5b8:	db05      	blt.n	800a5c6 <_printf_i+0x10e>
 800a5ba:	6821      	ldr	r1, [r4, #0]
 800a5bc:	432e      	orrs	r6, r5
 800a5be:	f021 0104 	bic.w	r1, r1, #4
 800a5c2:	6021      	str	r1, [r4, #0]
 800a5c4:	d04b      	beq.n	800a65e <_printf_i+0x1a6>
 800a5c6:	4616      	mov	r6, r2
 800a5c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5cc:	fb03 5711 	mls	r7, r3, r1, r5
 800a5d0:	5dc7      	ldrb	r7, [r0, r7]
 800a5d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5d6:	462f      	mov	r7, r5
 800a5d8:	42bb      	cmp	r3, r7
 800a5da:	460d      	mov	r5, r1
 800a5dc:	d9f4      	bls.n	800a5c8 <_printf_i+0x110>
 800a5de:	2b08      	cmp	r3, #8
 800a5e0:	d10b      	bne.n	800a5fa <_printf_i+0x142>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	07df      	lsls	r7, r3, #31
 800a5e6:	d508      	bpl.n	800a5fa <_printf_i+0x142>
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	6861      	ldr	r1, [r4, #4]
 800a5ec:	4299      	cmp	r1, r3
 800a5ee:	bfde      	ittt	le
 800a5f0:	2330      	movle	r3, #48	@ 0x30
 800a5f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5fa:	1b92      	subs	r2, r2, r6
 800a5fc:	6122      	str	r2, [r4, #16]
 800a5fe:	f8cd a000 	str.w	sl, [sp]
 800a602:	464b      	mov	r3, r9
 800a604:	aa03      	add	r2, sp, #12
 800a606:	4621      	mov	r1, r4
 800a608:	4640      	mov	r0, r8
 800a60a:	f7ff fee7 	bl	800a3dc <_printf_common>
 800a60e:	3001      	adds	r0, #1
 800a610:	d14a      	bne.n	800a6a8 <_printf_i+0x1f0>
 800a612:	f04f 30ff 	mov.w	r0, #4294967295
 800a616:	b004      	add	sp, #16
 800a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	f043 0320 	orr.w	r3, r3, #32
 800a622:	6023      	str	r3, [r4, #0]
 800a624:	4832      	ldr	r0, [pc, #200]	@ (800a6f0 <_printf_i+0x238>)
 800a626:	2778      	movs	r7, #120	@ 0x78
 800a628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	6831      	ldr	r1, [r6, #0]
 800a630:	061f      	lsls	r7, r3, #24
 800a632:	f851 5b04 	ldr.w	r5, [r1], #4
 800a636:	d402      	bmi.n	800a63e <_printf_i+0x186>
 800a638:	065f      	lsls	r7, r3, #25
 800a63a:	bf48      	it	mi
 800a63c:	b2ad      	uxthmi	r5, r5
 800a63e:	6031      	str	r1, [r6, #0]
 800a640:	07d9      	lsls	r1, r3, #31
 800a642:	bf44      	itt	mi
 800a644:	f043 0320 	orrmi.w	r3, r3, #32
 800a648:	6023      	strmi	r3, [r4, #0]
 800a64a:	b11d      	cbz	r5, 800a654 <_printf_i+0x19c>
 800a64c:	2310      	movs	r3, #16
 800a64e:	e7ad      	b.n	800a5ac <_printf_i+0xf4>
 800a650:	4826      	ldr	r0, [pc, #152]	@ (800a6ec <_printf_i+0x234>)
 800a652:	e7e9      	b.n	800a628 <_printf_i+0x170>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	f023 0320 	bic.w	r3, r3, #32
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	e7f6      	b.n	800a64c <_printf_i+0x194>
 800a65e:	4616      	mov	r6, r2
 800a660:	e7bd      	b.n	800a5de <_printf_i+0x126>
 800a662:	6833      	ldr	r3, [r6, #0]
 800a664:	6825      	ldr	r5, [r4, #0]
 800a666:	6961      	ldr	r1, [r4, #20]
 800a668:	1d18      	adds	r0, r3, #4
 800a66a:	6030      	str	r0, [r6, #0]
 800a66c:	062e      	lsls	r6, r5, #24
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	d501      	bpl.n	800a676 <_printf_i+0x1be>
 800a672:	6019      	str	r1, [r3, #0]
 800a674:	e002      	b.n	800a67c <_printf_i+0x1c4>
 800a676:	0668      	lsls	r0, r5, #25
 800a678:	d5fb      	bpl.n	800a672 <_printf_i+0x1ba>
 800a67a:	8019      	strh	r1, [r3, #0]
 800a67c:	2300      	movs	r3, #0
 800a67e:	6123      	str	r3, [r4, #16]
 800a680:	4616      	mov	r6, r2
 800a682:	e7bc      	b.n	800a5fe <_printf_i+0x146>
 800a684:	6833      	ldr	r3, [r6, #0]
 800a686:	1d1a      	adds	r2, r3, #4
 800a688:	6032      	str	r2, [r6, #0]
 800a68a:	681e      	ldr	r6, [r3, #0]
 800a68c:	6862      	ldr	r2, [r4, #4]
 800a68e:	2100      	movs	r1, #0
 800a690:	4630      	mov	r0, r6
 800a692:	f7f5 fdd5 	bl	8000240 <memchr>
 800a696:	b108      	cbz	r0, 800a69c <_printf_i+0x1e4>
 800a698:	1b80      	subs	r0, r0, r6
 800a69a:	6060      	str	r0, [r4, #4]
 800a69c:	6863      	ldr	r3, [r4, #4]
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a6:	e7aa      	b.n	800a5fe <_printf_i+0x146>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	4632      	mov	r2, r6
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	47d0      	blx	sl
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	d0ad      	beq.n	800a612 <_printf_i+0x15a>
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	079b      	lsls	r3, r3, #30
 800a6ba:	d413      	bmi.n	800a6e4 <_printf_i+0x22c>
 800a6bc:	68e0      	ldr	r0, [r4, #12]
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	4298      	cmp	r0, r3
 800a6c2:	bfb8      	it	lt
 800a6c4:	4618      	movlt	r0, r3
 800a6c6:	e7a6      	b.n	800a616 <_printf_i+0x15e>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	4632      	mov	r2, r6
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	47d0      	blx	sl
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	d09d      	beq.n	800a612 <_printf_i+0x15a>
 800a6d6:	3501      	adds	r5, #1
 800a6d8:	68e3      	ldr	r3, [r4, #12]
 800a6da:	9903      	ldr	r1, [sp, #12]
 800a6dc:	1a5b      	subs	r3, r3, r1
 800a6de:	42ab      	cmp	r3, r5
 800a6e0:	dcf2      	bgt.n	800a6c8 <_printf_i+0x210>
 800a6e2:	e7eb      	b.n	800a6bc <_printf_i+0x204>
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	f104 0619 	add.w	r6, r4, #25
 800a6ea:	e7f5      	b.n	800a6d8 <_printf_i+0x220>
 800a6ec:	0800ce9e 	.word	0x0800ce9e
 800a6f0:	0800ceaf 	.word	0x0800ceaf

0800a6f4 <std>:
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	b510      	push	{r4, lr}
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a702:	6083      	str	r3, [r0, #8]
 800a704:	8181      	strh	r1, [r0, #12]
 800a706:	6643      	str	r3, [r0, #100]	@ 0x64
 800a708:	81c2      	strh	r2, [r0, #14]
 800a70a:	6183      	str	r3, [r0, #24]
 800a70c:	4619      	mov	r1, r3
 800a70e:	2208      	movs	r2, #8
 800a710:	305c      	adds	r0, #92	@ 0x5c
 800a712:	f000 fa1b 	bl	800ab4c <memset>
 800a716:	4b0d      	ldr	r3, [pc, #52]	@ (800a74c <std+0x58>)
 800a718:	6263      	str	r3, [r4, #36]	@ 0x24
 800a71a:	4b0d      	ldr	r3, [pc, #52]	@ (800a750 <std+0x5c>)
 800a71c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a71e:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <std+0x60>)
 800a720:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a722:	4b0d      	ldr	r3, [pc, #52]	@ (800a758 <std+0x64>)
 800a724:	6323      	str	r3, [r4, #48]	@ 0x30
 800a726:	4b0d      	ldr	r3, [pc, #52]	@ (800a75c <std+0x68>)
 800a728:	6224      	str	r4, [r4, #32]
 800a72a:	429c      	cmp	r4, r3
 800a72c:	d006      	beq.n	800a73c <std+0x48>
 800a72e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a732:	4294      	cmp	r4, r2
 800a734:	d002      	beq.n	800a73c <std+0x48>
 800a736:	33d0      	adds	r3, #208	@ 0xd0
 800a738:	429c      	cmp	r4, r3
 800a73a:	d105      	bne.n	800a748 <std+0x54>
 800a73c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a744:	f000 badc 	b.w	800ad00 <__retarget_lock_init_recursive>
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	bf00      	nop
 800a74c:	0800a99d 	.word	0x0800a99d
 800a750:	0800a9bf 	.word	0x0800a9bf
 800a754:	0800a9f7 	.word	0x0800a9f7
 800a758:	0800aa1b 	.word	0x0800aa1b
 800a75c:	20004dd8 	.word	0x20004dd8

0800a760 <stdio_exit_handler>:
 800a760:	4a02      	ldr	r2, [pc, #8]	@ (800a76c <stdio_exit_handler+0xc>)
 800a762:	4903      	ldr	r1, [pc, #12]	@ (800a770 <stdio_exit_handler+0x10>)
 800a764:	4803      	ldr	r0, [pc, #12]	@ (800a774 <stdio_exit_handler+0x14>)
 800a766:	f000 b869 	b.w	800a83c <_fwalk_sglue>
 800a76a:	bf00      	nop
 800a76c:	20000010 	.word	0x20000010
 800a770:	0800c825 	.word	0x0800c825
 800a774:	20000020 	.word	0x20000020

0800a778 <cleanup_stdio>:
 800a778:	6841      	ldr	r1, [r0, #4]
 800a77a:	4b0c      	ldr	r3, [pc, #48]	@ (800a7ac <cleanup_stdio+0x34>)
 800a77c:	4299      	cmp	r1, r3
 800a77e:	b510      	push	{r4, lr}
 800a780:	4604      	mov	r4, r0
 800a782:	d001      	beq.n	800a788 <cleanup_stdio+0x10>
 800a784:	f002 f84e 	bl	800c824 <_fflush_r>
 800a788:	68a1      	ldr	r1, [r4, #8]
 800a78a:	4b09      	ldr	r3, [pc, #36]	@ (800a7b0 <cleanup_stdio+0x38>)
 800a78c:	4299      	cmp	r1, r3
 800a78e:	d002      	beq.n	800a796 <cleanup_stdio+0x1e>
 800a790:	4620      	mov	r0, r4
 800a792:	f002 f847 	bl	800c824 <_fflush_r>
 800a796:	68e1      	ldr	r1, [r4, #12]
 800a798:	4b06      	ldr	r3, [pc, #24]	@ (800a7b4 <cleanup_stdio+0x3c>)
 800a79a:	4299      	cmp	r1, r3
 800a79c:	d004      	beq.n	800a7a8 <cleanup_stdio+0x30>
 800a79e:	4620      	mov	r0, r4
 800a7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a4:	f002 b83e 	b.w	800c824 <_fflush_r>
 800a7a8:	bd10      	pop	{r4, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20004dd8 	.word	0x20004dd8
 800a7b0:	20004e40 	.word	0x20004e40
 800a7b4:	20004ea8 	.word	0x20004ea8

0800a7b8 <global_stdio_init.part.0>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e8 <global_stdio_init.part.0+0x30>)
 800a7bc:	4c0b      	ldr	r4, [pc, #44]	@ (800a7ec <global_stdio_init.part.0+0x34>)
 800a7be:	4a0c      	ldr	r2, [pc, #48]	@ (800a7f0 <global_stdio_init.part.0+0x38>)
 800a7c0:	601a      	str	r2, [r3, #0]
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	f7ff ff94 	bl	800a6f4 <std>
 800a7cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	2109      	movs	r1, #9
 800a7d4:	f7ff ff8e 	bl	800a6f4 <std>
 800a7d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a7dc:	2202      	movs	r2, #2
 800a7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7e2:	2112      	movs	r1, #18
 800a7e4:	f7ff bf86 	b.w	800a6f4 <std>
 800a7e8:	20004f10 	.word	0x20004f10
 800a7ec:	20004dd8 	.word	0x20004dd8
 800a7f0:	0800a761 	.word	0x0800a761

0800a7f4 <__sfp_lock_acquire>:
 800a7f4:	4801      	ldr	r0, [pc, #4]	@ (800a7fc <__sfp_lock_acquire+0x8>)
 800a7f6:	f000 ba84 	b.w	800ad02 <__retarget_lock_acquire_recursive>
 800a7fa:	bf00      	nop
 800a7fc:	20004f19 	.word	0x20004f19

0800a800 <__sfp_lock_release>:
 800a800:	4801      	ldr	r0, [pc, #4]	@ (800a808 <__sfp_lock_release+0x8>)
 800a802:	f000 ba7f 	b.w	800ad04 <__retarget_lock_release_recursive>
 800a806:	bf00      	nop
 800a808:	20004f19 	.word	0x20004f19

0800a80c <__sinit>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4604      	mov	r4, r0
 800a810:	f7ff fff0 	bl	800a7f4 <__sfp_lock_acquire>
 800a814:	6a23      	ldr	r3, [r4, #32]
 800a816:	b11b      	cbz	r3, 800a820 <__sinit+0x14>
 800a818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a81c:	f7ff bff0 	b.w	800a800 <__sfp_lock_release>
 800a820:	4b04      	ldr	r3, [pc, #16]	@ (800a834 <__sinit+0x28>)
 800a822:	6223      	str	r3, [r4, #32]
 800a824:	4b04      	ldr	r3, [pc, #16]	@ (800a838 <__sinit+0x2c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1f5      	bne.n	800a818 <__sinit+0xc>
 800a82c:	f7ff ffc4 	bl	800a7b8 <global_stdio_init.part.0>
 800a830:	e7f2      	b.n	800a818 <__sinit+0xc>
 800a832:	bf00      	nop
 800a834:	0800a779 	.word	0x0800a779
 800a838:	20004f10 	.word	0x20004f10

0800a83c <_fwalk_sglue>:
 800a83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a840:	4607      	mov	r7, r0
 800a842:	4688      	mov	r8, r1
 800a844:	4614      	mov	r4, r2
 800a846:	2600      	movs	r6, #0
 800a848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a84c:	f1b9 0901 	subs.w	r9, r9, #1
 800a850:	d505      	bpl.n	800a85e <_fwalk_sglue+0x22>
 800a852:	6824      	ldr	r4, [r4, #0]
 800a854:	2c00      	cmp	r4, #0
 800a856:	d1f7      	bne.n	800a848 <_fwalk_sglue+0xc>
 800a858:	4630      	mov	r0, r6
 800a85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a85e:	89ab      	ldrh	r3, [r5, #12]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d907      	bls.n	800a874 <_fwalk_sglue+0x38>
 800a864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a868:	3301      	adds	r3, #1
 800a86a:	d003      	beq.n	800a874 <_fwalk_sglue+0x38>
 800a86c:	4629      	mov	r1, r5
 800a86e:	4638      	mov	r0, r7
 800a870:	47c0      	blx	r8
 800a872:	4306      	orrs	r6, r0
 800a874:	3568      	adds	r5, #104	@ 0x68
 800a876:	e7e9      	b.n	800a84c <_fwalk_sglue+0x10>

0800a878 <iprintf>:
 800a878:	b40f      	push	{r0, r1, r2, r3}
 800a87a:	b507      	push	{r0, r1, r2, lr}
 800a87c:	4906      	ldr	r1, [pc, #24]	@ (800a898 <iprintf+0x20>)
 800a87e:	ab04      	add	r3, sp, #16
 800a880:	6808      	ldr	r0, [r1, #0]
 800a882:	f853 2b04 	ldr.w	r2, [r3], #4
 800a886:	6881      	ldr	r1, [r0, #8]
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	f001 fe2f 	bl	800c4ec <_vfiprintf_r>
 800a88e:	b003      	add	sp, #12
 800a890:	f85d eb04 	ldr.w	lr, [sp], #4
 800a894:	b004      	add	sp, #16
 800a896:	4770      	bx	lr
 800a898:	2000001c 	.word	0x2000001c

0800a89c <_puts_r>:
 800a89c:	6a03      	ldr	r3, [r0, #32]
 800a89e:	b570      	push	{r4, r5, r6, lr}
 800a8a0:	6884      	ldr	r4, [r0, #8]
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	460e      	mov	r6, r1
 800a8a6:	b90b      	cbnz	r3, 800a8ac <_puts_r+0x10>
 800a8a8:	f7ff ffb0 	bl	800a80c <__sinit>
 800a8ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8ae:	07db      	lsls	r3, r3, #31
 800a8b0:	d405      	bmi.n	800a8be <_puts_r+0x22>
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	0598      	lsls	r0, r3, #22
 800a8b6:	d402      	bmi.n	800a8be <_puts_r+0x22>
 800a8b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ba:	f000 fa22 	bl	800ad02 <__retarget_lock_acquire_recursive>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	0719      	lsls	r1, r3, #28
 800a8c2:	d502      	bpl.n	800a8ca <_puts_r+0x2e>
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d135      	bne.n	800a936 <_puts_r+0x9a>
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f000 f8e7 	bl	800aaa0 <__swsetup_r>
 800a8d2:	b380      	cbz	r0, 800a936 <_puts_r+0x9a>
 800a8d4:	f04f 35ff 	mov.w	r5, #4294967295
 800a8d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8da:	07da      	lsls	r2, r3, #31
 800a8dc:	d405      	bmi.n	800a8ea <_puts_r+0x4e>
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	059b      	lsls	r3, r3, #22
 800a8e2:	d402      	bmi.n	800a8ea <_puts_r+0x4e>
 800a8e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8e6:	f000 fa0d 	bl	800ad04 <__retarget_lock_release_recursive>
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	da04      	bge.n	800a8fc <_puts_r+0x60>
 800a8f2:	69a2      	ldr	r2, [r4, #24]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	dc17      	bgt.n	800a928 <_puts_r+0x8c>
 800a8f8:	290a      	cmp	r1, #10
 800a8fa:	d015      	beq.n	800a928 <_puts_r+0x8c>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	6022      	str	r2, [r4, #0]
 800a902:	7019      	strb	r1, [r3, #0]
 800a904:	68a3      	ldr	r3, [r4, #8]
 800a906:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a90a:	3b01      	subs	r3, #1
 800a90c:	60a3      	str	r3, [r4, #8]
 800a90e:	2900      	cmp	r1, #0
 800a910:	d1ed      	bne.n	800a8ee <_puts_r+0x52>
 800a912:	2b00      	cmp	r3, #0
 800a914:	da11      	bge.n	800a93a <_puts_r+0x9e>
 800a916:	4622      	mov	r2, r4
 800a918:	210a      	movs	r1, #10
 800a91a:	4628      	mov	r0, r5
 800a91c:	f000 f881 	bl	800aa22 <__swbuf_r>
 800a920:	3001      	adds	r0, #1
 800a922:	d0d7      	beq.n	800a8d4 <_puts_r+0x38>
 800a924:	250a      	movs	r5, #10
 800a926:	e7d7      	b.n	800a8d8 <_puts_r+0x3c>
 800a928:	4622      	mov	r2, r4
 800a92a:	4628      	mov	r0, r5
 800a92c:	f000 f879 	bl	800aa22 <__swbuf_r>
 800a930:	3001      	adds	r0, #1
 800a932:	d1e7      	bne.n	800a904 <_puts_r+0x68>
 800a934:	e7ce      	b.n	800a8d4 <_puts_r+0x38>
 800a936:	3e01      	subs	r6, #1
 800a938:	e7e4      	b.n	800a904 <_puts_r+0x68>
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	6022      	str	r2, [r4, #0]
 800a940:	220a      	movs	r2, #10
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	e7ee      	b.n	800a924 <_puts_r+0x88>
	...

0800a948 <puts>:
 800a948:	4b02      	ldr	r3, [pc, #8]	@ (800a954 <puts+0xc>)
 800a94a:	4601      	mov	r1, r0
 800a94c:	6818      	ldr	r0, [r3, #0]
 800a94e:	f7ff bfa5 	b.w	800a89c <_puts_r>
 800a952:	bf00      	nop
 800a954:	2000001c 	.word	0x2000001c

0800a958 <siprintf>:
 800a958:	b40e      	push	{r1, r2, r3}
 800a95a:	b510      	push	{r4, lr}
 800a95c:	b09d      	sub	sp, #116	@ 0x74
 800a95e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a960:	9002      	str	r0, [sp, #8]
 800a962:	9006      	str	r0, [sp, #24]
 800a964:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a968:	480a      	ldr	r0, [pc, #40]	@ (800a994 <siprintf+0x3c>)
 800a96a:	9107      	str	r1, [sp, #28]
 800a96c:	9104      	str	r1, [sp, #16]
 800a96e:	490a      	ldr	r1, [pc, #40]	@ (800a998 <siprintf+0x40>)
 800a970:	f853 2b04 	ldr.w	r2, [r3], #4
 800a974:	9105      	str	r1, [sp, #20]
 800a976:	2400      	movs	r4, #0
 800a978:	a902      	add	r1, sp, #8
 800a97a:	6800      	ldr	r0, [r0, #0]
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a980:	f001 fc8e 	bl	800c2a0 <_svfiprintf_r>
 800a984:	9b02      	ldr	r3, [sp, #8]
 800a986:	701c      	strb	r4, [r3, #0]
 800a988:	b01d      	add	sp, #116	@ 0x74
 800a98a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a98e:	b003      	add	sp, #12
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	2000001c 	.word	0x2000001c
 800a998:	ffff0208 	.word	0xffff0208

0800a99c <__sread>:
 800a99c:	b510      	push	{r4, lr}
 800a99e:	460c      	mov	r4, r1
 800a9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a4:	f000 f95e 	bl	800ac64 <_read_r>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	bfab      	itete	ge
 800a9ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a9b0:	181b      	addge	r3, r3, r0
 800a9b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9b6:	bfac      	ite	ge
 800a9b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9ba:	81a3      	strhlt	r3, [r4, #12]
 800a9bc:	bd10      	pop	{r4, pc}

0800a9be <__swrite>:
 800a9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c2:	461f      	mov	r7, r3
 800a9c4:	898b      	ldrh	r3, [r1, #12]
 800a9c6:	05db      	lsls	r3, r3, #23
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	4616      	mov	r6, r2
 800a9ce:	d505      	bpl.n	800a9dc <__swrite+0x1e>
 800a9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f000 f932 	bl	800ac40 <_lseek_r>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	4632      	mov	r2, r6
 800a9ea:	463b      	mov	r3, r7
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f2:	f000 b949 	b.w	800ac88 <_write_r>

0800a9f6 <__sseek>:
 800a9f6:	b510      	push	{r4, lr}
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fe:	f000 f91f 	bl	800ac40 <_lseek_r>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	bf15      	itete	ne
 800aa08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa12:	81a3      	strheq	r3, [r4, #12]
 800aa14:	bf18      	it	ne
 800aa16:	81a3      	strhne	r3, [r4, #12]
 800aa18:	bd10      	pop	{r4, pc}

0800aa1a <__sclose>:
 800aa1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa1e:	f000 b8a1 	b.w	800ab64 <_close_r>

0800aa22 <__swbuf_r>:
 800aa22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa24:	460e      	mov	r6, r1
 800aa26:	4614      	mov	r4, r2
 800aa28:	4605      	mov	r5, r0
 800aa2a:	b118      	cbz	r0, 800aa34 <__swbuf_r+0x12>
 800aa2c:	6a03      	ldr	r3, [r0, #32]
 800aa2e:	b90b      	cbnz	r3, 800aa34 <__swbuf_r+0x12>
 800aa30:	f7ff feec 	bl	800a80c <__sinit>
 800aa34:	69a3      	ldr	r3, [r4, #24]
 800aa36:	60a3      	str	r3, [r4, #8]
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	071a      	lsls	r2, r3, #28
 800aa3c:	d501      	bpl.n	800aa42 <__swbuf_r+0x20>
 800aa3e:	6923      	ldr	r3, [r4, #16]
 800aa40:	b943      	cbnz	r3, 800aa54 <__swbuf_r+0x32>
 800aa42:	4621      	mov	r1, r4
 800aa44:	4628      	mov	r0, r5
 800aa46:	f000 f82b 	bl	800aaa0 <__swsetup_r>
 800aa4a:	b118      	cbz	r0, 800aa54 <__swbuf_r+0x32>
 800aa4c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa50:	4638      	mov	r0, r7
 800aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	6922      	ldr	r2, [r4, #16]
 800aa58:	1a98      	subs	r0, r3, r2
 800aa5a:	6963      	ldr	r3, [r4, #20]
 800aa5c:	b2f6      	uxtb	r6, r6
 800aa5e:	4283      	cmp	r3, r0
 800aa60:	4637      	mov	r7, r6
 800aa62:	dc05      	bgt.n	800aa70 <__swbuf_r+0x4e>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f001 fedc 	bl	800c824 <_fflush_r>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d1ed      	bne.n	800aa4c <__swbuf_r+0x2a>
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	60a3      	str	r3, [r4, #8]
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	6022      	str	r2, [r4, #0]
 800aa7c:	701e      	strb	r6, [r3, #0]
 800aa7e:	6962      	ldr	r2, [r4, #20]
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d004      	beq.n	800aa90 <__swbuf_r+0x6e>
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	07db      	lsls	r3, r3, #31
 800aa8a:	d5e1      	bpl.n	800aa50 <__swbuf_r+0x2e>
 800aa8c:	2e0a      	cmp	r6, #10
 800aa8e:	d1df      	bne.n	800aa50 <__swbuf_r+0x2e>
 800aa90:	4621      	mov	r1, r4
 800aa92:	4628      	mov	r0, r5
 800aa94:	f001 fec6 	bl	800c824 <_fflush_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0d9      	beq.n	800aa50 <__swbuf_r+0x2e>
 800aa9c:	e7d6      	b.n	800aa4c <__swbuf_r+0x2a>
	...

0800aaa0 <__swsetup_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4b29      	ldr	r3, [pc, #164]	@ (800ab48 <__swsetup_r+0xa8>)
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	b118      	cbz	r0, 800aab4 <__swsetup_r+0x14>
 800aaac:	6a03      	ldr	r3, [r0, #32]
 800aaae:	b90b      	cbnz	r3, 800aab4 <__swsetup_r+0x14>
 800aab0:	f7ff feac 	bl	800a80c <__sinit>
 800aab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab8:	0719      	lsls	r1, r3, #28
 800aaba:	d422      	bmi.n	800ab02 <__swsetup_r+0x62>
 800aabc:	06da      	lsls	r2, r3, #27
 800aabe:	d407      	bmi.n	800aad0 <__swsetup_r+0x30>
 800aac0:	2209      	movs	r2, #9
 800aac2:	602a      	str	r2, [r5, #0]
 800aac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295
 800aace:	e033      	b.n	800ab38 <__swsetup_r+0x98>
 800aad0:	0758      	lsls	r0, r3, #29
 800aad2:	d512      	bpl.n	800aafa <__swsetup_r+0x5a>
 800aad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aad6:	b141      	cbz	r1, 800aaea <__swsetup_r+0x4a>
 800aad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aadc:	4299      	cmp	r1, r3
 800aade:	d002      	beq.n	800aae6 <__swsetup_r+0x46>
 800aae0:	4628      	mov	r0, r5
 800aae2:	f000 ff07 	bl	800b8f4 <_free_r>
 800aae6:	2300      	movs	r3, #0
 800aae8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaea:	89a3      	ldrh	r3, [r4, #12]
 800aaec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aaf0:	81a3      	strh	r3, [r4, #12]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6063      	str	r3, [r4, #4]
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f043 0308 	orr.w	r3, r3, #8
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	b94b      	cbnz	r3, 800ab1a <__swsetup_r+0x7a>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab10:	d003      	beq.n	800ab1a <__swsetup_r+0x7a>
 800ab12:	4621      	mov	r1, r4
 800ab14:	4628      	mov	r0, r5
 800ab16:	f001 fed3 	bl	800c8c0 <__smakebuf_r>
 800ab1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab1e:	f013 0201 	ands.w	r2, r3, #1
 800ab22:	d00a      	beq.n	800ab3a <__swsetup_r+0x9a>
 800ab24:	2200      	movs	r2, #0
 800ab26:	60a2      	str	r2, [r4, #8]
 800ab28:	6962      	ldr	r2, [r4, #20]
 800ab2a:	4252      	negs	r2, r2
 800ab2c:	61a2      	str	r2, [r4, #24]
 800ab2e:	6922      	ldr	r2, [r4, #16]
 800ab30:	b942      	cbnz	r2, 800ab44 <__swsetup_r+0xa4>
 800ab32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab36:	d1c5      	bne.n	800aac4 <__swsetup_r+0x24>
 800ab38:	bd38      	pop	{r3, r4, r5, pc}
 800ab3a:	0799      	lsls	r1, r3, #30
 800ab3c:	bf58      	it	pl
 800ab3e:	6962      	ldrpl	r2, [r4, #20]
 800ab40:	60a2      	str	r2, [r4, #8]
 800ab42:	e7f4      	b.n	800ab2e <__swsetup_r+0x8e>
 800ab44:	2000      	movs	r0, #0
 800ab46:	e7f7      	b.n	800ab38 <__swsetup_r+0x98>
 800ab48:	2000001c 	.word	0x2000001c

0800ab4c <memset>:
 800ab4c:	4402      	add	r2, r0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d100      	bne.n	800ab56 <memset+0xa>
 800ab54:	4770      	bx	lr
 800ab56:	f803 1b01 	strb.w	r1, [r3], #1
 800ab5a:	e7f9      	b.n	800ab50 <memset+0x4>

0800ab5c <_localeconv_r>:
 800ab5c:	4800      	ldr	r0, [pc, #0]	@ (800ab60 <_localeconv_r+0x4>)
 800ab5e:	4770      	bx	lr
 800ab60:	2000015c 	.word	0x2000015c

0800ab64 <_close_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	4d06      	ldr	r5, [pc, #24]	@ (800ab80 <_close_r+0x1c>)
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	602b      	str	r3, [r5, #0]
 800ab70:	f7f7 fa92 	bl	8002098 <_close>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d102      	bne.n	800ab7e <_close_r+0x1a>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	b103      	cbz	r3, 800ab7e <_close_r+0x1a>
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	20004f14 	.word	0x20004f14

0800ab84 <_reclaim_reent>:
 800ab84:	4b2d      	ldr	r3, [pc, #180]	@ (800ac3c <_reclaim_reent+0xb8>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4283      	cmp	r3, r0
 800ab8a:	b570      	push	{r4, r5, r6, lr}
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	d053      	beq.n	800ac38 <_reclaim_reent+0xb4>
 800ab90:	69c3      	ldr	r3, [r0, #28]
 800ab92:	b31b      	cbz	r3, 800abdc <_reclaim_reent+0x58>
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	b163      	cbz	r3, 800abb2 <_reclaim_reent+0x2e>
 800ab98:	2500      	movs	r5, #0
 800ab9a:	69e3      	ldr	r3, [r4, #28]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	5959      	ldr	r1, [r3, r5]
 800aba0:	b9b1      	cbnz	r1, 800abd0 <_reclaim_reent+0x4c>
 800aba2:	3504      	adds	r5, #4
 800aba4:	2d80      	cmp	r5, #128	@ 0x80
 800aba6:	d1f8      	bne.n	800ab9a <_reclaim_reent+0x16>
 800aba8:	69e3      	ldr	r3, [r4, #28]
 800abaa:	4620      	mov	r0, r4
 800abac:	68d9      	ldr	r1, [r3, #12]
 800abae:	f000 fea1 	bl	800b8f4 <_free_r>
 800abb2:	69e3      	ldr	r3, [r4, #28]
 800abb4:	6819      	ldr	r1, [r3, #0]
 800abb6:	b111      	cbz	r1, 800abbe <_reclaim_reent+0x3a>
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fe9b 	bl	800b8f4 <_free_r>
 800abbe:	69e3      	ldr	r3, [r4, #28]
 800abc0:	689d      	ldr	r5, [r3, #8]
 800abc2:	b15d      	cbz	r5, 800abdc <_reclaim_reent+0x58>
 800abc4:	4629      	mov	r1, r5
 800abc6:	4620      	mov	r0, r4
 800abc8:	682d      	ldr	r5, [r5, #0]
 800abca:	f000 fe93 	bl	800b8f4 <_free_r>
 800abce:	e7f8      	b.n	800abc2 <_reclaim_reent+0x3e>
 800abd0:	680e      	ldr	r6, [r1, #0]
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 fe8e 	bl	800b8f4 <_free_r>
 800abd8:	4631      	mov	r1, r6
 800abda:	e7e1      	b.n	800aba0 <_reclaim_reent+0x1c>
 800abdc:	6961      	ldr	r1, [r4, #20]
 800abde:	b111      	cbz	r1, 800abe6 <_reclaim_reent+0x62>
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 fe87 	bl	800b8f4 <_free_r>
 800abe6:	69e1      	ldr	r1, [r4, #28]
 800abe8:	b111      	cbz	r1, 800abf0 <_reclaim_reent+0x6c>
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fe82 	bl	800b8f4 <_free_r>
 800abf0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800abf2:	b111      	cbz	r1, 800abfa <_reclaim_reent+0x76>
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fe7d 	bl	800b8f4 <_free_r>
 800abfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abfc:	b111      	cbz	r1, 800ac04 <_reclaim_reent+0x80>
 800abfe:	4620      	mov	r0, r4
 800ac00:	f000 fe78 	bl	800b8f4 <_free_r>
 800ac04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ac06:	b111      	cbz	r1, 800ac0e <_reclaim_reent+0x8a>
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fe73 	bl	800b8f4 <_free_r>
 800ac0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac10:	b111      	cbz	r1, 800ac18 <_reclaim_reent+0x94>
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 fe6e 	bl	800b8f4 <_free_r>
 800ac18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ac1a:	b111      	cbz	r1, 800ac22 <_reclaim_reent+0x9e>
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fe69 	bl	800b8f4 <_free_r>
 800ac22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ac24:	b111      	cbz	r1, 800ac2c <_reclaim_reent+0xa8>
 800ac26:	4620      	mov	r0, r4
 800ac28:	f000 fe64 	bl	800b8f4 <_free_r>
 800ac2c:	6a23      	ldr	r3, [r4, #32]
 800ac2e:	b11b      	cbz	r3, 800ac38 <_reclaim_reent+0xb4>
 800ac30:	4620      	mov	r0, r4
 800ac32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac36:	4718      	bx	r3
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
 800ac3a:	bf00      	nop
 800ac3c:	2000001c 	.word	0x2000001c

0800ac40 <_lseek_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4d07      	ldr	r5, [pc, #28]	@ (800ac60 <_lseek_r+0x20>)
 800ac44:	4604      	mov	r4, r0
 800ac46:	4608      	mov	r0, r1
 800ac48:	4611      	mov	r1, r2
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	602a      	str	r2, [r5, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	f7f7 fa49 	bl	80020e6 <_lseek>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_lseek_r+0x1e>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_lseek_r+0x1e>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	20004f14 	.word	0x20004f14

0800ac64 <_read_r>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	4d07      	ldr	r5, [pc, #28]	@ (800ac84 <_read_r+0x20>)
 800ac68:	4604      	mov	r4, r0
 800ac6a:	4608      	mov	r0, r1
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	2200      	movs	r2, #0
 800ac70:	602a      	str	r2, [r5, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	f7f7 f9d7 	bl	8002026 <_read>
 800ac78:	1c43      	adds	r3, r0, #1
 800ac7a:	d102      	bne.n	800ac82 <_read_r+0x1e>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	b103      	cbz	r3, 800ac82 <_read_r+0x1e>
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	20004f14 	.word	0x20004f14

0800ac88 <_write_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d07      	ldr	r5, [pc, #28]	@ (800aca8 <_write_r+0x20>)
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	4608      	mov	r0, r1
 800ac90:	4611      	mov	r1, r2
 800ac92:	2200      	movs	r2, #0
 800ac94:	602a      	str	r2, [r5, #0]
 800ac96:	461a      	mov	r2, r3
 800ac98:	f7f7 f9e2 	bl	8002060 <_write>
 800ac9c:	1c43      	adds	r3, r0, #1
 800ac9e:	d102      	bne.n	800aca6 <_write_r+0x1e>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	b103      	cbz	r3, 800aca6 <_write_r+0x1e>
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	20004f14 	.word	0x20004f14

0800acac <__errno>:
 800acac:	4b01      	ldr	r3, [pc, #4]	@ (800acb4 <__errno+0x8>)
 800acae:	6818      	ldr	r0, [r3, #0]
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	2000001c 	.word	0x2000001c

0800acb8 <__libc_init_array>:
 800acb8:	b570      	push	{r4, r5, r6, lr}
 800acba:	4d0d      	ldr	r5, [pc, #52]	@ (800acf0 <__libc_init_array+0x38>)
 800acbc:	4c0d      	ldr	r4, [pc, #52]	@ (800acf4 <__libc_init_array+0x3c>)
 800acbe:	1b64      	subs	r4, r4, r5
 800acc0:	10a4      	asrs	r4, r4, #2
 800acc2:	2600      	movs	r6, #0
 800acc4:	42a6      	cmp	r6, r4
 800acc6:	d109      	bne.n	800acdc <__libc_init_array+0x24>
 800acc8:	4d0b      	ldr	r5, [pc, #44]	@ (800acf8 <__libc_init_array+0x40>)
 800acca:	4c0c      	ldr	r4, [pc, #48]	@ (800acfc <__libc_init_array+0x44>)
 800accc:	f001 ff66 	bl	800cb9c <_init>
 800acd0:	1b64      	subs	r4, r4, r5
 800acd2:	10a4      	asrs	r4, r4, #2
 800acd4:	2600      	movs	r6, #0
 800acd6:	42a6      	cmp	r6, r4
 800acd8:	d105      	bne.n	800ace6 <__libc_init_array+0x2e>
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ace0:	4798      	blx	r3
 800ace2:	3601      	adds	r6, #1
 800ace4:	e7ee      	b.n	800acc4 <__libc_init_array+0xc>
 800ace6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acea:	4798      	blx	r3
 800acec:	3601      	adds	r6, #1
 800acee:	e7f2      	b.n	800acd6 <__libc_init_array+0x1e>
 800acf0:	0800d20c 	.word	0x0800d20c
 800acf4:	0800d20c 	.word	0x0800d20c
 800acf8:	0800d20c 	.word	0x0800d20c
 800acfc:	0800d210 	.word	0x0800d210

0800ad00 <__retarget_lock_init_recursive>:
 800ad00:	4770      	bx	lr

0800ad02 <__retarget_lock_acquire_recursive>:
 800ad02:	4770      	bx	lr

0800ad04 <__retarget_lock_release_recursive>:
 800ad04:	4770      	bx	lr

0800ad06 <memcpy>:
 800ad06:	440a      	add	r2, r1
 800ad08:	4291      	cmp	r1, r2
 800ad0a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad0e:	d100      	bne.n	800ad12 <memcpy+0xc>
 800ad10:	4770      	bx	lr
 800ad12:	b510      	push	{r4, lr}
 800ad14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad1c:	4291      	cmp	r1, r2
 800ad1e:	d1f9      	bne.n	800ad14 <memcpy+0xe>
 800ad20:	bd10      	pop	{r4, pc}

0800ad22 <quorem>:
 800ad22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad26:	6903      	ldr	r3, [r0, #16]
 800ad28:	690c      	ldr	r4, [r1, #16]
 800ad2a:	42a3      	cmp	r3, r4
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	db7e      	blt.n	800ae2e <quorem+0x10c>
 800ad30:	3c01      	subs	r4, #1
 800ad32:	f101 0814 	add.w	r8, r1, #20
 800ad36:	00a3      	lsls	r3, r4, #2
 800ad38:	f100 0514 	add.w	r5, r0, #20
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad42:	9301      	str	r3, [sp, #4]
 800ad44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad54:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad58:	d32e      	bcc.n	800adb8 <quorem+0x96>
 800ad5a:	f04f 0a00 	mov.w	sl, #0
 800ad5e:	46c4      	mov	ip, r8
 800ad60:	46ae      	mov	lr, r5
 800ad62:	46d3      	mov	fp, sl
 800ad64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad68:	b298      	uxth	r0, r3
 800ad6a:	fb06 a000 	mla	r0, r6, r0, sl
 800ad6e:	0c02      	lsrs	r2, r0, #16
 800ad70:	0c1b      	lsrs	r3, r3, #16
 800ad72:	fb06 2303 	mla	r3, r6, r3, r2
 800ad76:	f8de 2000 	ldr.w	r2, [lr]
 800ad7a:	b280      	uxth	r0, r0
 800ad7c:	b292      	uxth	r2, r2
 800ad7e:	1a12      	subs	r2, r2, r0
 800ad80:	445a      	add	r2, fp
 800ad82:	f8de 0000 	ldr.w	r0, [lr]
 800ad86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad90:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad94:	b292      	uxth	r2, r2
 800ad96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad9a:	45e1      	cmp	r9, ip
 800ad9c:	f84e 2b04 	str.w	r2, [lr], #4
 800ada0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ada4:	d2de      	bcs.n	800ad64 <quorem+0x42>
 800ada6:	9b00      	ldr	r3, [sp, #0]
 800ada8:	58eb      	ldr	r3, [r5, r3]
 800adaa:	b92b      	cbnz	r3, 800adb8 <quorem+0x96>
 800adac:	9b01      	ldr	r3, [sp, #4]
 800adae:	3b04      	subs	r3, #4
 800adb0:	429d      	cmp	r5, r3
 800adb2:	461a      	mov	r2, r3
 800adb4:	d32f      	bcc.n	800ae16 <quorem+0xf4>
 800adb6:	613c      	str	r4, [r7, #16]
 800adb8:	4638      	mov	r0, r7
 800adba:	f001 f90d 	bl	800bfd8 <__mcmp>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	db25      	blt.n	800ae0e <quorem+0xec>
 800adc2:	4629      	mov	r1, r5
 800adc4:	2000      	movs	r0, #0
 800adc6:	f858 2b04 	ldr.w	r2, [r8], #4
 800adca:	f8d1 c000 	ldr.w	ip, [r1]
 800adce:	fa1f fe82 	uxth.w	lr, r2
 800add2:	fa1f f38c 	uxth.w	r3, ip
 800add6:	eba3 030e 	sub.w	r3, r3, lr
 800adda:	4403      	add	r3, r0
 800addc:	0c12      	lsrs	r2, r2, #16
 800adde:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ade2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adec:	45c1      	cmp	r9, r8
 800adee:	f841 3b04 	str.w	r3, [r1], #4
 800adf2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800adf6:	d2e6      	bcs.n	800adc6 <quorem+0xa4>
 800adf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae00:	b922      	cbnz	r2, 800ae0c <quorem+0xea>
 800ae02:	3b04      	subs	r3, #4
 800ae04:	429d      	cmp	r5, r3
 800ae06:	461a      	mov	r2, r3
 800ae08:	d30b      	bcc.n	800ae22 <quorem+0x100>
 800ae0a:	613c      	str	r4, [r7, #16]
 800ae0c:	3601      	adds	r6, #1
 800ae0e:	4630      	mov	r0, r6
 800ae10:	b003      	add	sp, #12
 800ae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae16:	6812      	ldr	r2, [r2, #0]
 800ae18:	3b04      	subs	r3, #4
 800ae1a:	2a00      	cmp	r2, #0
 800ae1c:	d1cb      	bne.n	800adb6 <quorem+0x94>
 800ae1e:	3c01      	subs	r4, #1
 800ae20:	e7c6      	b.n	800adb0 <quorem+0x8e>
 800ae22:	6812      	ldr	r2, [r2, #0]
 800ae24:	3b04      	subs	r3, #4
 800ae26:	2a00      	cmp	r2, #0
 800ae28:	d1ef      	bne.n	800ae0a <quorem+0xe8>
 800ae2a:	3c01      	subs	r4, #1
 800ae2c:	e7ea      	b.n	800ae04 <quorem+0xe2>
 800ae2e:	2000      	movs	r0, #0
 800ae30:	e7ee      	b.n	800ae10 <quorem+0xee>
 800ae32:	0000      	movs	r0, r0
 800ae34:	0000      	movs	r0, r0
	...

0800ae38 <_dtoa_r>:
 800ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	ed2d 8b02 	vpush	{d8}
 800ae40:	69c7      	ldr	r7, [r0, #28]
 800ae42:	b091      	sub	sp, #68	@ 0x44
 800ae44:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae48:	ec55 4b10 	vmov	r4, r5, d0
 800ae4c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ae4e:	9107      	str	r1, [sp, #28]
 800ae50:	4681      	mov	r9, r0
 800ae52:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae54:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae56:	b97f      	cbnz	r7, 800ae78 <_dtoa_r+0x40>
 800ae58:	2010      	movs	r0, #16
 800ae5a:	f000 fd95 	bl	800b988 <malloc>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	f8c9 001c 	str.w	r0, [r9, #28]
 800ae64:	b920      	cbnz	r0, 800ae70 <_dtoa_r+0x38>
 800ae66:	4ba0      	ldr	r3, [pc, #640]	@ (800b0e8 <_dtoa_r+0x2b0>)
 800ae68:	21ef      	movs	r1, #239	@ 0xef
 800ae6a:	48a0      	ldr	r0, [pc, #640]	@ (800b0ec <_dtoa_r+0x2b4>)
 800ae6c:	f001 fdb0 	bl	800c9d0 <__assert_func>
 800ae70:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae74:	6007      	str	r7, [r0, #0]
 800ae76:	60c7      	str	r7, [r0, #12]
 800ae78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae7c:	6819      	ldr	r1, [r3, #0]
 800ae7e:	b159      	cbz	r1, 800ae98 <_dtoa_r+0x60>
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	604a      	str	r2, [r1, #4]
 800ae84:	2301      	movs	r3, #1
 800ae86:	4093      	lsls	r3, r2
 800ae88:	608b      	str	r3, [r1, #8]
 800ae8a:	4648      	mov	r0, r9
 800ae8c:	f000 fe72 	bl	800bb74 <_Bfree>
 800ae90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae94:	2200      	movs	r2, #0
 800ae96:	601a      	str	r2, [r3, #0]
 800ae98:	1e2b      	subs	r3, r5, #0
 800ae9a:	bfbb      	ittet	lt
 800ae9c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aea0:	9303      	strlt	r3, [sp, #12]
 800aea2:	2300      	movge	r3, #0
 800aea4:	2201      	movlt	r2, #1
 800aea6:	bfac      	ite	ge
 800aea8:	6033      	strge	r3, [r6, #0]
 800aeaa:	6032      	strlt	r2, [r6, #0]
 800aeac:	4b90      	ldr	r3, [pc, #576]	@ (800b0f0 <_dtoa_r+0x2b8>)
 800aeae:	9e03      	ldr	r6, [sp, #12]
 800aeb0:	43b3      	bics	r3, r6
 800aeb2:	d110      	bne.n	800aed6 <_dtoa_r+0x9e>
 800aeb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aeb6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800aec0:	4323      	orrs	r3, r4
 800aec2:	f000 84e6 	beq.w	800b892 <_dtoa_r+0xa5a>
 800aec6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aec8:	4f8a      	ldr	r7, [pc, #552]	@ (800b0f4 <_dtoa_r+0x2bc>)
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 84e8 	beq.w	800b8a0 <_dtoa_r+0xa68>
 800aed0:	1cfb      	adds	r3, r7, #3
 800aed2:	f000 bce3 	b.w	800b89c <_dtoa_r+0xa64>
 800aed6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800aeda:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee2:	d10a      	bne.n	800aefa <_dtoa_r+0xc2>
 800aee4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aee6:	2301      	movs	r3, #1
 800aee8:	6013      	str	r3, [r2, #0]
 800aeea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aeec:	b113      	cbz	r3, 800aef4 <_dtoa_r+0xbc>
 800aeee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800aef0:	4b81      	ldr	r3, [pc, #516]	@ (800b0f8 <_dtoa_r+0x2c0>)
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	4f81      	ldr	r7, [pc, #516]	@ (800b0fc <_dtoa_r+0x2c4>)
 800aef6:	f000 bcd3 	b.w	800b8a0 <_dtoa_r+0xa68>
 800aefa:	aa0e      	add	r2, sp, #56	@ 0x38
 800aefc:	a90f      	add	r1, sp, #60	@ 0x3c
 800aefe:	4648      	mov	r0, r9
 800af00:	eeb0 0b48 	vmov.f64	d0, d8
 800af04:	f001 f918 	bl	800c138 <__d2b>
 800af08:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800af0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af0e:	9001      	str	r0, [sp, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d045      	beq.n	800afa0 <_dtoa_r+0x168>
 800af14:	eeb0 7b48 	vmov.f64	d7, d8
 800af18:	ee18 1a90 	vmov	r1, s17
 800af1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800af20:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800af24:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800af28:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800af2c:	2500      	movs	r5, #0
 800af2e:	ee07 1a90 	vmov	s15, r1
 800af32:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800af36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b0d0 <_dtoa_r+0x298>
 800af3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af3e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b0d8 <_dtoa_r+0x2a0>
 800af42:	eea7 6b05 	vfma.f64	d6, d7, d5
 800af46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b0e0 <_dtoa_r+0x2a8>
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800af52:	eeb0 7b46 	vmov.f64	d7, d6
 800af56:	eea4 7b05 	vfma.f64	d7, d4, d5
 800af5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800af5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800af62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af66:	ee16 8a90 	vmov	r8, s13
 800af6a:	d508      	bpl.n	800af7e <_dtoa_r+0x146>
 800af6c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800af70:	eeb4 6b47 	vcmp.f64	d6, d7
 800af74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af78:	bf18      	it	ne
 800af7a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800af7e:	f1b8 0f16 	cmp.w	r8, #22
 800af82:	d82b      	bhi.n	800afdc <_dtoa_r+0x1a4>
 800af84:	495e      	ldr	r1, [pc, #376]	@ (800b100 <_dtoa_r+0x2c8>)
 800af86:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800af8a:	ed91 7b00 	vldr	d7, [r1]
 800af8e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800af92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af96:	d501      	bpl.n	800af9c <_dtoa_r+0x164>
 800af98:	f108 38ff 	add.w	r8, r8, #4294967295
 800af9c:	2100      	movs	r1, #0
 800af9e:	e01e      	b.n	800afde <_dtoa_r+0x1a6>
 800afa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afa2:	4413      	add	r3, r2
 800afa4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800afa8:	2920      	cmp	r1, #32
 800afaa:	bfc1      	itttt	gt
 800afac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800afb0:	408e      	lslgt	r6, r1
 800afb2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800afb6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800afba:	bfd6      	itet	le
 800afbc:	f1c1 0120 	rsble	r1, r1, #32
 800afc0:	4331      	orrgt	r1, r6
 800afc2:	fa04 f101 	lslle.w	r1, r4, r1
 800afc6:	ee07 1a90 	vmov	s15, r1
 800afca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800afce:	3b01      	subs	r3, #1
 800afd0:	ee17 1a90 	vmov	r1, s15
 800afd4:	2501      	movs	r5, #1
 800afd6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800afda:	e7a8      	b.n	800af2e <_dtoa_r+0xf6>
 800afdc:	2101      	movs	r1, #1
 800afde:	1ad2      	subs	r2, r2, r3
 800afe0:	1e53      	subs	r3, r2, #1
 800afe2:	9306      	str	r3, [sp, #24]
 800afe4:	bf45      	ittet	mi
 800afe6:	f1c2 0301 	rsbmi	r3, r2, #1
 800afea:	9304      	strmi	r3, [sp, #16]
 800afec:	2300      	movpl	r3, #0
 800afee:	2300      	movmi	r3, #0
 800aff0:	bf4c      	ite	mi
 800aff2:	9306      	strmi	r3, [sp, #24]
 800aff4:	9304      	strpl	r3, [sp, #16]
 800aff6:	f1b8 0f00 	cmp.w	r8, #0
 800affa:	910c      	str	r1, [sp, #48]	@ 0x30
 800affc:	db18      	blt.n	800b030 <_dtoa_r+0x1f8>
 800affe:	9b06      	ldr	r3, [sp, #24]
 800b000:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b004:	4443      	add	r3, r8
 800b006:	9306      	str	r3, [sp, #24]
 800b008:	2300      	movs	r3, #0
 800b00a:	9a07      	ldr	r2, [sp, #28]
 800b00c:	2a09      	cmp	r2, #9
 800b00e:	d845      	bhi.n	800b09c <_dtoa_r+0x264>
 800b010:	2a05      	cmp	r2, #5
 800b012:	bfc4      	itt	gt
 800b014:	3a04      	subgt	r2, #4
 800b016:	9207      	strgt	r2, [sp, #28]
 800b018:	9a07      	ldr	r2, [sp, #28]
 800b01a:	f1a2 0202 	sub.w	r2, r2, #2
 800b01e:	bfcc      	ite	gt
 800b020:	2400      	movgt	r4, #0
 800b022:	2401      	movle	r4, #1
 800b024:	2a03      	cmp	r2, #3
 800b026:	d844      	bhi.n	800b0b2 <_dtoa_r+0x27a>
 800b028:	e8df f002 	tbb	[pc, r2]
 800b02c:	0b173634 	.word	0x0b173634
 800b030:	9b04      	ldr	r3, [sp, #16]
 800b032:	2200      	movs	r2, #0
 800b034:	eba3 0308 	sub.w	r3, r3, r8
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b03c:	f1c8 0300 	rsb	r3, r8, #0
 800b040:	e7e3      	b.n	800b00a <_dtoa_r+0x1d2>
 800b042:	2201      	movs	r2, #1
 800b044:	9208      	str	r2, [sp, #32]
 800b046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b048:	eb08 0b02 	add.w	fp, r8, r2
 800b04c:	f10b 0a01 	add.w	sl, fp, #1
 800b050:	4652      	mov	r2, sl
 800b052:	2a01      	cmp	r2, #1
 800b054:	bfb8      	it	lt
 800b056:	2201      	movlt	r2, #1
 800b058:	e006      	b.n	800b068 <_dtoa_r+0x230>
 800b05a:	2201      	movs	r2, #1
 800b05c:	9208      	str	r2, [sp, #32]
 800b05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b060:	2a00      	cmp	r2, #0
 800b062:	dd29      	ble.n	800b0b8 <_dtoa_r+0x280>
 800b064:	4693      	mov	fp, r2
 800b066:	4692      	mov	sl, r2
 800b068:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b06c:	2100      	movs	r1, #0
 800b06e:	2004      	movs	r0, #4
 800b070:	f100 0614 	add.w	r6, r0, #20
 800b074:	4296      	cmp	r6, r2
 800b076:	d926      	bls.n	800b0c6 <_dtoa_r+0x28e>
 800b078:	6079      	str	r1, [r7, #4]
 800b07a:	4648      	mov	r0, r9
 800b07c:	9305      	str	r3, [sp, #20]
 800b07e:	f000 fd39 	bl	800baf4 <_Balloc>
 800b082:	9b05      	ldr	r3, [sp, #20]
 800b084:	4607      	mov	r7, r0
 800b086:	2800      	cmp	r0, #0
 800b088:	d13e      	bne.n	800b108 <_dtoa_r+0x2d0>
 800b08a:	4b1e      	ldr	r3, [pc, #120]	@ (800b104 <_dtoa_r+0x2cc>)
 800b08c:	4602      	mov	r2, r0
 800b08e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b092:	e6ea      	b.n	800ae6a <_dtoa_r+0x32>
 800b094:	2200      	movs	r2, #0
 800b096:	e7e1      	b.n	800b05c <_dtoa_r+0x224>
 800b098:	2200      	movs	r2, #0
 800b09a:	e7d3      	b.n	800b044 <_dtoa_r+0x20c>
 800b09c:	2401      	movs	r4, #1
 800b09e:	2200      	movs	r2, #0
 800b0a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b0a4:	f04f 3bff 	mov.w	fp, #4294967295
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	46da      	mov	sl, fp
 800b0ac:	2212      	movs	r2, #18
 800b0ae:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0b0:	e7da      	b.n	800b068 <_dtoa_r+0x230>
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	9208      	str	r2, [sp, #32]
 800b0b6:	e7f5      	b.n	800b0a4 <_dtoa_r+0x26c>
 800b0b8:	f04f 0b01 	mov.w	fp, #1
 800b0bc:	46da      	mov	sl, fp
 800b0be:	465a      	mov	r2, fp
 800b0c0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b0c4:	e7d0      	b.n	800b068 <_dtoa_r+0x230>
 800b0c6:	3101      	adds	r1, #1
 800b0c8:	0040      	lsls	r0, r0, #1
 800b0ca:	e7d1      	b.n	800b070 <_dtoa_r+0x238>
 800b0cc:	f3af 8000 	nop.w
 800b0d0:	636f4361 	.word	0x636f4361
 800b0d4:	3fd287a7 	.word	0x3fd287a7
 800b0d8:	8b60c8b3 	.word	0x8b60c8b3
 800b0dc:	3fc68a28 	.word	0x3fc68a28
 800b0e0:	509f79fb 	.word	0x509f79fb
 800b0e4:	3fd34413 	.word	0x3fd34413
 800b0e8:	0800cecd 	.word	0x0800cecd
 800b0ec:	0800cee4 	.word	0x0800cee4
 800b0f0:	7ff00000 	.word	0x7ff00000
 800b0f4:	0800cec9 	.word	0x0800cec9
 800b0f8:	0800ce9d 	.word	0x0800ce9d
 800b0fc:	0800ce9c 	.word	0x0800ce9c
 800b100:	0800d038 	.word	0x0800d038
 800b104:	0800cf3c 	.word	0x0800cf3c
 800b108:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b10c:	f1ba 0f0e 	cmp.w	sl, #14
 800b110:	6010      	str	r0, [r2, #0]
 800b112:	d86e      	bhi.n	800b1f2 <_dtoa_r+0x3ba>
 800b114:	2c00      	cmp	r4, #0
 800b116:	d06c      	beq.n	800b1f2 <_dtoa_r+0x3ba>
 800b118:	f1b8 0f00 	cmp.w	r8, #0
 800b11c:	f340 80b4 	ble.w	800b288 <_dtoa_r+0x450>
 800b120:	4ac8      	ldr	r2, [pc, #800]	@ (800b444 <_dtoa_r+0x60c>)
 800b122:	f008 010f 	and.w	r1, r8, #15
 800b126:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b12a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b12e:	ed92 7b00 	vldr	d7, [r2]
 800b132:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b136:	f000 809b 	beq.w	800b270 <_dtoa_r+0x438>
 800b13a:	4ac3      	ldr	r2, [pc, #780]	@ (800b448 <_dtoa_r+0x610>)
 800b13c:	ed92 6b08 	vldr	d6, [r2, #32]
 800b140:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b144:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b148:	f001 010f 	and.w	r1, r1, #15
 800b14c:	2203      	movs	r2, #3
 800b14e:	48be      	ldr	r0, [pc, #760]	@ (800b448 <_dtoa_r+0x610>)
 800b150:	2900      	cmp	r1, #0
 800b152:	f040 808f 	bne.w	800b274 <_dtoa_r+0x43c>
 800b156:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b15a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b15e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b162:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b164:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b168:	2900      	cmp	r1, #0
 800b16a:	f000 80b3 	beq.w	800b2d4 <_dtoa_r+0x49c>
 800b16e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b172:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17a:	f140 80ab 	bpl.w	800b2d4 <_dtoa_r+0x49c>
 800b17e:	f1ba 0f00 	cmp.w	sl, #0
 800b182:	f000 80a7 	beq.w	800b2d4 <_dtoa_r+0x49c>
 800b186:	f1bb 0f00 	cmp.w	fp, #0
 800b18a:	dd30      	ble.n	800b1ee <_dtoa_r+0x3b6>
 800b18c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b190:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b194:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b198:	f108 31ff 	add.w	r1, r8, #4294967295
 800b19c:	9105      	str	r1, [sp, #20]
 800b19e:	3201      	adds	r2, #1
 800b1a0:	465c      	mov	r4, fp
 800b1a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b1a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b1aa:	ee07 2a90 	vmov	s15, r2
 800b1ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b1b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b1b6:	ee15 2a90 	vmov	r2, s11
 800b1ba:	ec51 0b15 	vmov	r0, r1, d5
 800b1be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	f040 808a 	bne.w	800b2dc <_dtoa_r+0x4a4>
 800b1c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b1cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b1d0:	ec41 0b17 	vmov	d7, r0, r1
 800b1d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1dc:	f300 826a 	bgt.w	800b6b4 <_dtoa_r+0x87c>
 800b1e0:	eeb1 7b47 	vneg.f64	d7, d7
 800b1e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ec:	d423      	bmi.n	800b236 <_dtoa_r+0x3fe>
 800b1ee:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b1f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	f2c0 8129 	blt.w	800b44c <_dtoa_r+0x614>
 800b1fa:	f1b8 0f0e 	cmp.w	r8, #14
 800b1fe:	f300 8125 	bgt.w	800b44c <_dtoa_r+0x614>
 800b202:	4b90      	ldr	r3, [pc, #576]	@ (800b444 <_dtoa_r+0x60c>)
 800b204:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b208:	ed93 6b00 	vldr	d6, [r3]
 800b20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f280 80c8 	bge.w	800b3a4 <_dtoa_r+0x56c>
 800b214:	f1ba 0f00 	cmp.w	sl, #0
 800b218:	f300 80c4 	bgt.w	800b3a4 <_dtoa_r+0x56c>
 800b21c:	d10b      	bne.n	800b236 <_dtoa_r+0x3fe>
 800b21e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b222:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b226:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b22a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b232:	f2c0 823c 	blt.w	800b6ae <_dtoa_r+0x876>
 800b236:	2400      	movs	r4, #0
 800b238:	4625      	mov	r5, r4
 800b23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23c:	43db      	mvns	r3, r3
 800b23e:	9305      	str	r3, [sp, #20]
 800b240:	463e      	mov	r6, r7
 800b242:	f04f 0800 	mov.w	r8, #0
 800b246:	4621      	mov	r1, r4
 800b248:	4648      	mov	r0, r9
 800b24a:	f000 fc93 	bl	800bb74 <_Bfree>
 800b24e:	2d00      	cmp	r5, #0
 800b250:	f000 80a2 	beq.w	800b398 <_dtoa_r+0x560>
 800b254:	f1b8 0f00 	cmp.w	r8, #0
 800b258:	d005      	beq.n	800b266 <_dtoa_r+0x42e>
 800b25a:	45a8      	cmp	r8, r5
 800b25c:	d003      	beq.n	800b266 <_dtoa_r+0x42e>
 800b25e:	4641      	mov	r1, r8
 800b260:	4648      	mov	r0, r9
 800b262:	f000 fc87 	bl	800bb74 <_Bfree>
 800b266:	4629      	mov	r1, r5
 800b268:	4648      	mov	r0, r9
 800b26a:	f000 fc83 	bl	800bb74 <_Bfree>
 800b26e:	e093      	b.n	800b398 <_dtoa_r+0x560>
 800b270:	2202      	movs	r2, #2
 800b272:	e76c      	b.n	800b14e <_dtoa_r+0x316>
 800b274:	07cc      	lsls	r4, r1, #31
 800b276:	d504      	bpl.n	800b282 <_dtoa_r+0x44a>
 800b278:	ed90 6b00 	vldr	d6, [r0]
 800b27c:	3201      	adds	r2, #1
 800b27e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b282:	1049      	asrs	r1, r1, #1
 800b284:	3008      	adds	r0, #8
 800b286:	e763      	b.n	800b150 <_dtoa_r+0x318>
 800b288:	d022      	beq.n	800b2d0 <_dtoa_r+0x498>
 800b28a:	f1c8 0100 	rsb	r1, r8, #0
 800b28e:	4a6d      	ldr	r2, [pc, #436]	@ (800b444 <_dtoa_r+0x60c>)
 800b290:	f001 000f 	and.w	r0, r1, #15
 800b294:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b298:	ed92 7b00 	vldr	d7, [r2]
 800b29c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b2a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2a4:	4868      	ldr	r0, [pc, #416]	@ (800b448 <_dtoa_r+0x610>)
 800b2a6:	1109      	asrs	r1, r1, #4
 800b2a8:	2400      	movs	r4, #0
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	b929      	cbnz	r1, 800b2ba <_dtoa_r+0x482>
 800b2ae:	2c00      	cmp	r4, #0
 800b2b0:	f43f af57 	beq.w	800b162 <_dtoa_r+0x32a>
 800b2b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2b8:	e753      	b.n	800b162 <_dtoa_r+0x32a>
 800b2ba:	07ce      	lsls	r6, r1, #31
 800b2bc:	d505      	bpl.n	800b2ca <_dtoa_r+0x492>
 800b2be:	ed90 6b00 	vldr	d6, [r0]
 800b2c2:	3201      	adds	r2, #1
 800b2c4:	2401      	movs	r4, #1
 800b2c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2ca:	1049      	asrs	r1, r1, #1
 800b2cc:	3008      	adds	r0, #8
 800b2ce:	e7ed      	b.n	800b2ac <_dtoa_r+0x474>
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	e746      	b.n	800b162 <_dtoa_r+0x32a>
 800b2d4:	f8cd 8014 	str.w	r8, [sp, #20]
 800b2d8:	4654      	mov	r4, sl
 800b2da:	e762      	b.n	800b1a2 <_dtoa_r+0x36a>
 800b2dc:	4a59      	ldr	r2, [pc, #356]	@ (800b444 <_dtoa_r+0x60c>)
 800b2de:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b2e2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b2e6:	9a08      	ldr	r2, [sp, #32]
 800b2e8:	ec41 0b17 	vmov	d7, r0, r1
 800b2ec:	443c      	add	r4, r7
 800b2ee:	b34a      	cbz	r2, 800b344 <_dtoa_r+0x50c>
 800b2f0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b2f4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b2f8:	463e      	mov	r6, r7
 800b2fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b2fe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b302:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b306:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b30a:	ee14 2a90 	vmov	r2, s9
 800b30e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b312:	3230      	adds	r2, #48	@ 0x30
 800b314:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b318:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b320:	f806 2b01 	strb.w	r2, [r6], #1
 800b324:	d438      	bmi.n	800b398 <_dtoa_r+0x560>
 800b326:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b32a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b332:	d46e      	bmi.n	800b412 <_dtoa_r+0x5da>
 800b334:	42a6      	cmp	r6, r4
 800b336:	f43f af5a 	beq.w	800b1ee <_dtoa_r+0x3b6>
 800b33a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b33e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b342:	e7e0      	b.n	800b306 <_dtoa_r+0x4ce>
 800b344:	4621      	mov	r1, r4
 800b346:	463e      	mov	r6, r7
 800b348:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b34c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b350:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b354:	ee14 2a90 	vmov	r2, s9
 800b358:	3230      	adds	r2, #48	@ 0x30
 800b35a:	f806 2b01 	strb.w	r2, [r6], #1
 800b35e:	42a6      	cmp	r6, r4
 800b360:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b364:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b368:	d119      	bne.n	800b39e <_dtoa_r+0x566>
 800b36a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b36e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b372:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37a:	dc4a      	bgt.n	800b412 <_dtoa_r+0x5da>
 800b37c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b380:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b388:	f57f af31 	bpl.w	800b1ee <_dtoa_r+0x3b6>
 800b38c:	460e      	mov	r6, r1
 800b38e:	3901      	subs	r1, #1
 800b390:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b394:	2b30      	cmp	r3, #48	@ 0x30
 800b396:	d0f9      	beq.n	800b38c <_dtoa_r+0x554>
 800b398:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b39c:	e027      	b.n	800b3ee <_dtoa_r+0x5b6>
 800b39e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b3a2:	e7d5      	b.n	800b350 <_dtoa_r+0x518>
 800b3a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3a8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b3ac:	463e      	mov	r6, r7
 800b3ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b3b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b3b6:	ee15 3a10 	vmov	r3, s10
 800b3ba:	3330      	adds	r3, #48	@ 0x30
 800b3bc:	f806 3b01 	strb.w	r3, [r6], #1
 800b3c0:	1bf3      	subs	r3, r6, r7
 800b3c2:	459a      	cmp	sl, r3
 800b3c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b3c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b3cc:	d132      	bne.n	800b434 <_dtoa_r+0x5fc>
 800b3ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b3d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3da:	dc18      	bgt.n	800b40e <_dtoa_r+0x5d6>
 800b3dc:	eeb4 7b46 	vcmp.f64	d7, d6
 800b3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e4:	d103      	bne.n	800b3ee <_dtoa_r+0x5b6>
 800b3e6:	ee15 3a10 	vmov	r3, s10
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d40f      	bmi.n	800b40e <_dtoa_r+0x5d6>
 800b3ee:	9901      	ldr	r1, [sp, #4]
 800b3f0:	4648      	mov	r0, r9
 800b3f2:	f000 fbbf 	bl	800bb74 <_Bfree>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3fa:	7033      	strb	r3, [r6, #0]
 800b3fc:	f108 0301 	add.w	r3, r8, #1
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 824b 	beq.w	800b8a0 <_dtoa_r+0xa68>
 800b40a:	601e      	str	r6, [r3, #0]
 800b40c:	e248      	b.n	800b8a0 <_dtoa_r+0xa68>
 800b40e:	f8cd 8014 	str.w	r8, [sp, #20]
 800b412:	4633      	mov	r3, r6
 800b414:	461e      	mov	r6, r3
 800b416:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b41a:	2a39      	cmp	r2, #57	@ 0x39
 800b41c:	d106      	bne.n	800b42c <_dtoa_r+0x5f4>
 800b41e:	429f      	cmp	r7, r3
 800b420:	d1f8      	bne.n	800b414 <_dtoa_r+0x5dc>
 800b422:	9a05      	ldr	r2, [sp, #20]
 800b424:	3201      	adds	r2, #1
 800b426:	9205      	str	r2, [sp, #20]
 800b428:	2230      	movs	r2, #48	@ 0x30
 800b42a:	703a      	strb	r2, [r7, #0]
 800b42c:	781a      	ldrb	r2, [r3, #0]
 800b42e:	3201      	adds	r2, #1
 800b430:	701a      	strb	r2, [r3, #0]
 800b432:	e7b1      	b.n	800b398 <_dtoa_r+0x560>
 800b434:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b438:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b440:	d1b5      	bne.n	800b3ae <_dtoa_r+0x576>
 800b442:	e7d4      	b.n	800b3ee <_dtoa_r+0x5b6>
 800b444:	0800d038 	.word	0x0800d038
 800b448:	0800d010 	.word	0x0800d010
 800b44c:	9908      	ldr	r1, [sp, #32]
 800b44e:	2900      	cmp	r1, #0
 800b450:	f000 80e9 	beq.w	800b626 <_dtoa_r+0x7ee>
 800b454:	9907      	ldr	r1, [sp, #28]
 800b456:	2901      	cmp	r1, #1
 800b458:	f300 80cb 	bgt.w	800b5f2 <_dtoa_r+0x7ba>
 800b45c:	2d00      	cmp	r5, #0
 800b45e:	f000 80c4 	beq.w	800b5ea <_dtoa_r+0x7b2>
 800b462:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b466:	9e04      	ldr	r6, [sp, #16]
 800b468:	461c      	mov	r4, r3
 800b46a:	9305      	str	r3, [sp, #20]
 800b46c:	9b04      	ldr	r3, [sp, #16]
 800b46e:	4413      	add	r3, r2
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	9b06      	ldr	r3, [sp, #24]
 800b474:	2101      	movs	r1, #1
 800b476:	4413      	add	r3, r2
 800b478:	4648      	mov	r0, r9
 800b47a:	9306      	str	r3, [sp, #24]
 800b47c:	f000 fc2e 	bl	800bcdc <__i2b>
 800b480:	9b05      	ldr	r3, [sp, #20]
 800b482:	4605      	mov	r5, r0
 800b484:	b166      	cbz	r6, 800b4a0 <_dtoa_r+0x668>
 800b486:	9a06      	ldr	r2, [sp, #24]
 800b488:	2a00      	cmp	r2, #0
 800b48a:	dd09      	ble.n	800b4a0 <_dtoa_r+0x668>
 800b48c:	42b2      	cmp	r2, r6
 800b48e:	9904      	ldr	r1, [sp, #16]
 800b490:	bfa8      	it	ge
 800b492:	4632      	movge	r2, r6
 800b494:	1a89      	subs	r1, r1, r2
 800b496:	9104      	str	r1, [sp, #16]
 800b498:	9906      	ldr	r1, [sp, #24]
 800b49a:	1ab6      	subs	r6, r6, r2
 800b49c:	1a8a      	subs	r2, r1, r2
 800b49e:	9206      	str	r2, [sp, #24]
 800b4a0:	b30b      	cbz	r3, 800b4e6 <_dtoa_r+0x6ae>
 800b4a2:	9a08      	ldr	r2, [sp, #32]
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	f000 80c5 	beq.w	800b634 <_dtoa_r+0x7fc>
 800b4aa:	2c00      	cmp	r4, #0
 800b4ac:	f000 80bf 	beq.w	800b62e <_dtoa_r+0x7f6>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	4648      	mov	r0, r9
 800b4b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4b8:	f000 fcc8 	bl	800be4c <__pow5mult>
 800b4bc:	9a01      	ldr	r2, [sp, #4]
 800b4be:	4601      	mov	r1, r0
 800b4c0:	4605      	mov	r5, r0
 800b4c2:	4648      	mov	r0, r9
 800b4c4:	f000 fc20 	bl	800bd08 <__multiply>
 800b4c8:	9901      	ldr	r1, [sp, #4]
 800b4ca:	9005      	str	r0, [sp, #20]
 800b4cc:	4648      	mov	r0, r9
 800b4ce:	f000 fb51 	bl	800bb74 <_Bfree>
 800b4d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4d4:	1b1b      	subs	r3, r3, r4
 800b4d6:	f000 80b0 	beq.w	800b63a <_dtoa_r+0x802>
 800b4da:	9905      	ldr	r1, [sp, #20]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4648      	mov	r0, r9
 800b4e0:	f000 fcb4 	bl	800be4c <__pow5mult>
 800b4e4:	9001      	str	r0, [sp, #4]
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	4648      	mov	r0, r9
 800b4ea:	f000 fbf7 	bl	800bcdc <__i2b>
 800b4ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 81da 	beq.w	800b8ac <_dtoa_r+0xa74>
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	4648      	mov	r0, r9
 800b4fe:	f000 fca5 	bl	800be4c <__pow5mult>
 800b502:	9b07      	ldr	r3, [sp, #28]
 800b504:	2b01      	cmp	r3, #1
 800b506:	4604      	mov	r4, r0
 800b508:	f300 80a0 	bgt.w	800b64c <_dtoa_r+0x814>
 800b50c:	9b02      	ldr	r3, [sp, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f040 8096 	bne.w	800b640 <_dtoa_r+0x808>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b51a:	2a00      	cmp	r2, #0
 800b51c:	f040 8092 	bne.w	800b644 <_dtoa_r+0x80c>
 800b520:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b524:	0d12      	lsrs	r2, r2, #20
 800b526:	0512      	lsls	r2, r2, #20
 800b528:	2a00      	cmp	r2, #0
 800b52a:	f000 808d 	beq.w	800b648 <_dtoa_r+0x810>
 800b52e:	9b04      	ldr	r3, [sp, #16]
 800b530:	3301      	adds	r3, #1
 800b532:	9304      	str	r3, [sp, #16]
 800b534:	9b06      	ldr	r3, [sp, #24]
 800b536:	3301      	adds	r3, #1
 800b538:	9306      	str	r3, [sp, #24]
 800b53a:	2301      	movs	r3, #1
 800b53c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b53e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b540:	2b00      	cmp	r3, #0
 800b542:	f000 81b9 	beq.w	800b8b8 <_dtoa_r+0xa80>
 800b546:	6922      	ldr	r2, [r4, #16]
 800b548:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b54c:	6910      	ldr	r0, [r2, #16]
 800b54e:	f000 fb79 	bl	800bc44 <__hi0bits>
 800b552:	f1c0 0020 	rsb	r0, r0, #32
 800b556:	9b06      	ldr	r3, [sp, #24]
 800b558:	4418      	add	r0, r3
 800b55a:	f010 001f 	ands.w	r0, r0, #31
 800b55e:	f000 8081 	beq.w	800b664 <_dtoa_r+0x82c>
 800b562:	f1c0 0220 	rsb	r2, r0, #32
 800b566:	2a04      	cmp	r2, #4
 800b568:	dd73      	ble.n	800b652 <_dtoa_r+0x81a>
 800b56a:	9b04      	ldr	r3, [sp, #16]
 800b56c:	f1c0 001c 	rsb	r0, r0, #28
 800b570:	4403      	add	r3, r0
 800b572:	9304      	str	r3, [sp, #16]
 800b574:	9b06      	ldr	r3, [sp, #24]
 800b576:	4406      	add	r6, r0
 800b578:	4403      	add	r3, r0
 800b57a:	9306      	str	r3, [sp, #24]
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dd05      	ble.n	800b58e <_dtoa_r+0x756>
 800b582:	9901      	ldr	r1, [sp, #4]
 800b584:	461a      	mov	r2, r3
 800b586:	4648      	mov	r0, r9
 800b588:	f000 fcba 	bl	800bf00 <__lshift>
 800b58c:	9001      	str	r0, [sp, #4]
 800b58e:	9b06      	ldr	r3, [sp, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	dd05      	ble.n	800b5a0 <_dtoa_r+0x768>
 800b594:	4621      	mov	r1, r4
 800b596:	461a      	mov	r2, r3
 800b598:	4648      	mov	r0, r9
 800b59a:	f000 fcb1 	bl	800bf00 <__lshift>
 800b59e:	4604      	mov	r4, r0
 800b5a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d060      	beq.n	800b668 <_dtoa_r+0x830>
 800b5a6:	9801      	ldr	r0, [sp, #4]
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	f000 fd15 	bl	800bfd8 <__mcmp>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	da5a      	bge.n	800b668 <_dtoa_r+0x830>
 800b5b2:	f108 33ff 	add.w	r3, r8, #4294967295
 800b5b6:	9305      	str	r3, [sp, #20]
 800b5b8:	9901      	ldr	r1, [sp, #4]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	220a      	movs	r2, #10
 800b5be:	4648      	mov	r0, r9
 800b5c0:	f000 fafa 	bl	800bbb8 <__multadd>
 800b5c4:	9b08      	ldr	r3, [sp, #32]
 800b5c6:	9001      	str	r0, [sp, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 8177 	beq.w	800b8bc <_dtoa_r+0xa84>
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	220a      	movs	r2, #10
 800b5d4:	4648      	mov	r0, r9
 800b5d6:	f000 faef 	bl	800bbb8 <__multadd>
 800b5da:	f1bb 0f00 	cmp.w	fp, #0
 800b5de:	4605      	mov	r5, r0
 800b5e0:	dc6e      	bgt.n	800b6c0 <_dtoa_r+0x888>
 800b5e2:	9b07      	ldr	r3, [sp, #28]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	dc48      	bgt.n	800b67a <_dtoa_r+0x842>
 800b5e8:	e06a      	b.n	800b6c0 <_dtoa_r+0x888>
 800b5ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b5f0:	e739      	b.n	800b466 <_dtoa_r+0x62e>
 800b5f2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	db07      	blt.n	800b60a <_dtoa_r+0x7d2>
 800b5fa:	f1ba 0f00 	cmp.w	sl, #0
 800b5fe:	eba3 0404 	sub.w	r4, r3, r4
 800b602:	db0b      	blt.n	800b61c <_dtoa_r+0x7e4>
 800b604:	9e04      	ldr	r6, [sp, #16]
 800b606:	4652      	mov	r2, sl
 800b608:	e72f      	b.n	800b46a <_dtoa_r+0x632>
 800b60a:	1ae2      	subs	r2, r4, r3
 800b60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b60e:	9e04      	ldr	r6, [sp, #16]
 800b610:	4413      	add	r3, r2
 800b612:	930a      	str	r3, [sp, #40]	@ 0x28
 800b614:	4652      	mov	r2, sl
 800b616:	4623      	mov	r3, r4
 800b618:	2400      	movs	r4, #0
 800b61a:	e726      	b.n	800b46a <_dtoa_r+0x632>
 800b61c:	9a04      	ldr	r2, [sp, #16]
 800b61e:	eba2 060a 	sub.w	r6, r2, sl
 800b622:	2200      	movs	r2, #0
 800b624:	e721      	b.n	800b46a <_dtoa_r+0x632>
 800b626:	9e04      	ldr	r6, [sp, #16]
 800b628:	9d08      	ldr	r5, [sp, #32]
 800b62a:	461c      	mov	r4, r3
 800b62c:	e72a      	b.n	800b484 <_dtoa_r+0x64c>
 800b62e:	9a01      	ldr	r2, [sp, #4]
 800b630:	9205      	str	r2, [sp, #20]
 800b632:	e752      	b.n	800b4da <_dtoa_r+0x6a2>
 800b634:	9901      	ldr	r1, [sp, #4]
 800b636:	461a      	mov	r2, r3
 800b638:	e751      	b.n	800b4de <_dtoa_r+0x6a6>
 800b63a:	9b05      	ldr	r3, [sp, #20]
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	e752      	b.n	800b4e6 <_dtoa_r+0x6ae>
 800b640:	2300      	movs	r3, #0
 800b642:	e77b      	b.n	800b53c <_dtoa_r+0x704>
 800b644:	9b02      	ldr	r3, [sp, #8]
 800b646:	e779      	b.n	800b53c <_dtoa_r+0x704>
 800b648:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b64a:	e778      	b.n	800b53e <_dtoa_r+0x706>
 800b64c:	2300      	movs	r3, #0
 800b64e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b650:	e779      	b.n	800b546 <_dtoa_r+0x70e>
 800b652:	d093      	beq.n	800b57c <_dtoa_r+0x744>
 800b654:	9b04      	ldr	r3, [sp, #16]
 800b656:	321c      	adds	r2, #28
 800b658:	4413      	add	r3, r2
 800b65a:	9304      	str	r3, [sp, #16]
 800b65c:	9b06      	ldr	r3, [sp, #24]
 800b65e:	4416      	add	r6, r2
 800b660:	4413      	add	r3, r2
 800b662:	e78a      	b.n	800b57a <_dtoa_r+0x742>
 800b664:	4602      	mov	r2, r0
 800b666:	e7f5      	b.n	800b654 <_dtoa_r+0x81c>
 800b668:	f1ba 0f00 	cmp.w	sl, #0
 800b66c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b670:	46d3      	mov	fp, sl
 800b672:	dc21      	bgt.n	800b6b8 <_dtoa_r+0x880>
 800b674:	9b07      	ldr	r3, [sp, #28]
 800b676:	2b02      	cmp	r3, #2
 800b678:	dd1e      	ble.n	800b6b8 <_dtoa_r+0x880>
 800b67a:	f1bb 0f00 	cmp.w	fp, #0
 800b67e:	f47f addc 	bne.w	800b23a <_dtoa_r+0x402>
 800b682:	4621      	mov	r1, r4
 800b684:	465b      	mov	r3, fp
 800b686:	2205      	movs	r2, #5
 800b688:	4648      	mov	r0, r9
 800b68a:	f000 fa95 	bl	800bbb8 <__multadd>
 800b68e:	4601      	mov	r1, r0
 800b690:	4604      	mov	r4, r0
 800b692:	9801      	ldr	r0, [sp, #4]
 800b694:	f000 fca0 	bl	800bfd8 <__mcmp>
 800b698:	2800      	cmp	r0, #0
 800b69a:	f77f adce 	ble.w	800b23a <_dtoa_r+0x402>
 800b69e:	463e      	mov	r6, r7
 800b6a0:	2331      	movs	r3, #49	@ 0x31
 800b6a2:	f806 3b01 	strb.w	r3, [r6], #1
 800b6a6:	9b05      	ldr	r3, [sp, #20]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	9305      	str	r3, [sp, #20]
 800b6ac:	e5c9      	b.n	800b242 <_dtoa_r+0x40a>
 800b6ae:	f8cd 8014 	str.w	r8, [sp, #20]
 800b6b2:	4654      	mov	r4, sl
 800b6b4:	4625      	mov	r5, r4
 800b6b6:	e7f2      	b.n	800b69e <_dtoa_r+0x866>
 800b6b8:	9b08      	ldr	r3, [sp, #32]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 8102 	beq.w	800b8c4 <_dtoa_r+0xa8c>
 800b6c0:	2e00      	cmp	r6, #0
 800b6c2:	dd05      	ble.n	800b6d0 <_dtoa_r+0x898>
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	4632      	mov	r2, r6
 800b6c8:	4648      	mov	r0, r9
 800b6ca:	f000 fc19 	bl	800bf00 <__lshift>
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d058      	beq.n	800b788 <_dtoa_r+0x950>
 800b6d6:	6869      	ldr	r1, [r5, #4]
 800b6d8:	4648      	mov	r0, r9
 800b6da:	f000 fa0b 	bl	800baf4 <_Balloc>
 800b6de:	4606      	mov	r6, r0
 800b6e0:	b928      	cbnz	r0, 800b6ee <_dtoa_r+0x8b6>
 800b6e2:	4b82      	ldr	r3, [pc, #520]	@ (800b8ec <_dtoa_r+0xab4>)
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b6ea:	f7ff bbbe 	b.w	800ae6a <_dtoa_r+0x32>
 800b6ee:	692a      	ldr	r2, [r5, #16]
 800b6f0:	3202      	adds	r2, #2
 800b6f2:	0092      	lsls	r2, r2, #2
 800b6f4:	f105 010c 	add.w	r1, r5, #12
 800b6f8:	300c      	adds	r0, #12
 800b6fa:	f7ff fb04 	bl	800ad06 <memcpy>
 800b6fe:	2201      	movs	r2, #1
 800b700:	4631      	mov	r1, r6
 800b702:	4648      	mov	r0, r9
 800b704:	f000 fbfc 	bl	800bf00 <__lshift>
 800b708:	1c7b      	adds	r3, r7, #1
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	eb07 030b 	add.w	r3, r7, fp
 800b710:	9309      	str	r3, [sp, #36]	@ 0x24
 800b712:	9b02      	ldr	r3, [sp, #8]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	46a8      	mov	r8, r5
 800b71a:	9308      	str	r3, [sp, #32]
 800b71c:	4605      	mov	r5, r0
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	9801      	ldr	r0, [sp, #4]
 800b722:	4621      	mov	r1, r4
 800b724:	f103 3bff 	add.w	fp, r3, #4294967295
 800b728:	f7ff fafb 	bl	800ad22 <quorem>
 800b72c:	4641      	mov	r1, r8
 800b72e:	9002      	str	r0, [sp, #8]
 800b730:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b734:	9801      	ldr	r0, [sp, #4]
 800b736:	f000 fc4f 	bl	800bfd8 <__mcmp>
 800b73a:	462a      	mov	r2, r5
 800b73c:	9006      	str	r0, [sp, #24]
 800b73e:	4621      	mov	r1, r4
 800b740:	4648      	mov	r0, r9
 800b742:	f000 fc65 	bl	800c010 <__mdiff>
 800b746:	68c2      	ldr	r2, [r0, #12]
 800b748:	4606      	mov	r6, r0
 800b74a:	b9fa      	cbnz	r2, 800b78c <_dtoa_r+0x954>
 800b74c:	4601      	mov	r1, r0
 800b74e:	9801      	ldr	r0, [sp, #4]
 800b750:	f000 fc42 	bl	800bfd8 <__mcmp>
 800b754:	4602      	mov	r2, r0
 800b756:	4631      	mov	r1, r6
 800b758:	4648      	mov	r0, r9
 800b75a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b75c:	f000 fa0a 	bl	800bb74 <_Bfree>
 800b760:	9b07      	ldr	r3, [sp, #28]
 800b762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b764:	9e04      	ldr	r6, [sp, #16]
 800b766:	ea42 0103 	orr.w	r1, r2, r3
 800b76a:	9b08      	ldr	r3, [sp, #32]
 800b76c:	4319      	orrs	r1, r3
 800b76e:	d10f      	bne.n	800b790 <_dtoa_r+0x958>
 800b770:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b774:	d028      	beq.n	800b7c8 <_dtoa_r+0x990>
 800b776:	9b06      	ldr	r3, [sp, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	dd02      	ble.n	800b782 <_dtoa_r+0x94a>
 800b77c:	9b02      	ldr	r3, [sp, #8]
 800b77e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b782:	f88b a000 	strb.w	sl, [fp]
 800b786:	e55e      	b.n	800b246 <_dtoa_r+0x40e>
 800b788:	4628      	mov	r0, r5
 800b78a:	e7bd      	b.n	800b708 <_dtoa_r+0x8d0>
 800b78c:	2201      	movs	r2, #1
 800b78e:	e7e2      	b.n	800b756 <_dtoa_r+0x91e>
 800b790:	9b06      	ldr	r3, [sp, #24]
 800b792:	2b00      	cmp	r3, #0
 800b794:	db04      	blt.n	800b7a0 <_dtoa_r+0x968>
 800b796:	9907      	ldr	r1, [sp, #28]
 800b798:	430b      	orrs	r3, r1
 800b79a:	9908      	ldr	r1, [sp, #32]
 800b79c:	430b      	orrs	r3, r1
 800b79e:	d120      	bne.n	800b7e2 <_dtoa_r+0x9aa>
 800b7a0:	2a00      	cmp	r2, #0
 800b7a2:	ddee      	ble.n	800b782 <_dtoa_r+0x94a>
 800b7a4:	9901      	ldr	r1, [sp, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	4648      	mov	r0, r9
 800b7aa:	f000 fba9 	bl	800bf00 <__lshift>
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	9001      	str	r0, [sp, #4]
 800b7b2:	f000 fc11 	bl	800bfd8 <__mcmp>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	dc03      	bgt.n	800b7c2 <_dtoa_r+0x98a>
 800b7ba:	d1e2      	bne.n	800b782 <_dtoa_r+0x94a>
 800b7bc:	f01a 0f01 	tst.w	sl, #1
 800b7c0:	d0df      	beq.n	800b782 <_dtoa_r+0x94a>
 800b7c2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b7c6:	d1d9      	bne.n	800b77c <_dtoa_r+0x944>
 800b7c8:	2339      	movs	r3, #57	@ 0x39
 800b7ca:	f88b 3000 	strb.w	r3, [fp]
 800b7ce:	4633      	mov	r3, r6
 800b7d0:	461e      	mov	r6, r3
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b7d8:	2a39      	cmp	r2, #57	@ 0x39
 800b7da:	d052      	beq.n	800b882 <_dtoa_r+0xa4a>
 800b7dc:	3201      	adds	r2, #1
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	e531      	b.n	800b246 <_dtoa_r+0x40e>
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	dd07      	ble.n	800b7f6 <_dtoa_r+0x9be>
 800b7e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b7ea:	d0ed      	beq.n	800b7c8 <_dtoa_r+0x990>
 800b7ec:	f10a 0301 	add.w	r3, sl, #1
 800b7f0:	f88b 3000 	strb.w	r3, [fp]
 800b7f4:	e527      	b.n	800b246 <_dtoa_r+0x40e>
 800b7f6:	9b04      	ldr	r3, [sp, #16]
 800b7f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7fa:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d029      	beq.n	800b856 <_dtoa_r+0xa1e>
 800b802:	9901      	ldr	r1, [sp, #4]
 800b804:	2300      	movs	r3, #0
 800b806:	220a      	movs	r2, #10
 800b808:	4648      	mov	r0, r9
 800b80a:	f000 f9d5 	bl	800bbb8 <__multadd>
 800b80e:	45a8      	cmp	r8, r5
 800b810:	9001      	str	r0, [sp, #4]
 800b812:	f04f 0300 	mov.w	r3, #0
 800b816:	f04f 020a 	mov.w	r2, #10
 800b81a:	4641      	mov	r1, r8
 800b81c:	4648      	mov	r0, r9
 800b81e:	d107      	bne.n	800b830 <_dtoa_r+0x9f8>
 800b820:	f000 f9ca 	bl	800bbb8 <__multadd>
 800b824:	4680      	mov	r8, r0
 800b826:	4605      	mov	r5, r0
 800b828:	9b04      	ldr	r3, [sp, #16]
 800b82a:	3301      	adds	r3, #1
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	e776      	b.n	800b71e <_dtoa_r+0x8e6>
 800b830:	f000 f9c2 	bl	800bbb8 <__multadd>
 800b834:	4629      	mov	r1, r5
 800b836:	4680      	mov	r8, r0
 800b838:	2300      	movs	r3, #0
 800b83a:	220a      	movs	r2, #10
 800b83c:	4648      	mov	r0, r9
 800b83e:	f000 f9bb 	bl	800bbb8 <__multadd>
 800b842:	4605      	mov	r5, r0
 800b844:	e7f0      	b.n	800b828 <_dtoa_r+0x9f0>
 800b846:	f1bb 0f00 	cmp.w	fp, #0
 800b84a:	bfcc      	ite	gt
 800b84c:	465e      	movgt	r6, fp
 800b84e:	2601      	movle	r6, #1
 800b850:	443e      	add	r6, r7
 800b852:	f04f 0800 	mov.w	r8, #0
 800b856:	9901      	ldr	r1, [sp, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	4648      	mov	r0, r9
 800b85c:	f000 fb50 	bl	800bf00 <__lshift>
 800b860:	4621      	mov	r1, r4
 800b862:	9001      	str	r0, [sp, #4]
 800b864:	f000 fbb8 	bl	800bfd8 <__mcmp>
 800b868:	2800      	cmp	r0, #0
 800b86a:	dcb0      	bgt.n	800b7ce <_dtoa_r+0x996>
 800b86c:	d102      	bne.n	800b874 <_dtoa_r+0xa3c>
 800b86e:	f01a 0f01 	tst.w	sl, #1
 800b872:	d1ac      	bne.n	800b7ce <_dtoa_r+0x996>
 800b874:	4633      	mov	r3, r6
 800b876:	461e      	mov	r6, r3
 800b878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b87c:	2a30      	cmp	r2, #48	@ 0x30
 800b87e:	d0fa      	beq.n	800b876 <_dtoa_r+0xa3e>
 800b880:	e4e1      	b.n	800b246 <_dtoa_r+0x40e>
 800b882:	429f      	cmp	r7, r3
 800b884:	d1a4      	bne.n	800b7d0 <_dtoa_r+0x998>
 800b886:	9b05      	ldr	r3, [sp, #20]
 800b888:	3301      	adds	r3, #1
 800b88a:	9305      	str	r3, [sp, #20]
 800b88c:	2331      	movs	r3, #49	@ 0x31
 800b88e:	703b      	strb	r3, [r7, #0]
 800b890:	e4d9      	b.n	800b246 <_dtoa_r+0x40e>
 800b892:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b894:	4f16      	ldr	r7, [pc, #88]	@ (800b8f0 <_dtoa_r+0xab8>)
 800b896:	b11b      	cbz	r3, 800b8a0 <_dtoa_r+0xa68>
 800b898:	f107 0308 	add.w	r3, r7, #8
 800b89c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	b011      	add	sp, #68	@ 0x44
 800b8a4:	ecbd 8b02 	vpop	{d8}
 800b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ac:	9b07      	ldr	r3, [sp, #28]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	f77f ae2c 	ble.w	800b50c <_dtoa_r+0x6d4>
 800b8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	e64c      	b.n	800b556 <_dtoa_r+0x71e>
 800b8bc:	f1bb 0f00 	cmp.w	fp, #0
 800b8c0:	f77f aed8 	ble.w	800b674 <_dtoa_r+0x83c>
 800b8c4:	463e      	mov	r6, r7
 800b8c6:	9801      	ldr	r0, [sp, #4]
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	f7ff fa2a 	bl	800ad22 <quorem>
 800b8ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b8d2:	f806 ab01 	strb.w	sl, [r6], #1
 800b8d6:	1bf2      	subs	r2, r6, r7
 800b8d8:	4593      	cmp	fp, r2
 800b8da:	ddb4      	ble.n	800b846 <_dtoa_r+0xa0e>
 800b8dc:	9901      	ldr	r1, [sp, #4]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	220a      	movs	r2, #10
 800b8e2:	4648      	mov	r0, r9
 800b8e4:	f000 f968 	bl	800bbb8 <__multadd>
 800b8e8:	9001      	str	r0, [sp, #4]
 800b8ea:	e7ec      	b.n	800b8c6 <_dtoa_r+0xa8e>
 800b8ec:	0800cf3c 	.word	0x0800cf3c
 800b8f0:	0800cec0 	.word	0x0800cec0

0800b8f4 <_free_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	2900      	cmp	r1, #0
 800b8fa:	d041      	beq.n	800b980 <_free_r+0x8c>
 800b8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b900:	1f0c      	subs	r4, r1, #4
 800b902:	2b00      	cmp	r3, #0
 800b904:	bfb8      	it	lt
 800b906:	18e4      	addlt	r4, r4, r3
 800b908:	f000 f8e8 	bl	800badc <__malloc_lock>
 800b90c:	4a1d      	ldr	r2, [pc, #116]	@ (800b984 <_free_r+0x90>)
 800b90e:	6813      	ldr	r3, [r2, #0]
 800b910:	b933      	cbnz	r3, 800b920 <_free_r+0x2c>
 800b912:	6063      	str	r3, [r4, #4]
 800b914:	6014      	str	r4, [r2, #0]
 800b916:	4628      	mov	r0, r5
 800b918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b91c:	f000 b8e4 	b.w	800bae8 <__malloc_unlock>
 800b920:	42a3      	cmp	r3, r4
 800b922:	d908      	bls.n	800b936 <_free_r+0x42>
 800b924:	6820      	ldr	r0, [r4, #0]
 800b926:	1821      	adds	r1, r4, r0
 800b928:	428b      	cmp	r3, r1
 800b92a:	bf01      	itttt	eq
 800b92c:	6819      	ldreq	r1, [r3, #0]
 800b92e:	685b      	ldreq	r3, [r3, #4]
 800b930:	1809      	addeq	r1, r1, r0
 800b932:	6021      	streq	r1, [r4, #0]
 800b934:	e7ed      	b.n	800b912 <_free_r+0x1e>
 800b936:	461a      	mov	r2, r3
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	b10b      	cbz	r3, 800b940 <_free_r+0x4c>
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	d9fa      	bls.n	800b936 <_free_r+0x42>
 800b940:	6811      	ldr	r1, [r2, #0]
 800b942:	1850      	adds	r0, r2, r1
 800b944:	42a0      	cmp	r0, r4
 800b946:	d10b      	bne.n	800b960 <_free_r+0x6c>
 800b948:	6820      	ldr	r0, [r4, #0]
 800b94a:	4401      	add	r1, r0
 800b94c:	1850      	adds	r0, r2, r1
 800b94e:	4283      	cmp	r3, r0
 800b950:	6011      	str	r1, [r2, #0]
 800b952:	d1e0      	bne.n	800b916 <_free_r+0x22>
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	6053      	str	r3, [r2, #4]
 800b95a:	4408      	add	r0, r1
 800b95c:	6010      	str	r0, [r2, #0]
 800b95e:	e7da      	b.n	800b916 <_free_r+0x22>
 800b960:	d902      	bls.n	800b968 <_free_r+0x74>
 800b962:	230c      	movs	r3, #12
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	e7d6      	b.n	800b916 <_free_r+0x22>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	1821      	adds	r1, r4, r0
 800b96c:	428b      	cmp	r3, r1
 800b96e:	bf04      	itt	eq
 800b970:	6819      	ldreq	r1, [r3, #0]
 800b972:	685b      	ldreq	r3, [r3, #4]
 800b974:	6063      	str	r3, [r4, #4]
 800b976:	bf04      	itt	eq
 800b978:	1809      	addeq	r1, r1, r0
 800b97a:	6021      	streq	r1, [r4, #0]
 800b97c:	6054      	str	r4, [r2, #4]
 800b97e:	e7ca      	b.n	800b916 <_free_r+0x22>
 800b980:	bd38      	pop	{r3, r4, r5, pc}
 800b982:	bf00      	nop
 800b984:	20004f20 	.word	0x20004f20

0800b988 <malloc>:
 800b988:	4b02      	ldr	r3, [pc, #8]	@ (800b994 <malloc+0xc>)
 800b98a:	4601      	mov	r1, r0
 800b98c:	6818      	ldr	r0, [r3, #0]
 800b98e:	f000 b825 	b.w	800b9dc <_malloc_r>
 800b992:	bf00      	nop
 800b994:	2000001c 	.word	0x2000001c

0800b998 <sbrk_aligned>:
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	4e0f      	ldr	r6, [pc, #60]	@ (800b9d8 <sbrk_aligned+0x40>)
 800b99c:	460c      	mov	r4, r1
 800b99e:	6831      	ldr	r1, [r6, #0]
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	b911      	cbnz	r1, 800b9aa <sbrk_aligned+0x12>
 800b9a4:	f001 f804 	bl	800c9b0 <_sbrk_r>
 800b9a8:	6030      	str	r0, [r6, #0]
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f000 ffff 	bl	800c9b0 <_sbrk_r>
 800b9b2:	1c43      	adds	r3, r0, #1
 800b9b4:	d103      	bne.n	800b9be <sbrk_aligned+0x26>
 800b9b6:	f04f 34ff 	mov.w	r4, #4294967295
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	bd70      	pop	{r4, r5, r6, pc}
 800b9be:	1cc4      	adds	r4, r0, #3
 800b9c0:	f024 0403 	bic.w	r4, r4, #3
 800b9c4:	42a0      	cmp	r0, r4
 800b9c6:	d0f8      	beq.n	800b9ba <sbrk_aligned+0x22>
 800b9c8:	1a21      	subs	r1, r4, r0
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f000 fff0 	bl	800c9b0 <_sbrk_r>
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	d1f2      	bne.n	800b9ba <sbrk_aligned+0x22>
 800b9d4:	e7ef      	b.n	800b9b6 <sbrk_aligned+0x1e>
 800b9d6:	bf00      	nop
 800b9d8:	20004f1c 	.word	0x20004f1c

0800b9dc <_malloc_r>:
 800b9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e0:	1ccd      	adds	r5, r1, #3
 800b9e2:	f025 0503 	bic.w	r5, r5, #3
 800b9e6:	3508      	adds	r5, #8
 800b9e8:	2d0c      	cmp	r5, #12
 800b9ea:	bf38      	it	cc
 800b9ec:	250c      	movcc	r5, #12
 800b9ee:	2d00      	cmp	r5, #0
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	db01      	blt.n	800b9f8 <_malloc_r+0x1c>
 800b9f4:	42a9      	cmp	r1, r5
 800b9f6:	d904      	bls.n	800ba02 <_malloc_r+0x26>
 800b9f8:	230c      	movs	r3, #12
 800b9fa:	6033      	str	r3, [r6, #0]
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bad8 <_malloc_r+0xfc>
 800ba06:	f000 f869 	bl	800badc <__malloc_lock>
 800ba0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba0e:	461c      	mov	r4, r3
 800ba10:	bb44      	cbnz	r4, 800ba64 <_malloc_r+0x88>
 800ba12:	4629      	mov	r1, r5
 800ba14:	4630      	mov	r0, r6
 800ba16:	f7ff ffbf 	bl	800b998 <sbrk_aligned>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	d158      	bne.n	800bad2 <_malloc_r+0xf6>
 800ba20:	f8d8 4000 	ldr.w	r4, [r8]
 800ba24:	4627      	mov	r7, r4
 800ba26:	2f00      	cmp	r7, #0
 800ba28:	d143      	bne.n	800bab2 <_malloc_r+0xd6>
 800ba2a:	2c00      	cmp	r4, #0
 800ba2c:	d04b      	beq.n	800bac6 <_malloc_r+0xea>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	4639      	mov	r1, r7
 800ba32:	4630      	mov	r0, r6
 800ba34:	eb04 0903 	add.w	r9, r4, r3
 800ba38:	f000 ffba 	bl	800c9b0 <_sbrk_r>
 800ba3c:	4581      	cmp	r9, r0
 800ba3e:	d142      	bne.n	800bac6 <_malloc_r+0xea>
 800ba40:	6821      	ldr	r1, [r4, #0]
 800ba42:	1a6d      	subs	r5, r5, r1
 800ba44:	4629      	mov	r1, r5
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7ff ffa6 	bl	800b998 <sbrk_aligned>
 800ba4c:	3001      	adds	r0, #1
 800ba4e:	d03a      	beq.n	800bac6 <_malloc_r+0xea>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	442b      	add	r3, r5
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	f8d8 3000 	ldr.w	r3, [r8]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	bb62      	cbnz	r2, 800bab8 <_malloc_r+0xdc>
 800ba5e:	f8c8 7000 	str.w	r7, [r8]
 800ba62:	e00f      	b.n	800ba84 <_malloc_r+0xa8>
 800ba64:	6822      	ldr	r2, [r4, #0]
 800ba66:	1b52      	subs	r2, r2, r5
 800ba68:	d420      	bmi.n	800baac <_malloc_r+0xd0>
 800ba6a:	2a0b      	cmp	r2, #11
 800ba6c:	d917      	bls.n	800ba9e <_malloc_r+0xc2>
 800ba6e:	1961      	adds	r1, r4, r5
 800ba70:	42a3      	cmp	r3, r4
 800ba72:	6025      	str	r5, [r4, #0]
 800ba74:	bf18      	it	ne
 800ba76:	6059      	strne	r1, [r3, #4]
 800ba78:	6863      	ldr	r3, [r4, #4]
 800ba7a:	bf08      	it	eq
 800ba7c:	f8c8 1000 	streq.w	r1, [r8]
 800ba80:	5162      	str	r2, [r4, r5]
 800ba82:	604b      	str	r3, [r1, #4]
 800ba84:	4630      	mov	r0, r6
 800ba86:	f000 f82f 	bl	800bae8 <__malloc_unlock>
 800ba8a:	f104 000b 	add.w	r0, r4, #11
 800ba8e:	1d23      	adds	r3, r4, #4
 800ba90:	f020 0007 	bic.w	r0, r0, #7
 800ba94:	1ac2      	subs	r2, r0, r3
 800ba96:	bf1c      	itt	ne
 800ba98:	1a1b      	subne	r3, r3, r0
 800ba9a:	50a3      	strne	r3, [r4, r2]
 800ba9c:	e7af      	b.n	800b9fe <_malloc_r+0x22>
 800ba9e:	6862      	ldr	r2, [r4, #4]
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	bf0c      	ite	eq
 800baa4:	f8c8 2000 	streq.w	r2, [r8]
 800baa8:	605a      	strne	r2, [r3, #4]
 800baaa:	e7eb      	b.n	800ba84 <_malloc_r+0xa8>
 800baac:	4623      	mov	r3, r4
 800baae:	6864      	ldr	r4, [r4, #4]
 800bab0:	e7ae      	b.n	800ba10 <_malloc_r+0x34>
 800bab2:	463c      	mov	r4, r7
 800bab4:	687f      	ldr	r7, [r7, #4]
 800bab6:	e7b6      	b.n	800ba26 <_malloc_r+0x4a>
 800bab8:	461a      	mov	r2, r3
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	42a3      	cmp	r3, r4
 800babe:	d1fb      	bne.n	800bab8 <_malloc_r+0xdc>
 800bac0:	2300      	movs	r3, #0
 800bac2:	6053      	str	r3, [r2, #4]
 800bac4:	e7de      	b.n	800ba84 <_malloc_r+0xa8>
 800bac6:	230c      	movs	r3, #12
 800bac8:	6033      	str	r3, [r6, #0]
 800baca:	4630      	mov	r0, r6
 800bacc:	f000 f80c 	bl	800bae8 <__malloc_unlock>
 800bad0:	e794      	b.n	800b9fc <_malloc_r+0x20>
 800bad2:	6005      	str	r5, [r0, #0]
 800bad4:	e7d6      	b.n	800ba84 <_malloc_r+0xa8>
 800bad6:	bf00      	nop
 800bad8:	20004f20 	.word	0x20004f20

0800badc <__malloc_lock>:
 800badc:	4801      	ldr	r0, [pc, #4]	@ (800bae4 <__malloc_lock+0x8>)
 800bade:	f7ff b910 	b.w	800ad02 <__retarget_lock_acquire_recursive>
 800bae2:	bf00      	nop
 800bae4:	20004f18 	.word	0x20004f18

0800bae8 <__malloc_unlock>:
 800bae8:	4801      	ldr	r0, [pc, #4]	@ (800baf0 <__malloc_unlock+0x8>)
 800baea:	f7ff b90b 	b.w	800ad04 <__retarget_lock_release_recursive>
 800baee:	bf00      	nop
 800baf0:	20004f18 	.word	0x20004f18

0800baf4 <_Balloc>:
 800baf4:	b570      	push	{r4, r5, r6, lr}
 800baf6:	69c6      	ldr	r6, [r0, #28]
 800baf8:	4604      	mov	r4, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	b976      	cbnz	r6, 800bb1c <_Balloc+0x28>
 800bafe:	2010      	movs	r0, #16
 800bb00:	f7ff ff42 	bl	800b988 <malloc>
 800bb04:	4602      	mov	r2, r0
 800bb06:	61e0      	str	r0, [r4, #28]
 800bb08:	b920      	cbnz	r0, 800bb14 <_Balloc+0x20>
 800bb0a:	4b18      	ldr	r3, [pc, #96]	@ (800bb6c <_Balloc+0x78>)
 800bb0c:	4818      	ldr	r0, [pc, #96]	@ (800bb70 <_Balloc+0x7c>)
 800bb0e:	216b      	movs	r1, #107	@ 0x6b
 800bb10:	f000 ff5e 	bl	800c9d0 <__assert_func>
 800bb14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb18:	6006      	str	r6, [r0, #0]
 800bb1a:	60c6      	str	r6, [r0, #12]
 800bb1c:	69e6      	ldr	r6, [r4, #28]
 800bb1e:	68f3      	ldr	r3, [r6, #12]
 800bb20:	b183      	cbz	r3, 800bb44 <_Balloc+0x50>
 800bb22:	69e3      	ldr	r3, [r4, #28]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb2a:	b9b8      	cbnz	r0, 800bb5c <_Balloc+0x68>
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	fa01 f605 	lsl.w	r6, r1, r5
 800bb32:	1d72      	adds	r2, r6, #5
 800bb34:	0092      	lsls	r2, r2, #2
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 ff68 	bl	800ca0c <_calloc_r>
 800bb3c:	b160      	cbz	r0, 800bb58 <_Balloc+0x64>
 800bb3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb42:	e00e      	b.n	800bb62 <_Balloc+0x6e>
 800bb44:	2221      	movs	r2, #33	@ 0x21
 800bb46:	2104      	movs	r1, #4
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 ff5f 	bl	800ca0c <_calloc_r>
 800bb4e:	69e3      	ldr	r3, [r4, #28]
 800bb50:	60f0      	str	r0, [r6, #12]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1e4      	bne.n	800bb22 <_Balloc+0x2e>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	bd70      	pop	{r4, r5, r6, pc}
 800bb5c:	6802      	ldr	r2, [r0, #0]
 800bb5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb62:	2300      	movs	r3, #0
 800bb64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb68:	e7f7      	b.n	800bb5a <_Balloc+0x66>
 800bb6a:	bf00      	nop
 800bb6c:	0800cecd 	.word	0x0800cecd
 800bb70:	0800cf4d 	.word	0x0800cf4d

0800bb74 <_Bfree>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	69c6      	ldr	r6, [r0, #28]
 800bb78:	4605      	mov	r5, r0
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	b976      	cbnz	r6, 800bb9c <_Bfree+0x28>
 800bb7e:	2010      	movs	r0, #16
 800bb80:	f7ff ff02 	bl	800b988 <malloc>
 800bb84:	4602      	mov	r2, r0
 800bb86:	61e8      	str	r0, [r5, #28]
 800bb88:	b920      	cbnz	r0, 800bb94 <_Bfree+0x20>
 800bb8a:	4b09      	ldr	r3, [pc, #36]	@ (800bbb0 <_Bfree+0x3c>)
 800bb8c:	4809      	ldr	r0, [pc, #36]	@ (800bbb4 <_Bfree+0x40>)
 800bb8e:	218f      	movs	r1, #143	@ 0x8f
 800bb90:	f000 ff1e 	bl	800c9d0 <__assert_func>
 800bb94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb98:	6006      	str	r6, [r0, #0]
 800bb9a:	60c6      	str	r6, [r0, #12]
 800bb9c:	b13c      	cbz	r4, 800bbae <_Bfree+0x3a>
 800bb9e:	69eb      	ldr	r3, [r5, #28]
 800bba0:	6862      	ldr	r2, [r4, #4]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bba8:	6021      	str	r1, [r4, #0]
 800bbaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	0800cecd 	.word	0x0800cecd
 800bbb4:	0800cf4d 	.word	0x0800cf4d

0800bbb8 <__multadd>:
 800bbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbc:	690d      	ldr	r5, [r1, #16]
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	461e      	mov	r6, r3
 800bbc4:	f101 0c14 	add.w	ip, r1, #20
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f8dc 3000 	ldr.w	r3, [ip]
 800bbce:	b299      	uxth	r1, r3
 800bbd0:	fb02 6101 	mla	r1, r2, r1, r6
 800bbd4:	0c1e      	lsrs	r6, r3, #16
 800bbd6:	0c0b      	lsrs	r3, r1, #16
 800bbd8:	fb02 3306 	mla	r3, r2, r6, r3
 800bbdc:	b289      	uxth	r1, r1
 800bbde:	3001      	adds	r0, #1
 800bbe0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbe4:	4285      	cmp	r5, r0
 800bbe6:	f84c 1b04 	str.w	r1, [ip], #4
 800bbea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbee:	dcec      	bgt.n	800bbca <__multadd+0x12>
 800bbf0:	b30e      	cbz	r6, 800bc36 <__multadd+0x7e>
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	42ab      	cmp	r3, r5
 800bbf6:	dc19      	bgt.n	800bc2c <__multadd+0x74>
 800bbf8:	6861      	ldr	r1, [r4, #4]
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	3101      	adds	r1, #1
 800bbfe:	f7ff ff79 	bl	800baf4 <_Balloc>
 800bc02:	4680      	mov	r8, r0
 800bc04:	b928      	cbnz	r0, 800bc12 <__multadd+0x5a>
 800bc06:	4602      	mov	r2, r0
 800bc08:	4b0c      	ldr	r3, [pc, #48]	@ (800bc3c <__multadd+0x84>)
 800bc0a:	480d      	ldr	r0, [pc, #52]	@ (800bc40 <__multadd+0x88>)
 800bc0c:	21ba      	movs	r1, #186	@ 0xba
 800bc0e:	f000 fedf 	bl	800c9d0 <__assert_func>
 800bc12:	6922      	ldr	r2, [r4, #16]
 800bc14:	3202      	adds	r2, #2
 800bc16:	f104 010c 	add.w	r1, r4, #12
 800bc1a:	0092      	lsls	r2, r2, #2
 800bc1c:	300c      	adds	r0, #12
 800bc1e:	f7ff f872 	bl	800ad06 <memcpy>
 800bc22:	4621      	mov	r1, r4
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff ffa5 	bl	800bb74 <_Bfree>
 800bc2a:	4644      	mov	r4, r8
 800bc2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc30:	3501      	adds	r5, #1
 800bc32:	615e      	str	r6, [r3, #20]
 800bc34:	6125      	str	r5, [r4, #16]
 800bc36:	4620      	mov	r0, r4
 800bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3c:	0800cf3c 	.word	0x0800cf3c
 800bc40:	0800cf4d 	.word	0x0800cf4d

0800bc44 <__hi0bits>:
 800bc44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bc48:	4603      	mov	r3, r0
 800bc4a:	bf36      	itet	cc
 800bc4c:	0403      	lslcc	r3, r0, #16
 800bc4e:	2000      	movcs	r0, #0
 800bc50:	2010      	movcc	r0, #16
 800bc52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc56:	bf3c      	itt	cc
 800bc58:	021b      	lslcc	r3, r3, #8
 800bc5a:	3008      	addcc	r0, #8
 800bc5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc60:	bf3c      	itt	cc
 800bc62:	011b      	lslcc	r3, r3, #4
 800bc64:	3004      	addcc	r0, #4
 800bc66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc6a:	bf3c      	itt	cc
 800bc6c:	009b      	lslcc	r3, r3, #2
 800bc6e:	3002      	addcc	r0, #2
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	db05      	blt.n	800bc80 <__hi0bits+0x3c>
 800bc74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc78:	f100 0001 	add.w	r0, r0, #1
 800bc7c:	bf08      	it	eq
 800bc7e:	2020      	moveq	r0, #32
 800bc80:	4770      	bx	lr

0800bc82 <__lo0bits>:
 800bc82:	6803      	ldr	r3, [r0, #0]
 800bc84:	4602      	mov	r2, r0
 800bc86:	f013 0007 	ands.w	r0, r3, #7
 800bc8a:	d00b      	beq.n	800bca4 <__lo0bits+0x22>
 800bc8c:	07d9      	lsls	r1, r3, #31
 800bc8e:	d421      	bmi.n	800bcd4 <__lo0bits+0x52>
 800bc90:	0798      	lsls	r0, r3, #30
 800bc92:	bf49      	itett	mi
 800bc94:	085b      	lsrmi	r3, r3, #1
 800bc96:	089b      	lsrpl	r3, r3, #2
 800bc98:	2001      	movmi	r0, #1
 800bc9a:	6013      	strmi	r3, [r2, #0]
 800bc9c:	bf5c      	itt	pl
 800bc9e:	6013      	strpl	r3, [r2, #0]
 800bca0:	2002      	movpl	r0, #2
 800bca2:	4770      	bx	lr
 800bca4:	b299      	uxth	r1, r3
 800bca6:	b909      	cbnz	r1, 800bcac <__lo0bits+0x2a>
 800bca8:	0c1b      	lsrs	r3, r3, #16
 800bcaa:	2010      	movs	r0, #16
 800bcac:	b2d9      	uxtb	r1, r3
 800bcae:	b909      	cbnz	r1, 800bcb4 <__lo0bits+0x32>
 800bcb0:	3008      	adds	r0, #8
 800bcb2:	0a1b      	lsrs	r3, r3, #8
 800bcb4:	0719      	lsls	r1, r3, #28
 800bcb6:	bf04      	itt	eq
 800bcb8:	091b      	lsreq	r3, r3, #4
 800bcba:	3004      	addeq	r0, #4
 800bcbc:	0799      	lsls	r1, r3, #30
 800bcbe:	bf04      	itt	eq
 800bcc0:	089b      	lsreq	r3, r3, #2
 800bcc2:	3002      	addeq	r0, #2
 800bcc4:	07d9      	lsls	r1, r3, #31
 800bcc6:	d403      	bmi.n	800bcd0 <__lo0bits+0x4e>
 800bcc8:	085b      	lsrs	r3, r3, #1
 800bcca:	f100 0001 	add.w	r0, r0, #1
 800bcce:	d003      	beq.n	800bcd8 <__lo0bits+0x56>
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	4770      	bx	lr
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	4770      	bx	lr
 800bcd8:	2020      	movs	r0, #32
 800bcda:	4770      	bx	lr

0800bcdc <__i2b>:
 800bcdc:	b510      	push	{r4, lr}
 800bcde:	460c      	mov	r4, r1
 800bce0:	2101      	movs	r1, #1
 800bce2:	f7ff ff07 	bl	800baf4 <_Balloc>
 800bce6:	4602      	mov	r2, r0
 800bce8:	b928      	cbnz	r0, 800bcf6 <__i2b+0x1a>
 800bcea:	4b05      	ldr	r3, [pc, #20]	@ (800bd00 <__i2b+0x24>)
 800bcec:	4805      	ldr	r0, [pc, #20]	@ (800bd04 <__i2b+0x28>)
 800bcee:	f240 1145 	movw	r1, #325	@ 0x145
 800bcf2:	f000 fe6d 	bl	800c9d0 <__assert_func>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	6144      	str	r4, [r0, #20]
 800bcfa:	6103      	str	r3, [r0, #16]
 800bcfc:	bd10      	pop	{r4, pc}
 800bcfe:	bf00      	nop
 800bd00:	0800cf3c 	.word	0x0800cf3c
 800bd04:	0800cf4d 	.word	0x0800cf4d

0800bd08 <__multiply>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	4617      	mov	r7, r2
 800bd0e:	690a      	ldr	r2, [r1, #16]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	bfa8      	it	ge
 800bd16:	463b      	movge	r3, r7
 800bd18:	4689      	mov	r9, r1
 800bd1a:	bfa4      	itt	ge
 800bd1c:	460f      	movge	r7, r1
 800bd1e:	4699      	movge	r9, r3
 800bd20:	693d      	ldr	r5, [r7, #16]
 800bd22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	6879      	ldr	r1, [r7, #4]
 800bd2a:	eb05 060a 	add.w	r6, r5, sl
 800bd2e:	42b3      	cmp	r3, r6
 800bd30:	b085      	sub	sp, #20
 800bd32:	bfb8      	it	lt
 800bd34:	3101      	addlt	r1, #1
 800bd36:	f7ff fedd 	bl	800baf4 <_Balloc>
 800bd3a:	b930      	cbnz	r0, 800bd4a <__multiply+0x42>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	4b41      	ldr	r3, [pc, #260]	@ (800be44 <__multiply+0x13c>)
 800bd40:	4841      	ldr	r0, [pc, #260]	@ (800be48 <__multiply+0x140>)
 800bd42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bd46:	f000 fe43 	bl	800c9d0 <__assert_func>
 800bd4a:	f100 0414 	add.w	r4, r0, #20
 800bd4e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bd52:	4623      	mov	r3, r4
 800bd54:	2200      	movs	r2, #0
 800bd56:	4573      	cmp	r3, lr
 800bd58:	d320      	bcc.n	800bd9c <__multiply+0x94>
 800bd5a:	f107 0814 	add.w	r8, r7, #20
 800bd5e:	f109 0114 	add.w	r1, r9, #20
 800bd62:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bd66:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bd6a:	9302      	str	r3, [sp, #8]
 800bd6c:	1beb      	subs	r3, r5, r7
 800bd6e:	3b15      	subs	r3, #21
 800bd70:	f023 0303 	bic.w	r3, r3, #3
 800bd74:	3304      	adds	r3, #4
 800bd76:	3715      	adds	r7, #21
 800bd78:	42bd      	cmp	r5, r7
 800bd7a:	bf38      	it	cc
 800bd7c:	2304      	movcc	r3, #4
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	9b02      	ldr	r3, [sp, #8]
 800bd82:	9103      	str	r1, [sp, #12]
 800bd84:	428b      	cmp	r3, r1
 800bd86:	d80c      	bhi.n	800bda2 <__multiply+0x9a>
 800bd88:	2e00      	cmp	r6, #0
 800bd8a:	dd03      	ble.n	800bd94 <__multiply+0x8c>
 800bd8c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d055      	beq.n	800be40 <__multiply+0x138>
 800bd94:	6106      	str	r6, [r0, #16]
 800bd96:	b005      	add	sp, #20
 800bd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9c:	f843 2b04 	str.w	r2, [r3], #4
 800bda0:	e7d9      	b.n	800bd56 <__multiply+0x4e>
 800bda2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bda6:	f1ba 0f00 	cmp.w	sl, #0
 800bdaa:	d01f      	beq.n	800bdec <__multiply+0xe4>
 800bdac:	46c4      	mov	ip, r8
 800bdae:	46a1      	mov	r9, r4
 800bdb0:	2700      	movs	r7, #0
 800bdb2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdb6:	f8d9 3000 	ldr.w	r3, [r9]
 800bdba:	fa1f fb82 	uxth.w	fp, r2
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bdc4:	443b      	add	r3, r7
 800bdc6:	f8d9 7000 	ldr.w	r7, [r9]
 800bdca:	0c12      	lsrs	r2, r2, #16
 800bdcc:	0c3f      	lsrs	r7, r7, #16
 800bdce:	fb0a 7202 	mla	r2, sl, r2, r7
 800bdd2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bddc:	4565      	cmp	r5, ip
 800bdde:	f849 3b04 	str.w	r3, [r9], #4
 800bde2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bde6:	d8e4      	bhi.n	800bdb2 <__multiply+0xaa>
 800bde8:	9b01      	ldr	r3, [sp, #4]
 800bdea:	50e7      	str	r7, [r4, r3]
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bdf2:	3104      	adds	r1, #4
 800bdf4:	f1b9 0f00 	cmp.w	r9, #0
 800bdf8:	d020      	beq.n	800be3c <__multiply+0x134>
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	4647      	mov	r7, r8
 800bdfe:	46a4      	mov	ip, r4
 800be00:	f04f 0a00 	mov.w	sl, #0
 800be04:	f8b7 b000 	ldrh.w	fp, [r7]
 800be08:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800be0c:	fb09 220b 	mla	r2, r9, fp, r2
 800be10:	4452      	add	r2, sl
 800be12:	b29b      	uxth	r3, r3
 800be14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be18:	f84c 3b04 	str.w	r3, [ip], #4
 800be1c:	f857 3b04 	ldr.w	r3, [r7], #4
 800be20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be24:	f8bc 3000 	ldrh.w	r3, [ip]
 800be28:	fb09 330a 	mla	r3, r9, sl, r3
 800be2c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800be30:	42bd      	cmp	r5, r7
 800be32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be36:	d8e5      	bhi.n	800be04 <__multiply+0xfc>
 800be38:	9a01      	ldr	r2, [sp, #4]
 800be3a:	50a3      	str	r3, [r4, r2]
 800be3c:	3404      	adds	r4, #4
 800be3e:	e79f      	b.n	800bd80 <__multiply+0x78>
 800be40:	3e01      	subs	r6, #1
 800be42:	e7a1      	b.n	800bd88 <__multiply+0x80>
 800be44:	0800cf3c 	.word	0x0800cf3c
 800be48:	0800cf4d 	.word	0x0800cf4d

0800be4c <__pow5mult>:
 800be4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be50:	4615      	mov	r5, r2
 800be52:	f012 0203 	ands.w	r2, r2, #3
 800be56:	4607      	mov	r7, r0
 800be58:	460e      	mov	r6, r1
 800be5a:	d007      	beq.n	800be6c <__pow5mult+0x20>
 800be5c:	4c25      	ldr	r4, [pc, #148]	@ (800bef4 <__pow5mult+0xa8>)
 800be5e:	3a01      	subs	r2, #1
 800be60:	2300      	movs	r3, #0
 800be62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be66:	f7ff fea7 	bl	800bbb8 <__multadd>
 800be6a:	4606      	mov	r6, r0
 800be6c:	10ad      	asrs	r5, r5, #2
 800be6e:	d03d      	beq.n	800beec <__pow5mult+0xa0>
 800be70:	69fc      	ldr	r4, [r7, #28]
 800be72:	b97c      	cbnz	r4, 800be94 <__pow5mult+0x48>
 800be74:	2010      	movs	r0, #16
 800be76:	f7ff fd87 	bl	800b988 <malloc>
 800be7a:	4602      	mov	r2, r0
 800be7c:	61f8      	str	r0, [r7, #28]
 800be7e:	b928      	cbnz	r0, 800be8c <__pow5mult+0x40>
 800be80:	4b1d      	ldr	r3, [pc, #116]	@ (800bef8 <__pow5mult+0xac>)
 800be82:	481e      	ldr	r0, [pc, #120]	@ (800befc <__pow5mult+0xb0>)
 800be84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800be88:	f000 fda2 	bl	800c9d0 <__assert_func>
 800be8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be90:	6004      	str	r4, [r0, #0]
 800be92:	60c4      	str	r4, [r0, #12]
 800be94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800be98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be9c:	b94c      	cbnz	r4, 800beb2 <__pow5mult+0x66>
 800be9e:	f240 2171 	movw	r1, #625	@ 0x271
 800bea2:	4638      	mov	r0, r7
 800bea4:	f7ff ff1a 	bl	800bcdc <__i2b>
 800bea8:	2300      	movs	r3, #0
 800beaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800beae:	4604      	mov	r4, r0
 800beb0:	6003      	str	r3, [r0, #0]
 800beb2:	f04f 0900 	mov.w	r9, #0
 800beb6:	07eb      	lsls	r3, r5, #31
 800beb8:	d50a      	bpl.n	800bed0 <__pow5mult+0x84>
 800beba:	4631      	mov	r1, r6
 800bebc:	4622      	mov	r2, r4
 800bebe:	4638      	mov	r0, r7
 800bec0:	f7ff ff22 	bl	800bd08 <__multiply>
 800bec4:	4631      	mov	r1, r6
 800bec6:	4680      	mov	r8, r0
 800bec8:	4638      	mov	r0, r7
 800beca:	f7ff fe53 	bl	800bb74 <_Bfree>
 800bece:	4646      	mov	r6, r8
 800bed0:	106d      	asrs	r5, r5, #1
 800bed2:	d00b      	beq.n	800beec <__pow5mult+0xa0>
 800bed4:	6820      	ldr	r0, [r4, #0]
 800bed6:	b938      	cbnz	r0, 800bee8 <__pow5mult+0x9c>
 800bed8:	4622      	mov	r2, r4
 800beda:	4621      	mov	r1, r4
 800bedc:	4638      	mov	r0, r7
 800bede:	f7ff ff13 	bl	800bd08 <__multiply>
 800bee2:	6020      	str	r0, [r4, #0]
 800bee4:	f8c0 9000 	str.w	r9, [r0]
 800bee8:	4604      	mov	r4, r0
 800beea:	e7e4      	b.n	800beb6 <__pow5mult+0x6a>
 800beec:	4630      	mov	r0, r6
 800beee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef2:	bf00      	nop
 800bef4:	0800d000 	.word	0x0800d000
 800bef8:	0800cecd 	.word	0x0800cecd
 800befc:	0800cf4d 	.word	0x0800cf4d

0800bf00 <__lshift>:
 800bf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf04:	460c      	mov	r4, r1
 800bf06:	6849      	ldr	r1, [r1, #4]
 800bf08:	6923      	ldr	r3, [r4, #16]
 800bf0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	4607      	mov	r7, r0
 800bf12:	4691      	mov	r9, r2
 800bf14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf18:	f108 0601 	add.w	r6, r8, #1
 800bf1c:	42b3      	cmp	r3, r6
 800bf1e:	db0b      	blt.n	800bf38 <__lshift+0x38>
 800bf20:	4638      	mov	r0, r7
 800bf22:	f7ff fde7 	bl	800baf4 <_Balloc>
 800bf26:	4605      	mov	r5, r0
 800bf28:	b948      	cbnz	r0, 800bf3e <__lshift+0x3e>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	4b28      	ldr	r3, [pc, #160]	@ (800bfd0 <__lshift+0xd0>)
 800bf2e:	4829      	ldr	r0, [pc, #164]	@ (800bfd4 <__lshift+0xd4>)
 800bf30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bf34:	f000 fd4c 	bl	800c9d0 <__assert_func>
 800bf38:	3101      	adds	r1, #1
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	e7ee      	b.n	800bf1c <__lshift+0x1c>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f100 0114 	add.w	r1, r0, #20
 800bf44:	f100 0210 	add.w	r2, r0, #16
 800bf48:	4618      	mov	r0, r3
 800bf4a:	4553      	cmp	r3, sl
 800bf4c:	db33      	blt.n	800bfb6 <__lshift+0xb6>
 800bf4e:	6920      	ldr	r0, [r4, #16]
 800bf50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf54:	f104 0314 	add.w	r3, r4, #20
 800bf58:	f019 091f 	ands.w	r9, r9, #31
 800bf5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf64:	d02b      	beq.n	800bfbe <__lshift+0xbe>
 800bf66:	f1c9 0e20 	rsb	lr, r9, #32
 800bf6a:	468a      	mov	sl, r1
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	fa00 f009 	lsl.w	r0, r0, r9
 800bf74:	4310      	orrs	r0, r2
 800bf76:	f84a 0b04 	str.w	r0, [sl], #4
 800bf7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7e:	459c      	cmp	ip, r3
 800bf80:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf84:	d8f3      	bhi.n	800bf6e <__lshift+0x6e>
 800bf86:	ebac 0304 	sub.w	r3, ip, r4
 800bf8a:	3b15      	subs	r3, #21
 800bf8c:	f023 0303 	bic.w	r3, r3, #3
 800bf90:	3304      	adds	r3, #4
 800bf92:	f104 0015 	add.w	r0, r4, #21
 800bf96:	4560      	cmp	r0, ip
 800bf98:	bf88      	it	hi
 800bf9a:	2304      	movhi	r3, #4
 800bf9c:	50ca      	str	r2, [r1, r3]
 800bf9e:	b10a      	cbz	r2, 800bfa4 <__lshift+0xa4>
 800bfa0:	f108 0602 	add.w	r6, r8, #2
 800bfa4:	3e01      	subs	r6, #1
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	612e      	str	r6, [r5, #16]
 800bfaa:	4621      	mov	r1, r4
 800bfac:	f7ff fde2 	bl	800bb74 <_Bfree>
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfba:	3301      	adds	r3, #1
 800bfbc:	e7c5      	b.n	800bf4a <__lshift+0x4a>
 800bfbe:	3904      	subs	r1, #4
 800bfc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfc8:	459c      	cmp	ip, r3
 800bfca:	d8f9      	bhi.n	800bfc0 <__lshift+0xc0>
 800bfcc:	e7ea      	b.n	800bfa4 <__lshift+0xa4>
 800bfce:	bf00      	nop
 800bfd0:	0800cf3c 	.word	0x0800cf3c
 800bfd4:	0800cf4d 	.word	0x0800cf4d

0800bfd8 <__mcmp>:
 800bfd8:	690a      	ldr	r2, [r1, #16]
 800bfda:	4603      	mov	r3, r0
 800bfdc:	6900      	ldr	r0, [r0, #16]
 800bfde:	1a80      	subs	r0, r0, r2
 800bfe0:	b530      	push	{r4, r5, lr}
 800bfe2:	d10e      	bne.n	800c002 <__mcmp+0x2a>
 800bfe4:	3314      	adds	r3, #20
 800bfe6:	3114      	adds	r1, #20
 800bfe8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bfec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bff0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bff4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bff8:	4295      	cmp	r5, r2
 800bffa:	d003      	beq.n	800c004 <__mcmp+0x2c>
 800bffc:	d205      	bcs.n	800c00a <__mcmp+0x32>
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	bd30      	pop	{r4, r5, pc}
 800c004:	42a3      	cmp	r3, r4
 800c006:	d3f3      	bcc.n	800bff0 <__mcmp+0x18>
 800c008:	e7fb      	b.n	800c002 <__mcmp+0x2a>
 800c00a:	2001      	movs	r0, #1
 800c00c:	e7f9      	b.n	800c002 <__mcmp+0x2a>
	...

0800c010 <__mdiff>:
 800c010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	4689      	mov	r9, r1
 800c016:	4606      	mov	r6, r0
 800c018:	4611      	mov	r1, r2
 800c01a:	4648      	mov	r0, r9
 800c01c:	4614      	mov	r4, r2
 800c01e:	f7ff ffdb 	bl	800bfd8 <__mcmp>
 800c022:	1e05      	subs	r5, r0, #0
 800c024:	d112      	bne.n	800c04c <__mdiff+0x3c>
 800c026:	4629      	mov	r1, r5
 800c028:	4630      	mov	r0, r6
 800c02a:	f7ff fd63 	bl	800baf4 <_Balloc>
 800c02e:	4602      	mov	r2, r0
 800c030:	b928      	cbnz	r0, 800c03e <__mdiff+0x2e>
 800c032:	4b3f      	ldr	r3, [pc, #252]	@ (800c130 <__mdiff+0x120>)
 800c034:	f240 2137 	movw	r1, #567	@ 0x237
 800c038:	483e      	ldr	r0, [pc, #248]	@ (800c134 <__mdiff+0x124>)
 800c03a:	f000 fcc9 	bl	800c9d0 <__assert_func>
 800c03e:	2301      	movs	r3, #1
 800c040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c044:	4610      	mov	r0, r2
 800c046:	b003      	add	sp, #12
 800c048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04c:	bfbc      	itt	lt
 800c04e:	464b      	movlt	r3, r9
 800c050:	46a1      	movlt	r9, r4
 800c052:	4630      	mov	r0, r6
 800c054:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c058:	bfba      	itte	lt
 800c05a:	461c      	movlt	r4, r3
 800c05c:	2501      	movlt	r5, #1
 800c05e:	2500      	movge	r5, #0
 800c060:	f7ff fd48 	bl	800baf4 <_Balloc>
 800c064:	4602      	mov	r2, r0
 800c066:	b918      	cbnz	r0, 800c070 <__mdiff+0x60>
 800c068:	4b31      	ldr	r3, [pc, #196]	@ (800c130 <__mdiff+0x120>)
 800c06a:	f240 2145 	movw	r1, #581	@ 0x245
 800c06e:	e7e3      	b.n	800c038 <__mdiff+0x28>
 800c070:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c074:	6926      	ldr	r6, [r4, #16]
 800c076:	60c5      	str	r5, [r0, #12]
 800c078:	f109 0310 	add.w	r3, r9, #16
 800c07c:	f109 0514 	add.w	r5, r9, #20
 800c080:	f104 0e14 	add.w	lr, r4, #20
 800c084:	f100 0b14 	add.w	fp, r0, #20
 800c088:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c08c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	46d9      	mov	r9, fp
 800c094:	f04f 0c00 	mov.w	ip, #0
 800c098:	9b01      	ldr	r3, [sp, #4]
 800c09a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c09e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c0a2:	9301      	str	r3, [sp, #4]
 800c0a4:	fa1f f38a 	uxth.w	r3, sl
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	b283      	uxth	r3, r0
 800c0ac:	1acb      	subs	r3, r1, r3
 800c0ae:	0c00      	lsrs	r0, r0, #16
 800c0b0:	4463      	add	r3, ip
 800c0b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c0b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c0c0:	4576      	cmp	r6, lr
 800c0c2:	f849 3b04 	str.w	r3, [r9], #4
 800c0c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0ca:	d8e5      	bhi.n	800c098 <__mdiff+0x88>
 800c0cc:	1b33      	subs	r3, r6, r4
 800c0ce:	3b15      	subs	r3, #21
 800c0d0:	f023 0303 	bic.w	r3, r3, #3
 800c0d4:	3415      	adds	r4, #21
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	42a6      	cmp	r6, r4
 800c0da:	bf38      	it	cc
 800c0dc:	2304      	movcc	r3, #4
 800c0de:	441d      	add	r5, r3
 800c0e0:	445b      	add	r3, fp
 800c0e2:	461e      	mov	r6, r3
 800c0e4:	462c      	mov	r4, r5
 800c0e6:	4544      	cmp	r4, r8
 800c0e8:	d30e      	bcc.n	800c108 <__mdiff+0xf8>
 800c0ea:	f108 0103 	add.w	r1, r8, #3
 800c0ee:	1b49      	subs	r1, r1, r5
 800c0f0:	f021 0103 	bic.w	r1, r1, #3
 800c0f4:	3d03      	subs	r5, #3
 800c0f6:	45a8      	cmp	r8, r5
 800c0f8:	bf38      	it	cc
 800c0fa:	2100      	movcc	r1, #0
 800c0fc:	440b      	add	r3, r1
 800c0fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c102:	b191      	cbz	r1, 800c12a <__mdiff+0x11a>
 800c104:	6117      	str	r7, [r2, #16]
 800c106:	e79d      	b.n	800c044 <__mdiff+0x34>
 800c108:	f854 1b04 	ldr.w	r1, [r4], #4
 800c10c:	46e6      	mov	lr, ip
 800c10e:	0c08      	lsrs	r0, r1, #16
 800c110:	fa1c fc81 	uxtah	ip, ip, r1
 800c114:	4471      	add	r1, lr
 800c116:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c11a:	b289      	uxth	r1, r1
 800c11c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c120:	f846 1b04 	str.w	r1, [r6], #4
 800c124:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c128:	e7dd      	b.n	800c0e6 <__mdiff+0xd6>
 800c12a:	3f01      	subs	r7, #1
 800c12c:	e7e7      	b.n	800c0fe <__mdiff+0xee>
 800c12e:	bf00      	nop
 800c130:	0800cf3c 	.word	0x0800cf3c
 800c134:	0800cf4d 	.word	0x0800cf4d

0800c138 <__d2b>:
 800c138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c13c:	460f      	mov	r7, r1
 800c13e:	2101      	movs	r1, #1
 800c140:	ec59 8b10 	vmov	r8, r9, d0
 800c144:	4616      	mov	r6, r2
 800c146:	f7ff fcd5 	bl	800baf4 <_Balloc>
 800c14a:	4604      	mov	r4, r0
 800c14c:	b930      	cbnz	r0, 800c15c <__d2b+0x24>
 800c14e:	4602      	mov	r2, r0
 800c150:	4b23      	ldr	r3, [pc, #140]	@ (800c1e0 <__d2b+0xa8>)
 800c152:	4824      	ldr	r0, [pc, #144]	@ (800c1e4 <__d2b+0xac>)
 800c154:	f240 310f 	movw	r1, #783	@ 0x30f
 800c158:	f000 fc3a 	bl	800c9d0 <__assert_func>
 800c15c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c164:	b10d      	cbz	r5, 800c16a <__d2b+0x32>
 800c166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	f1b8 0300 	subs.w	r3, r8, #0
 800c170:	d023      	beq.n	800c1ba <__d2b+0x82>
 800c172:	4668      	mov	r0, sp
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	f7ff fd84 	bl	800bc82 <__lo0bits>
 800c17a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c17e:	b1d0      	cbz	r0, 800c1b6 <__d2b+0x7e>
 800c180:	f1c0 0320 	rsb	r3, r0, #32
 800c184:	fa02 f303 	lsl.w	r3, r2, r3
 800c188:	430b      	orrs	r3, r1
 800c18a:	40c2      	lsrs	r2, r0
 800c18c:	6163      	str	r3, [r4, #20]
 800c18e:	9201      	str	r2, [sp, #4]
 800c190:	9b01      	ldr	r3, [sp, #4]
 800c192:	61a3      	str	r3, [r4, #24]
 800c194:	2b00      	cmp	r3, #0
 800c196:	bf0c      	ite	eq
 800c198:	2201      	moveq	r2, #1
 800c19a:	2202      	movne	r2, #2
 800c19c:	6122      	str	r2, [r4, #16]
 800c19e:	b1a5      	cbz	r5, 800c1ca <__d2b+0x92>
 800c1a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c1a4:	4405      	add	r5, r0
 800c1a6:	603d      	str	r5, [r7, #0]
 800c1a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c1ac:	6030      	str	r0, [r6, #0]
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	b003      	add	sp, #12
 800c1b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1b6:	6161      	str	r1, [r4, #20]
 800c1b8:	e7ea      	b.n	800c190 <__d2b+0x58>
 800c1ba:	a801      	add	r0, sp, #4
 800c1bc:	f7ff fd61 	bl	800bc82 <__lo0bits>
 800c1c0:	9b01      	ldr	r3, [sp, #4]
 800c1c2:	6163      	str	r3, [r4, #20]
 800c1c4:	3020      	adds	r0, #32
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	e7e8      	b.n	800c19c <__d2b+0x64>
 800c1ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c1d2:	6038      	str	r0, [r7, #0]
 800c1d4:	6918      	ldr	r0, [r3, #16]
 800c1d6:	f7ff fd35 	bl	800bc44 <__hi0bits>
 800c1da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1de:	e7e5      	b.n	800c1ac <__d2b+0x74>
 800c1e0:	0800cf3c 	.word	0x0800cf3c
 800c1e4:	0800cf4d 	.word	0x0800cf4d

0800c1e8 <__ssputs_r>:
 800c1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ec:	688e      	ldr	r6, [r1, #8]
 800c1ee:	461f      	mov	r7, r3
 800c1f0:	42be      	cmp	r6, r7
 800c1f2:	680b      	ldr	r3, [r1, #0]
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	4690      	mov	r8, r2
 800c1fa:	d82d      	bhi.n	800c258 <__ssputs_r+0x70>
 800c1fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c200:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c204:	d026      	beq.n	800c254 <__ssputs_r+0x6c>
 800c206:	6965      	ldr	r5, [r4, #20]
 800c208:	6909      	ldr	r1, [r1, #16]
 800c20a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c20e:	eba3 0901 	sub.w	r9, r3, r1
 800c212:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c216:	1c7b      	adds	r3, r7, #1
 800c218:	444b      	add	r3, r9
 800c21a:	106d      	asrs	r5, r5, #1
 800c21c:	429d      	cmp	r5, r3
 800c21e:	bf38      	it	cc
 800c220:	461d      	movcc	r5, r3
 800c222:	0553      	lsls	r3, r2, #21
 800c224:	d527      	bpl.n	800c276 <__ssputs_r+0x8e>
 800c226:	4629      	mov	r1, r5
 800c228:	f7ff fbd8 	bl	800b9dc <_malloc_r>
 800c22c:	4606      	mov	r6, r0
 800c22e:	b360      	cbz	r0, 800c28a <__ssputs_r+0xa2>
 800c230:	6921      	ldr	r1, [r4, #16]
 800c232:	464a      	mov	r2, r9
 800c234:	f7fe fd67 	bl	800ad06 <memcpy>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c23e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c242:	81a3      	strh	r3, [r4, #12]
 800c244:	6126      	str	r6, [r4, #16]
 800c246:	6165      	str	r5, [r4, #20]
 800c248:	444e      	add	r6, r9
 800c24a:	eba5 0509 	sub.w	r5, r5, r9
 800c24e:	6026      	str	r6, [r4, #0]
 800c250:	60a5      	str	r5, [r4, #8]
 800c252:	463e      	mov	r6, r7
 800c254:	42be      	cmp	r6, r7
 800c256:	d900      	bls.n	800c25a <__ssputs_r+0x72>
 800c258:	463e      	mov	r6, r7
 800c25a:	6820      	ldr	r0, [r4, #0]
 800c25c:	4632      	mov	r2, r6
 800c25e:	4641      	mov	r1, r8
 800c260:	f000 fb6a 	bl	800c938 <memmove>
 800c264:	68a3      	ldr	r3, [r4, #8]
 800c266:	1b9b      	subs	r3, r3, r6
 800c268:	60a3      	str	r3, [r4, #8]
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	4433      	add	r3, r6
 800c26e:	6023      	str	r3, [r4, #0]
 800c270:	2000      	movs	r0, #0
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	462a      	mov	r2, r5
 800c278:	f000 fbee 	bl	800ca58 <_realloc_r>
 800c27c:	4606      	mov	r6, r0
 800c27e:	2800      	cmp	r0, #0
 800c280:	d1e0      	bne.n	800c244 <__ssputs_r+0x5c>
 800c282:	6921      	ldr	r1, [r4, #16]
 800c284:	4650      	mov	r0, sl
 800c286:	f7ff fb35 	bl	800b8f4 <_free_r>
 800c28a:	230c      	movs	r3, #12
 800c28c:	f8ca 3000 	str.w	r3, [sl]
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c296:	81a3      	strh	r3, [r4, #12]
 800c298:	f04f 30ff 	mov.w	r0, #4294967295
 800c29c:	e7e9      	b.n	800c272 <__ssputs_r+0x8a>
	...

0800c2a0 <_svfiprintf_r>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	4698      	mov	r8, r3
 800c2a6:	898b      	ldrh	r3, [r1, #12]
 800c2a8:	061b      	lsls	r3, r3, #24
 800c2aa:	b09d      	sub	sp, #116	@ 0x74
 800c2ac:	4607      	mov	r7, r0
 800c2ae:	460d      	mov	r5, r1
 800c2b0:	4614      	mov	r4, r2
 800c2b2:	d510      	bpl.n	800c2d6 <_svfiprintf_r+0x36>
 800c2b4:	690b      	ldr	r3, [r1, #16]
 800c2b6:	b973      	cbnz	r3, 800c2d6 <_svfiprintf_r+0x36>
 800c2b8:	2140      	movs	r1, #64	@ 0x40
 800c2ba:	f7ff fb8f 	bl	800b9dc <_malloc_r>
 800c2be:	6028      	str	r0, [r5, #0]
 800c2c0:	6128      	str	r0, [r5, #16]
 800c2c2:	b930      	cbnz	r0, 800c2d2 <_svfiprintf_r+0x32>
 800c2c4:	230c      	movs	r3, #12
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2cc:	b01d      	add	sp, #116	@ 0x74
 800c2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d2:	2340      	movs	r3, #64	@ 0x40
 800c2d4:	616b      	str	r3, [r5, #20]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2da:	2320      	movs	r3, #32
 800c2dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e4:	2330      	movs	r3, #48	@ 0x30
 800c2e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c484 <_svfiprintf_r+0x1e4>
 800c2ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2ee:	f04f 0901 	mov.w	r9, #1
 800c2f2:	4623      	mov	r3, r4
 800c2f4:	469a      	mov	sl, r3
 800c2f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2fa:	b10a      	cbz	r2, 800c300 <_svfiprintf_r+0x60>
 800c2fc:	2a25      	cmp	r2, #37	@ 0x25
 800c2fe:	d1f9      	bne.n	800c2f4 <_svfiprintf_r+0x54>
 800c300:	ebba 0b04 	subs.w	fp, sl, r4
 800c304:	d00b      	beq.n	800c31e <_svfiprintf_r+0x7e>
 800c306:	465b      	mov	r3, fp
 800c308:	4622      	mov	r2, r4
 800c30a:	4629      	mov	r1, r5
 800c30c:	4638      	mov	r0, r7
 800c30e:	f7ff ff6b 	bl	800c1e8 <__ssputs_r>
 800c312:	3001      	adds	r0, #1
 800c314:	f000 80a7 	beq.w	800c466 <_svfiprintf_r+0x1c6>
 800c318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c31a:	445a      	add	r2, fp
 800c31c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c31e:	f89a 3000 	ldrb.w	r3, [sl]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 809f 	beq.w	800c466 <_svfiprintf_r+0x1c6>
 800c328:	2300      	movs	r3, #0
 800c32a:	f04f 32ff 	mov.w	r2, #4294967295
 800c32e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c332:	f10a 0a01 	add.w	sl, sl, #1
 800c336:	9304      	str	r3, [sp, #16]
 800c338:	9307      	str	r3, [sp, #28]
 800c33a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c33e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c340:	4654      	mov	r4, sl
 800c342:	2205      	movs	r2, #5
 800c344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c348:	484e      	ldr	r0, [pc, #312]	@ (800c484 <_svfiprintf_r+0x1e4>)
 800c34a:	f7f3 ff79 	bl	8000240 <memchr>
 800c34e:	9a04      	ldr	r2, [sp, #16]
 800c350:	b9d8      	cbnz	r0, 800c38a <_svfiprintf_r+0xea>
 800c352:	06d0      	lsls	r0, r2, #27
 800c354:	bf44      	itt	mi
 800c356:	2320      	movmi	r3, #32
 800c358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c35c:	0711      	lsls	r1, r2, #28
 800c35e:	bf44      	itt	mi
 800c360:	232b      	movmi	r3, #43	@ 0x2b
 800c362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c366:	f89a 3000 	ldrb.w	r3, [sl]
 800c36a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c36c:	d015      	beq.n	800c39a <_svfiprintf_r+0xfa>
 800c36e:	9a07      	ldr	r2, [sp, #28]
 800c370:	4654      	mov	r4, sl
 800c372:	2000      	movs	r0, #0
 800c374:	f04f 0c0a 	mov.w	ip, #10
 800c378:	4621      	mov	r1, r4
 800c37a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c37e:	3b30      	subs	r3, #48	@ 0x30
 800c380:	2b09      	cmp	r3, #9
 800c382:	d94b      	bls.n	800c41c <_svfiprintf_r+0x17c>
 800c384:	b1b0      	cbz	r0, 800c3b4 <_svfiprintf_r+0x114>
 800c386:	9207      	str	r2, [sp, #28]
 800c388:	e014      	b.n	800c3b4 <_svfiprintf_r+0x114>
 800c38a:	eba0 0308 	sub.w	r3, r0, r8
 800c38e:	fa09 f303 	lsl.w	r3, r9, r3
 800c392:	4313      	orrs	r3, r2
 800c394:	9304      	str	r3, [sp, #16]
 800c396:	46a2      	mov	sl, r4
 800c398:	e7d2      	b.n	800c340 <_svfiprintf_r+0xa0>
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	1d19      	adds	r1, r3, #4
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	9103      	str	r1, [sp, #12]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	bfbb      	ittet	lt
 800c3a6:	425b      	neglt	r3, r3
 800c3a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ac:	9307      	strge	r3, [sp, #28]
 800c3ae:	9307      	strlt	r3, [sp, #28]
 800c3b0:	bfb8      	it	lt
 800c3b2:	9204      	strlt	r2, [sp, #16]
 800c3b4:	7823      	ldrb	r3, [r4, #0]
 800c3b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3b8:	d10a      	bne.n	800c3d0 <_svfiprintf_r+0x130>
 800c3ba:	7863      	ldrb	r3, [r4, #1]
 800c3bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3be:	d132      	bne.n	800c426 <_svfiprintf_r+0x186>
 800c3c0:	9b03      	ldr	r3, [sp, #12]
 800c3c2:	1d1a      	adds	r2, r3, #4
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	9203      	str	r2, [sp, #12]
 800c3c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3cc:	3402      	adds	r4, #2
 800c3ce:	9305      	str	r3, [sp, #20]
 800c3d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c494 <_svfiprintf_r+0x1f4>
 800c3d4:	7821      	ldrb	r1, [r4, #0]
 800c3d6:	2203      	movs	r2, #3
 800c3d8:	4650      	mov	r0, sl
 800c3da:	f7f3 ff31 	bl	8000240 <memchr>
 800c3de:	b138      	cbz	r0, 800c3f0 <_svfiprintf_r+0x150>
 800c3e0:	9b04      	ldr	r3, [sp, #16]
 800c3e2:	eba0 000a 	sub.w	r0, r0, sl
 800c3e6:	2240      	movs	r2, #64	@ 0x40
 800c3e8:	4082      	lsls	r2, r0
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	3401      	adds	r4, #1
 800c3ee:	9304      	str	r3, [sp, #16]
 800c3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f4:	4824      	ldr	r0, [pc, #144]	@ (800c488 <_svfiprintf_r+0x1e8>)
 800c3f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3fa:	2206      	movs	r2, #6
 800c3fc:	f7f3 ff20 	bl	8000240 <memchr>
 800c400:	2800      	cmp	r0, #0
 800c402:	d036      	beq.n	800c472 <_svfiprintf_r+0x1d2>
 800c404:	4b21      	ldr	r3, [pc, #132]	@ (800c48c <_svfiprintf_r+0x1ec>)
 800c406:	bb1b      	cbnz	r3, 800c450 <_svfiprintf_r+0x1b0>
 800c408:	9b03      	ldr	r3, [sp, #12]
 800c40a:	3307      	adds	r3, #7
 800c40c:	f023 0307 	bic.w	r3, r3, #7
 800c410:	3308      	adds	r3, #8
 800c412:	9303      	str	r3, [sp, #12]
 800c414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c416:	4433      	add	r3, r6
 800c418:	9309      	str	r3, [sp, #36]	@ 0x24
 800c41a:	e76a      	b.n	800c2f2 <_svfiprintf_r+0x52>
 800c41c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c420:	460c      	mov	r4, r1
 800c422:	2001      	movs	r0, #1
 800c424:	e7a8      	b.n	800c378 <_svfiprintf_r+0xd8>
 800c426:	2300      	movs	r3, #0
 800c428:	3401      	adds	r4, #1
 800c42a:	9305      	str	r3, [sp, #20]
 800c42c:	4619      	mov	r1, r3
 800c42e:	f04f 0c0a 	mov.w	ip, #10
 800c432:	4620      	mov	r0, r4
 800c434:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c438:	3a30      	subs	r2, #48	@ 0x30
 800c43a:	2a09      	cmp	r2, #9
 800c43c:	d903      	bls.n	800c446 <_svfiprintf_r+0x1a6>
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0c6      	beq.n	800c3d0 <_svfiprintf_r+0x130>
 800c442:	9105      	str	r1, [sp, #20]
 800c444:	e7c4      	b.n	800c3d0 <_svfiprintf_r+0x130>
 800c446:	fb0c 2101 	mla	r1, ip, r1, r2
 800c44a:	4604      	mov	r4, r0
 800c44c:	2301      	movs	r3, #1
 800c44e:	e7f0      	b.n	800c432 <_svfiprintf_r+0x192>
 800c450:	ab03      	add	r3, sp, #12
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	462a      	mov	r2, r5
 800c456:	4b0e      	ldr	r3, [pc, #56]	@ (800c490 <_svfiprintf_r+0x1f0>)
 800c458:	a904      	add	r1, sp, #16
 800c45a:	4638      	mov	r0, r7
 800c45c:	f7fd fda4 	bl	8009fa8 <_printf_float>
 800c460:	1c42      	adds	r2, r0, #1
 800c462:	4606      	mov	r6, r0
 800c464:	d1d6      	bne.n	800c414 <_svfiprintf_r+0x174>
 800c466:	89ab      	ldrh	r3, [r5, #12]
 800c468:	065b      	lsls	r3, r3, #25
 800c46a:	f53f af2d 	bmi.w	800c2c8 <_svfiprintf_r+0x28>
 800c46e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c470:	e72c      	b.n	800c2cc <_svfiprintf_r+0x2c>
 800c472:	ab03      	add	r3, sp, #12
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	462a      	mov	r2, r5
 800c478:	4b05      	ldr	r3, [pc, #20]	@ (800c490 <_svfiprintf_r+0x1f0>)
 800c47a:	a904      	add	r1, sp, #16
 800c47c:	4638      	mov	r0, r7
 800c47e:	f7fe f81b 	bl	800a4b8 <_printf_i>
 800c482:	e7ed      	b.n	800c460 <_svfiprintf_r+0x1c0>
 800c484:	0800cfa6 	.word	0x0800cfa6
 800c488:	0800cfb0 	.word	0x0800cfb0
 800c48c:	08009fa9 	.word	0x08009fa9
 800c490:	0800c1e9 	.word	0x0800c1e9
 800c494:	0800cfac 	.word	0x0800cfac

0800c498 <__sfputc_r>:
 800c498:	6893      	ldr	r3, [r2, #8]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	b410      	push	{r4}
 800c4a0:	6093      	str	r3, [r2, #8]
 800c4a2:	da08      	bge.n	800c4b6 <__sfputc_r+0x1e>
 800c4a4:	6994      	ldr	r4, [r2, #24]
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	db01      	blt.n	800c4ae <__sfputc_r+0x16>
 800c4aa:	290a      	cmp	r1, #10
 800c4ac:	d103      	bne.n	800c4b6 <__sfputc_r+0x1e>
 800c4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b2:	f7fe bab6 	b.w	800aa22 <__swbuf_r>
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	1c58      	adds	r0, r3, #1
 800c4ba:	6010      	str	r0, [r2, #0]
 800c4bc:	7019      	strb	r1, [r3, #0]
 800c4be:	4608      	mov	r0, r1
 800c4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <__sfputs_r>:
 800c4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	460f      	mov	r7, r1
 800c4cc:	4614      	mov	r4, r2
 800c4ce:	18d5      	adds	r5, r2, r3
 800c4d0:	42ac      	cmp	r4, r5
 800c4d2:	d101      	bne.n	800c4d8 <__sfputs_r+0x12>
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e007      	b.n	800c4e8 <__sfputs_r+0x22>
 800c4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4dc:	463a      	mov	r2, r7
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f7ff ffda 	bl	800c498 <__sfputc_r>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d1f3      	bne.n	800c4d0 <__sfputs_r+0xa>
 800c4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4ec <_vfiprintf_r>:
 800c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	b09d      	sub	sp, #116	@ 0x74
 800c4f4:	4614      	mov	r4, r2
 800c4f6:	4698      	mov	r8, r3
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	b118      	cbz	r0, 800c504 <_vfiprintf_r+0x18>
 800c4fc:	6a03      	ldr	r3, [r0, #32]
 800c4fe:	b90b      	cbnz	r3, 800c504 <_vfiprintf_r+0x18>
 800c500:	f7fe f984 	bl	800a80c <__sinit>
 800c504:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c506:	07d9      	lsls	r1, r3, #31
 800c508:	d405      	bmi.n	800c516 <_vfiprintf_r+0x2a>
 800c50a:	89ab      	ldrh	r3, [r5, #12]
 800c50c:	059a      	lsls	r2, r3, #22
 800c50e:	d402      	bmi.n	800c516 <_vfiprintf_r+0x2a>
 800c510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c512:	f7fe fbf6 	bl	800ad02 <__retarget_lock_acquire_recursive>
 800c516:	89ab      	ldrh	r3, [r5, #12]
 800c518:	071b      	lsls	r3, r3, #28
 800c51a:	d501      	bpl.n	800c520 <_vfiprintf_r+0x34>
 800c51c:	692b      	ldr	r3, [r5, #16]
 800c51e:	b99b      	cbnz	r3, 800c548 <_vfiprintf_r+0x5c>
 800c520:	4629      	mov	r1, r5
 800c522:	4630      	mov	r0, r6
 800c524:	f7fe fabc 	bl	800aaa0 <__swsetup_r>
 800c528:	b170      	cbz	r0, 800c548 <_vfiprintf_r+0x5c>
 800c52a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c52c:	07dc      	lsls	r4, r3, #31
 800c52e:	d504      	bpl.n	800c53a <_vfiprintf_r+0x4e>
 800c530:	f04f 30ff 	mov.w	r0, #4294967295
 800c534:	b01d      	add	sp, #116	@ 0x74
 800c536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53a:	89ab      	ldrh	r3, [r5, #12]
 800c53c:	0598      	lsls	r0, r3, #22
 800c53e:	d4f7      	bmi.n	800c530 <_vfiprintf_r+0x44>
 800c540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c542:	f7fe fbdf 	bl	800ad04 <__retarget_lock_release_recursive>
 800c546:	e7f3      	b.n	800c530 <_vfiprintf_r+0x44>
 800c548:	2300      	movs	r3, #0
 800c54a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c54c:	2320      	movs	r3, #32
 800c54e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c552:	f8cd 800c 	str.w	r8, [sp, #12]
 800c556:	2330      	movs	r3, #48	@ 0x30
 800c558:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c708 <_vfiprintf_r+0x21c>
 800c55c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c560:	f04f 0901 	mov.w	r9, #1
 800c564:	4623      	mov	r3, r4
 800c566:	469a      	mov	sl, r3
 800c568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c56c:	b10a      	cbz	r2, 800c572 <_vfiprintf_r+0x86>
 800c56e:	2a25      	cmp	r2, #37	@ 0x25
 800c570:	d1f9      	bne.n	800c566 <_vfiprintf_r+0x7a>
 800c572:	ebba 0b04 	subs.w	fp, sl, r4
 800c576:	d00b      	beq.n	800c590 <_vfiprintf_r+0xa4>
 800c578:	465b      	mov	r3, fp
 800c57a:	4622      	mov	r2, r4
 800c57c:	4629      	mov	r1, r5
 800c57e:	4630      	mov	r0, r6
 800c580:	f7ff ffa1 	bl	800c4c6 <__sfputs_r>
 800c584:	3001      	adds	r0, #1
 800c586:	f000 80a7 	beq.w	800c6d8 <_vfiprintf_r+0x1ec>
 800c58a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c58c:	445a      	add	r2, fp
 800c58e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c590:	f89a 3000 	ldrb.w	r3, [sl]
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 809f 	beq.w	800c6d8 <_vfiprintf_r+0x1ec>
 800c59a:	2300      	movs	r3, #0
 800c59c:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5a4:	f10a 0a01 	add.w	sl, sl, #1
 800c5a8:	9304      	str	r3, [sp, #16]
 800c5aa:	9307      	str	r3, [sp, #28]
 800c5ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5b2:	4654      	mov	r4, sl
 800c5b4:	2205      	movs	r2, #5
 800c5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ba:	4853      	ldr	r0, [pc, #332]	@ (800c708 <_vfiprintf_r+0x21c>)
 800c5bc:	f7f3 fe40 	bl	8000240 <memchr>
 800c5c0:	9a04      	ldr	r2, [sp, #16]
 800c5c2:	b9d8      	cbnz	r0, 800c5fc <_vfiprintf_r+0x110>
 800c5c4:	06d1      	lsls	r1, r2, #27
 800c5c6:	bf44      	itt	mi
 800c5c8:	2320      	movmi	r3, #32
 800c5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5ce:	0713      	lsls	r3, r2, #28
 800c5d0:	bf44      	itt	mi
 800c5d2:	232b      	movmi	r3, #43	@ 0x2b
 800c5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5de:	d015      	beq.n	800c60c <_vfiprintf_r+0x120>
 800c5e0:	9a07      	ldr	r2, [sp, #28]
 800c5e2:	4654      	mov	r4, sl
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	f04f 0c0a 	mov.w	ip, #10
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5f0:	3b30      	subs	r3, #48	@ 0x30
 800c5f2:	2b09      	cmp	r3, #9
 800c5f4:	d94b      	bls.n	800c68e <_vfiprintf_r+0x1a2>
 800c5f6:	b1b0      	cbz	r0, 800c626 <_vfiprintf_r+0x13a>
 800c5f8:	9207      	str	r2, [sp, #28]
 800c5fa:	e014      	b.n	800c626 <_vfiprintf_r+0x13a>
 800c5fc:	eba0 0308 	sub.w	r3, r0, r8
 800c600:	fa09 f303 	lsl.w	r3, r9, r3
 800c604:	4313      	orrs	r3, r2
 800c606:	9304      	str	r3, [sp, #16]
 800c608:	46a2      	mov	sl, r4
 800c60a:	e7d2      	b.n	800c5b2 <_vfiprintf_r+0xc6>
 800c60c:	9b03      	ldr	r3, [sp, #12]
 800c60e:	1d19      	adds	r1, r3, #4
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	9103      	str	r1, [sp, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	bfbb      	ittet	lt
 800c618:	425b      	neglt	r3, r3
 800c61a:	f042 0202 	orrlt.w	r2, r2, #2
 800c61e:	9307      	strge	r3, [sp, #28]
 800c620:	9307      	strlt	r3, [sp, #28]
 800c622:	bfb8      	it	lt
 800c624:	9204      	strlt	r2, [sp, #16]
 800c626:	7823      	ldrb	r3, [r4, #0]
 800c628:	2b2e      	cmp	r3, #46	@ 0x2e
 800c62a:	d10a      	bne.n	800c642 <_vfiprintf_r+0x156>
 800c62c:	7863      	ldrb	r3, [r4, #1]
 800c62e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c630:	d132      	bne.n	800c698 <_vfiprintf_r+0x1ac>
 800c632:	9b03      	ldr	r3, [sp, #12]
 800c634:	1d1a      	adds	r2, r3, #4
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	9203      	str	r2, [sp, #12]
 800c63a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c63e:	3402      	adds	r4, #2
 800c640:	9305      	str	r3, [sp, #20]
 800c642:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c718 <_vfiprintf_r+0x22c>
 800c646:	7821      	ldrb	r1, [r4, #0]
 800c648:	2203      	movs	r2, #3
 800c64a:	4650      	mov	r0, sl
 800c64c:	f7f3 fdf8 	bl	8000240 <memchr>
 800c650:	b138      	cbz	r0, 800c662 <_vfiprintf_r+0x176>
 800c652:	9b04      	ldr	r3, [sp, #16]
 800c654:	eba0 000a 	sub.w	r0, r0, sl
 800c658:	2240      	movs	r2, #64	@ 0x40
 800c65a:	4082      	lsls	r2, r0
 800c65c:	4313      	orrs	r3, r2
 800c65e:	3401      	adds	r4, #1
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c666:	4829      	ldr	r0, [pc, #164]	@ (800c70c <_vfiprintf_r+0x220>)
 800c668:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c66c:	2206      	movs	r2, #6
 800c66e:	f7f3 fde7 	bl	8000240 <memchr>
 800c672:	2800      	cmp	r0, #0
 800c674:	d03f      	beq.n	800c6f6 <_vfiprintf_r+0x20a>
 800c676:	4b26      	ldr	r3, [pc, #152]	@ (800c710 <_vfiprintf_r+0x224>)
 800c678:	bb1b      	cbnz	r3, 800c6c2 <_vfiprintf_r+0x1d6>
 800c67a:	9b03      	ldr	r3, [sp, #12]
 800c67c:	3307      	adds	r3, #7
 800c67e:	f023 0307 	bic.w	r3, r3, #7
 800c682:	3308      	adds	r3, #8
 800c684:	9303      	str	r3, [sp, #12]
 800c686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c688:	443b      	add	r3, r7
 800c68a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c68c:	e76a      	b.n	800c564 <_vfiprintf_r+0x78>
 800c68e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c692:	460c      	mov	r4, r1
 800c694:	2001      	movs	r0, #1
 800c696:	e7a8      	b.n	800c5ea <_vfiprintf_r+0xfe>
 800c698:	2300      	movs	r3, #0
 800c69a:	3401      	adds	r4, #1
 800c69c:	9305      	str	r3, [sp, #20]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	f04f 0c0a 	mov.w	ip, #10
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6aa:	3a30      	subs	r2, #48	@ 0x30
 800c6ac:	2a09      	cmp	r2, #9
 800c6ae:	d903      	bls.n	800c6b8 <_vfiprintf_r+0x1cc>
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d0c6      	beq.n	800c642 <_vfiprintf_r+0x156>
 800c6b4:	9105      	str	r1, [sp, #20]
 800c6b6:	e7c4      	b.n	800c642 <_vfiprintf_r+0x156>
 800c6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6bc:	4604      	mov	r4, r0
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e7f0      	b.n	800c6a4 <_vfiprintf_r+0x1b8>
 800c6c2:	ab03      	add	r3, sp, #12
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	462a      	mov	r2, r5
 800c6c8:	4b12      	ldr	r3, [pc, #72]	@ (800c714 <_vfiprintf_r+0x228>)
 800c6ca:	a904      	add	r1, sp, #16
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7fd fc6b 	bl	8009fa8 <_printf_float>
 800c6d2:	4607      	mov	r7, r0
 800c6d4:	1c78      	adds	r0, r7, #1
 800c6d6:	d1d6      	bne.n	800c686 <_vfiprintf_r+0x19a>
 800c6d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6da:	07d9      	lsls	r1, r3, #31
 800c6dc:	d405      	bmi.n	800c6ea <_vfiprintf_r+0x1fe>
 800c6de:	89ab      	ldrh	r3, [r5, #12]
 800c6e0:	059a      	lsls	r2, r3, #22
 800c6e2:	d402      	bmi.n	800c6ea <_vfiprintf_r+0x1fe>
 800c6e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6e6:	f7fe fb0d 	bl	800ad04 <__retarget_lock_release_recursive>
 800c6ea:	89ab      	ldrh	r3, [r5, #12]
 800c6ec:	065b      	lsls	r3, r3, #25
 800c6ee:	f53f af1f 	bmi.w	800c530 <_vfiprintf_r+0x44>
 800c6f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6f4:	e71e      	b.n	800c534 <_vfiprintf_r+0x48>
 800c6f6:	ab03      	add	r3, sp, #12
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4b05      	ldr	r3, [pc, #20]	@ (800c714 <_vfiprintf_r+0x228>)
 800c6fe:	a904      	add	r1, sp, #16
 800c700:	4630      	mov	r0, r6
 800c702:	f7fd fed9 	bl	800a4b8 <_printf_i>
 800c706:	e7e4      	b.n	800c6d2 <_vfiprintf_r+0x1e6>
 800c708:	0800cfa6 	.word	0x0800cfa6
 800c70c:	0800cfb0 	.word	0x0800cfb0
 800c710:	08009fa9 	.word	0x08009fa9
 800c714:	0800c4c7 	.word	0x0800c4c7
 800c718:	0800cfac 	.word	0x0800cfac

0800c71c <__sflush_r>:
 800c71c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c724:	0716      	lsls	r6, r2, #28
 800c726:	4605      	mov	r5, r0
 800c728:	460c      	mov	r4, r1
 800c72a:	d454      	bmi.n	800c7d6 <__sflush_r+0xba>
 800c72c:	684b      	ldr	r3, [r1, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	dc02      	bgt.n	800c738 <__sflush_r+0x1c>
 800c732:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c734:	2b00      	cmp	r3, #0
 800c736:	dd48      	ble.n	800c7ca <__sflush_r+0xae>
 800c738:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c73a:	2e00      	cmp	r6, #0
 800c73c:	d045      	beq.n	800c7ca <__sflush_r+0xae>
 800c73e:	2300      	movs	r3, #0
 800c740:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c744:	682f      	ldr	r7, [r5, #0]
 800c746:	6a21      	ldr	r1, [r4, #32]
 800c748:	602b      	str	r3, [r5, #0]
 800c74a:	d030      	beq.n	800c7ae <__sflush_r+0x92>
 800c74c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	0759      	lsls	r1, r3, #29
 800c752:	d505      	bpl.n	800c760 <__sflush_r+0x44>
 800c754:	6863      	ldr	r3, [r4, #4]
 800c756:	1ad2      	subs	r2, r2, r3
 800c758:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c75a:	b10b      	cbz	r3, 800c760 <__sflush_r+0x44>
 800c75c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	2300      	movs	r3, #0
 800c762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c764:	6a21      	ldr	r1, [r4, #32]
 800c766:	4628      	mov	r0, r5
 800c768:	47b0      	blx	r6
 800c76a:	1c43      	adds	r3, r0, #1
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	d106      	bne.n	800c77e <__sflush_r+0x62>
 800c770:	6829      	ldr	r1, [r5, #0]
 800c772:	291d      	cmp	r1, #29
 800c774:	d82b      	bhi.n	800c7ce <__sflush_r+0xb2>
 800c776:	4a2a      	ldr	r2, [pc, #168]	@ (800c820 <__sflush_r+0x104>)
 800c778:	40ca      	lsrs	r2, r1
 800c77a:	07d6      	lsls	r6, r2, #31
 800c77c:	d527      	bpl.n	800c7ce <__sflush_r+0xb2>
 800c77e:	2200      	movs	r2, #0
 800c780:	6062      	str	r2, [r4, #4]
 800c782:	04d9      	lsls	r1, r3, #19
 800c784:	6922      	ldr	r2, [r4, #16]
 800c786:	6022      	str	r2, [r4, #0]
 800c788:	d504      	bpl.n	800c794 <__sflush_r+0x78>
 800c78a:	1c42      	adds	r2, r0, #1
 800c78c:	d101      	bne.n	800c792 <__sflush_r+0x76>
 800c78e:	682b      	ldr	r3, [r5, #0]
 800c790:	b903      	cbnz	r3, 800c794 <__sflush_r+0x78>
 800c792:	6560      	str	r0, [r4, #84]	@ 0x54
 800c794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c796:	602f      	str	r7, [r5, #0]
 800c798:	b1b9      	cbz	r1, 800c7ca <__sflush_r+0xae>
 800c79a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c79e:	4299      	cmp	r1, r3
 800c7a0:	d002      	beq.n	800c7a8 <__sflush_r+0x8c>
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f7ff f8a6 	bl	800b8f4 <_free_r>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7ac:	e00d      	b.n	800c7ca <__sflush_r+0xae>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b0      	blx	r6
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	1c50      	adds	r0, r2, #1
 800c7b8:	d1c9      	bne.n	800c74e <__sflush_r+0x32>
 800c7ba:	682b      	ldr	r3, [r5, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d0c6      	beq.n	800c74e <__sflush_r+0x32>
 800c7c0:	2b1d      	cmp	r3, #29
 800c7c2:	d001      	beq.n	800c7c8 <__sflush_r+0xac>
 800c7c4:	2b16      	cmp	r3, #22
 800c7c6:	d11e      	bne.n	800c806 <__sflush_r+0xea>
 800c7c8:	602f      	str	r7, [r5, #0]
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e022      	b.n	800c814 <__sflush_r+0xf8>
 800c7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d2:	b21b      	sxth	r3, r3
 800c7d4:	e01b      	b.n	800c80e <__sflush_r+0xf2>
 800c7d6:	690f      	ldr	r7, [r1, #16]
 800c7d8:	2f00      	cmp	r7, #0
 800c7da:	d0f6      	beq.n	800c7ca <__sflush_r+0xae>
 800c7dc:	0793      	lsls	r3, r2, #30
 800c7de:	680e      	ldr	r6, [r1, #0]
 800c7e0:	bf08      	it	eq
 800c7e2:	694b      	ldreq	r3, [r1, #20]
 800c7e4:	600f      	str	r7, [r1, #0]
 800c7e6:	bf18      	it	ne
 800c7e8:	2300      	movne	r3, #0
 800c7ea:	eba6 0807 	sub.w	r8, r6, r7
 800c7ee:	608b      	str	r3, [r1, #8]
 800c7f0:	f1b8 0f00 	cmp.w	r8, #0
 800c7f4:	dde9      	ble.n	800c7ca <__sflush_r+0xae>
 800c7f6:	6a21      	ldr	r1, [r4, #32]
 800c7f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7fa:	4643      	mov	r3, r8
 800c7fc:	463a      	mov	r2, r7
 800c7fe:	4628      	mov	r0, r5
 800c800:	47b0      	blx	r6
 800c802:	2800      	cmp	r0, #0
 800c804:	dc08      	bgt.n	800c818 <__sflush_r+0xfc>
 800c806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c80e:	81a3      	strh	r3, [r4, #12]
 800c810:	f04f 30ff 	mov.w	r0, #4294967295
 800c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c818:	4407      	add	r7, r0
 800c81a:	eba8 0800 	sub.w	r8, r8, r0
 800c81e:	e7e7      	b.n	800c7f0 <__sflush_r+0xd4>
 800c820:	20400001 	.word	0x20400001

0800c824 <_fflush_r>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	690b      	ldr	r3, [r1, #16]
 800c828:	4605      	mov	r5, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	b913      	cbnz	r3, 800c834 <_fflush_r+0x10>
 800c82e:	2500      	movs	r5, #0
 800c830:	4628      	mov	r0, r5
 800c832:	bd38      	pop	{r3, r4, r5, pc}
 800c834:	b118      	cbz	r0, 800c83e <_fflush_r+0x1a>
 800c836:	6a03      	ldr	r3, [r0, #32]
 800c838:	b90b      	cbnz	r3, 800c83e <_fflush_r+0x1a>
 800c83a:	f7fd ffe7 	bl	800a80c <__sinit>
 800c83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0f3      	beq.n	800c82e <_fflush_r+0xa>
 800c846:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c848:	07d0      	lsls	r0, r2, #31
 800c84a:	d404      	bmi.n	800c856 <_fflush_r+0x32>
 800c84c:	0599      	lsls	r1, r3, #22
 800c84e:	d402      	bmi.n	800c856 <_fflush_r+0x32>
 800c850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c852:	f7fe fa56 	bl	800ad02 <__retarget_lock_acquire_recursive>
 800c856:	4628      	mov	r0, r5
 800c858:	4621      	mov	r1, r4
 800c85a:	f7ff ff5f 	bl	800c71c <__sflush_r>
 800c85e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c860:	07da      	lsls	r2, r3, #31
 800c862:	4605      	mov	r5, r0
 800c864:	d4e4      	bmi.n	800c830 <_fflush_r+0xc>
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	059b      	lsls	r3, r3, #22
 800c86a:	d4e1      	bmi.n	800c830 <_fflush_r+0xc>
 800c86c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c86e:	f7fe fa49 	bl	800ad04 <__retarget_lock_release_recursive>
 800c872:	e7dd      	b.n	800c830 <_fflush_r+0xc>

0800c874 <__swhatbuf_r>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	460c      	mov	r4, r1
 800c878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87c:	2900      	cmp	r1, #0
 800c87e:	b096      	sub	sp, #88	@ 0x58
 800c880:	4615      	mov	r5, r2
 800c882:	461e      	mov	r6, r3
 800c884:	da0d      	bge.n	800c8a2 <__swhatbuf_r+0x2e>
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c88c:	f04f 0100 	mov.w	r1, #0
 800c890:	bf14      	ite	ne
 800c892:	2340      	movne	r3, #64	@ 0x40
 800c894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c898:	2000      	movs	r0, #0
 800c89a:	6031      	str	r1, [r6, #0]
 800c89c:	602b      	str	r3, [r5, #0]
 800c89e:	b016      	add	sp, #88	@ 0x58
 800c8a0:	bd70      	pop	{r4, r5, r6, pc}
 800c8a2:	466a      	mov	r2, sp
 800c8a4:	f000 f862 	bl	800c96c <_fstat_r>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	dbec      	blt.n	800c886 <__swhatbuf_r+0x12>
 800c8ac:	9901      	ldr	r1, [sp, #4]
 800c8ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c8b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c8b6:	4259      	negs	r1, r3
 800c8b8:	4159      	adcs	r1, r3
 800c8ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8be:	e7eb      	b.n	800c898 <__swhatbuf_r+0x24>

0800c8c0 <__smakebuf_r>:
 800c8c0:	898b      	ldrh	r3, [r1, #12]
 800c8c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8c4:	079d      	lsls	r5, r3, #30
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	d507      	bpl.n	800c8dc <__smakebuf_r+0x1c>
 800c8cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	6123      	str	r3, [r4, #16]
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	6163      	str	r3, [r4, #20]
 800c8d8:	b003      	add	sp, #12
 800c8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8dc:	ab01      	add	r3, sp, #4
 800c8de:	466a      	mov	r2, sp
 800c8e0:	f7ff ffc8 	bl	800c874 <__swhatbuf_r>
 800c8e4:	9f00      	ldr	r7, [sp, #0]
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7ff f876 	bl	800b9dc <_malloc_r>
 800c8f0:	b948      	cbnz	r0, 800c906 <__smakebuf_r+0x46>
 800c8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8f6:	059a      	lsls	r2, r3, #22
 800c8f8:	d4ee      	bmi.n	800c8d8 <__smakebuf_r+0x18>
 800c8fa:	f023 0303 	bic.w	r3, r3, #3
 800c8fe:	f043 0302 	orr.w	r3, r3, #2
 800c902:	81a3      	strh	r3, [r4, #12]
 800c904:	e7e2      	b.n	800c8cc <__smakebuf_r+0xc>
 800c906:	89a3      	ldrh	r3, [r4, #12]
 800c908:	6020      	str	r0, [r4, #0]
 800c90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	9b01      	ldr	r3, [sp, #4]
 800c912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c916:	b15b      	cbz	r3, 800c930 <__smakebuf_r+0x70>
 800c918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c91c:	4630      	mov	r0, r6
 800c91e:	f000 f837 	bl	800c990 <_isatty_r>
 800c922:	b128      	cbz	r0, 800c930 <__smakebuf_r+0x70>
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	f023 0303 	bic.w	r3, r3, #3
 800c92a:	f043 0301 	orr.w	r3, r3, #1
 800c92e:	81a3      	strh	r3, [r4, #12]
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	431d      	orrs	r5, r3
 800c934:	81a5      	strh	r5, [r4, #12]
 800c936:	e7cf      	b.n	800c8d8 <__smakebuf_r+0x18>

0800c938 <memmove>:
 800c938:	4288      	cmp	r0, r1
 800c93a:	b510      	push	{r4, lr}
 800c93c:	eb01 0402 	add.w	r4, r1, r2
 800c940:	d902      	bls.n	800c948 <memmove+0x10>
 800c942:	4284      	cmp	r4, r0
 800c944:	4623      	mov	r3, r4
 800c946:	d807      	bhi.n	800c958 <memmove+0x20>
 800c948:	1e43      	subs	r3, r0, #1
 800c94a:	42a1      	cmp	r1, r4
 800c94c:	d008      	beq.n	800c960 <memmove+0x28>
 800c94e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c952:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c956:	e7f8      	b.n	800c94a <memmove+0x12>
 800c958:	4402      	add	r2, r0
 800c95a:	4601      	mov	r1, r0
 800c95c:	428a      	cmp	r2, r1
 800c95e:	d100      	bne.n	800c962 <memmove+0x2a>
 800c960:	bd10      	pop	{r4, pc}
 800c962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c96a:	e7f7      	b.n	800c95c <memmove+0x24>

0800c96c <_fstat_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4d07      	ldr	r5, [pc, #28]	@ (800c98c <_fstat_r+0x20>)
 800c970:	2300      	movs	r3, #0
 800c972:	4604      	mov	r4, r0
 800c974:	4608      	mov	r0, r1
 800c976:	4611      	mov	r1, r2
 800c978:	602b      	str	r3, [r5, #0]
 800c97a:	f7f5 fb99 	bl	80020b0 <_fstat>
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	d102      	bne.n	800c988 <_fstat_r+0x1c>
 800c982:	682b      	ldr	r3, [r5, #0]
 800c984:	b103      	cbz	r3, 800c988 <_fstat_r+0x1c>
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	bd38      	pop	{r3, r4, r5, pc}
 800c98a:	bf00      	nop
 800c98c:	20004f14 	.word	0x20004f14

0800c990 <_isatty_r>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4d06      	ldr	r5, [pc, #24]	@ (800c9ac <_isatty_r+0x1c>)
 800c994:	2300      	movs	r3, #0
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
 800c99a:	602b      	str	r3, [r5, #0]
 800c99c:	f7f5 fb98 	bl	80020d0 <_isatty>
 800c9a0:	1c43      	adds	r3, r0, #1
 800c9a2:	d102      	bne.n	800c9aa <_isatty_r+0x1a>
 800c9a4:	682b      	ldr	r3, [r5, #0]
 800c9a6:	b103      	cbz	r3, 800c9aa <_isatty_r+0x1a>
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	bd38      	pop	{r3, r4, r5, pc}
 800c9ac:	20004f14 	.word	0x20004f14

0800c9b0 <_sbrk_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4d06      	ldr	r5, [pc, #24]	@ (800c9cc <_sbrk_r+0x1c>)
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	4608      	mov	r0, r1
 800c9ba:	602b      	str	r3, [r5, #0]
 800c9bc:	f7f5 fba0 	bl	8002100 <_sbrk>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <_sbrk_r+0x1a>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	b103      	cbz	r3, 800c9ca <_sbrk_r+0x1a>
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	20004f14 	.word	0x20004f14

0800c9d0 <__assert_func>:
 800c9d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9d2:	4614      	mov	r4, r2
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	4b09      	ldr	r3, [pc, #36]	@ (800c9fc <__assert_func+0x2c>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4605      	mov	r5, r0
 800c9dc:	68d8      	ldr	r0, [r3, #12]
 800c9de:	b14c      	cbz	r4, 800c9f4 <__assert_func+0x24>
 800c9e0:	4b07      	ldr	r3, [pc, #28]	@ (800ca00 <__assert_func+0x30>)
 800c9e2:	9100      	str	r1, [sp, #0]
 800c9e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9e8:	4906      	ldr	r1, [pc, #24]	@ (800ca04 <__assert_func+0x34>)
 800c9ea:	462b      	mov	r3, r5
 800c9ec:	f000 f870 	bl	800cad0 <fiprintf>
 800c9f0:	f000 f880 	bl	800caf4 <abort>
 800c9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ca08 <__assert_func+0x38>)
 800c9f6:	461c      	mov	r4, r3
 800c9f8:	e7f3      	b.n	800c9e2 <__assert_func+0x12>
 800c9fa:	bf00      	nop
 800c9fc:	2000001c 	.word	0x2000001c
 800ca00:	0800cfc1 	.word	0x0800cfc1
 800ca04:	0800cfce 	.word	0x0800cfce
 800ca08:	0800cffc 	.word	0x0800cffc

0800ca0c <_calloc_r>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	fba1 5402 	umull	r5, r4, r1, r2
 800ca12:	b934      	cbnz	r4, 800ca22 <_calloc_r+0x16>
 800ca14:	4629      	mov	r1, r5
 800ca16:	f7fe ffe1 	bl	800b9dc <_malloc_r>
 800ca1a:	4606      	mov	r6, r0
 800ca1c:	b928      	cbnz	r0, 800ca2a <_calloc_r+0x1e>
 800ca1e:	4630      	mov	r0, r6
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	220c      	movs	r2, #12
 800ca24:	6002      	str	r2, [r0, #0]
 800ca26:	2600      	movs	r6, #0
 800ca28:	e7f9      	b.n	800ca1e <_calloc_r+0x12>
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f7fe f88d 	bl	800ab4c <memset>
 800ca32:	e7f4      	b.n	800ca1e <_calloc_r+0x12>

0800ca34 <__ascii_mbtowc>:
 800ca34:	b082      	sub	sp, #8
 800ca36:	b901      	cbnz	r1, 800ca3a <__ascii_mbtowc+0x6>
 800ca38:	a901      	add	r1, sp, #4
 800ca3a:	b142      	cbz	r2, 800ca4e <__ascii_mbtowc+0x1a>
 800ca3c:	b14b      	cbz	r3, 800ca52 <__ascii_mbtowc+0x1e>
 800ca3e:	7813      	ldrb	r3, [r2, #0]
 800ca40:	600b      	str	r3, [r1, #0]
 800ca42:	7812      	ldrb	r2, [r2, #0]
 800ca44:	1e10      	subs	r0, r2, #0
 800ca46:	bf18      	it	ne
 800ca48:	2001      	movne	r0, #1
 800ca4a:	b002      	add	sp, #8
 800ca4c:	4770      	bx	lr
 800ca4e:	4610      	mov	r0, r2
 800ca50:	e7fb      	b.n	800ca4a <__ascii_mbtowc+0x16>
 800ca52:	f06f 0001 	mvn.w	r0, #1
 800ca56:	e7f8      	b.n	800ca4a <__ascii_mbtowc+0x16>

0800ca58 <_realloc_r>:
 800ca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5c:	4607      	mov	r7, r0
 800ca5e:	4614      	mov	r4, r2
 800ca60:	460d      	mov	r5, r1
 800ca62:	b921      	cbnz	r1, 800ca6e <_realloc_r+0x16>
 800ca64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca68:	4611      	mov	r1, r2
 800ca6a:	f7fe bfb7 	b.w	800b9dc <_malloc_r>
 800ca6e:	b92a      	cbnz	r2, 800ca7c <_realloc_r+0x24>
 800ca70:	f7fe ff40 	bl	800b8f4 <_free_r>
 800ca74:	4625      	mov	r5, r4
 800ca76:	4628      	mov	r0, r5
 800ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7c:	f000 f841 	bl	800cb02 <_malloc_usable_size_r>
 800ca80:	4284      	cmp	r4, r0
 800ca82:	4606      	mov	r6, r0
 800ca84:	d802      	bhi.n	800ca8c <_realloc_r+0x34>
 800ca86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca8a:	d8f4      	bhi.n	800ca76 <_realloc_r+0x1e>
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	4638      	mov	r0, r7
 800ca90:	f7fe ffa4 	bl	800b9dc <_malloc_r>
 800ca94:	4680      	mov	r8, r0
 800ca96:	b908      	cbnz	r0, 800ca9c <_realloc_r+0x44>
 800ca98:	4645      	mov	r5, r8
 800ca9a:	e7ec      	b.n	800ca76 <_realloc_r+0x1e>
 800ca9c:	42b4      	cmp	r4, r6
 800ca9e:	4622      	mov	r2, r4
 800caa0:	4629      	mov	r1, r5
 800caa2:	bf28      	it	cs
 800caa4:	4632      	movcs	r2, r6
 800caa6:	f7fe f92e 	bl	800ad06 <memcpy>
 800caaa:	4629      	mov	r1, r5
 800caac:	4638      	mov	r0, r7
 800caae:	f7fe ff21 	bl	800b8f4 <_free_r>
 800cab2:	e7f1      	b.n	800ca98 <_realloc_r+0x40>

0800cab4 <__ascii_wctomb>:
 800cab4:	4603      	mov	r3, r0
 800cab6:	4608      	mov	r0, r1
 800cab8:	b141      	cbz	r1, 800cacc <__ascii_wctomb+0x18>
 800caba:	2aff      	cmp	r2, #255	@ 0xff
 800cabc:	d904      	bls.n	800cac8 <__ascii_wctomb+0x14>
 800cabe:	228a      	movs	r2, #138	@ 0x8a
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	f04f 30ff 	mov.w	r0, #4294967295
 800cac6:	4770      	bx	lr
 800cac8:	700a      	strb	r2, [r1, #0]
 800caca:	2001      	movs	r0, #1
 800cacc:	4770      	bx	lr
	...

0800cad0 <fiprintf>:
 800cad0:	b40e      	push	{r1, r2, r3}
 800cad2:	b503      	push	{r0, r1, lr}
 800cad4:	4601      	mov	r1, r0
 800cad6:	ab03      	add	r3, sp, #12
 800cad8:	4805      	ldr	r0, [pc, #20]	@ (800caf0 <fiprintf+0x20>)
 800cada:	f853 2b04 	ldr.w	r2, [r3], #4
 800cade:	6800      	ldr	r0, [r0, #0]
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	f7ff fd03 	bl	800c4ec <_vfiprintf_r>
 800cae6:	b002      	add	sp, #8
 800cae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800caec:	b003      	add	sp, #12
 800caee:	4770      	bx	lr
 800caf0:	2000001c 	.word	0x2000001c

0800caf4 <abort>:
 800caf4:	b508      	push	{r3, lr}
 800caf6:	2006      	movs	r0, #6
 800caf8:	f000 f834 	bl	800cb64 <raise>
 800cafc:	2001      	movs	r0, #1
 800cafe:	f7f5 fa87 	bl	8002010 <_exit>

0800cb02 <_malloc_usable_size_r>:
 800cb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb06:	1f18      	subs	r0, r3, #4
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfbc      	itt	lt
 800cb0c:	580b      	ldrlt	r3, [r1, r0]
 800cb0e:	18c0      	addlt	r0, r0, r3
 800cb10:	4770      	bx	lr

0800cb12 <_raise_r>:
 800cb12:	291f      	cmp	r1, #31
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4605      	mov	r5, r0
 800cb18:	460c      	mov	r4, r1
 800cb1a:	d904      	bls.n	800cb26 <_raise_r+0x14>
 800cb1c:	2316      	movs	r3, #22
 800cb1e:	6003      	str	r3, [r0, #0]
 800cb20:	f04f 30ff 	mov.w	r0, #4294967295
 800cb24:	bd38      	pop	{r3, r4, r5, pc}
 800cb26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb28:	b112      	cbz	r2, 800cb30 <_raise_r+0x1e>
 800cb2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb2e:	b94b      	cbnz	r3, 800cb44 <_raise_r+0x32>
 800cb30:	4628      	mov	r0, r5
 800cb32:	f000 f831 	bl	800cb98 <_getpid_r>
 800cb36:	4622      	mov	r2, r4
 800cb38:	4601      	mov	r1, r0
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb40:	f000 b818 	b.w	800cb74 <_kill_r>
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d00a      	beq.n	800cb5e <_raise_r+0x4c>
 800cb48:	1c59      	adds	r1, r3, #1
 800cb4a:	d103      	bne.n	800cb54 <_raise_r+0x42>
 800cb4c:	2316      	movs	r3, #22
 800cb4e:	6003      	str	r3, [r0, #0]
 800cb50:	2001      	movs	r0, #1
 800cb52:	e7e7      	b.n	800cb24 <_raise_r+0x12>
 800cb54:	2100      	movs	r1, #0
 800cb56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	4798      	blx	r3
 800cb5e:	2000      	movs	r0, #0
 800cb60:	e7e0      	b.n	800cb24 <_raise_r+0x12>
	...

0800cb64 <raise>:
 800cb64:	4b02      	ldr	r3, [pc, #8]	@ (800cb70 <raise+0xc>)
 800cb66:	4601      	mov	r1, r0
 800cb68:	6818      	ldr	r0, [r3, #0]
 800cb6a:	f7ff bfd2 	b.w	800cb12 <_raise_r>
 800cb6e:	bf00      	nop
 800cb70:	2000001c 	.word	0x2000001c

0800cb74 <_kill_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d07      	ldr	r5, [pc, #28]	@ (800cb94 <_kill_r+0x20>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	f7f5 fa35 	bl	8001ff0 <_kill>
 800cb86:	1c43      	adds	r3, r0, #1
 800cb88:	d102      	bne.n	800cb90 <_kill_r+0x1c>
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	b103      	cbz	r3, 800cb90 <_kill_r+0x1c>
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	bd38      	pop	{r3, r4, r5, pc}
 800cb92:	bf00      	nop
 800cb94:	20004f14 	.word	0x20004f14

0800cb98 <_getpid_r>:
 800cb98:	f7f5 ba22 	b.w	8001fe0 <_getpid>

0800cb9c <_init>:
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	bf00      	nop
 800cba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba2:	bc08      	pop	{r3}
 800cba4:	469e      	mov	lr, r3
 800cba6:	4770      	bx	lr

0800cba8 <_fini>:
 800cba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbaa:	bf00      	nop
 800cbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbae:	bc08      	pop	{r3}
 800cbb0:	469e      	mov	lr, r3
 800cbb2:	4770      	bx	lr
